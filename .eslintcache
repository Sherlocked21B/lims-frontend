[{"/home/sherlock/Workdev/Finished Product/lims-frontend/src/index.js":"1","/home/sherlock/Workdev/Finished Product/lims-frontend/src/App.js":"2","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/index.js":"3","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/appBar.js":"4","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddCutomer.js":"5","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ImportReagent.js":"6","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PendingSample.js":"7","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReagent.js":"8","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddTest.js":"9","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllSample.js":"10","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllReagent.js":"11","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/GenerateReport.js":"12","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/report.js":"13","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/EditTest.js":"14","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddSample.js":"15","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllEquipment.js":"16","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/HandleEquipment.js":"17","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/login.js":"18","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddEquipment.js":"19","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffRoute.js":"20","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllTest.js":"21","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryMRoute.js":"22","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedAdminRoute.js":"23","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffAccount.js":"24","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryStaff.js":"25","/home/sherlock/Workdev/Finished Product/lims-frontend/src/action/setUser.js":"26","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/register.js":"27","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/authReducer.js":"28","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SnackBar.js":"29","/home/sherlock/Workdev/Finished Product/lims-frontend/src/validation/validator.js":"30","/home/sherlock/Workdev/Finished Product/lims-frontend/src/api/index.js":"31","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddAnimal.js":"32"},{"size":562,"mtime":1613919733576,"results":"33","hashOfConfig":"34"},{"size":3540,"mtime":1620723808494,"results":"35","hashOfConfig":"34"},{"size":168,"mtime":1615964985100,"results":"36","hashOfConfig":"34"},{"size":6778,"mtime":1620724063626,"results":"37","hashOfConfig":"34"},{"size":9705,"mtime":1621096385940,"results":"38","hashOfConfig":"34"},{"size":4795,"mtime":1619686676157,"results":"39","hashOfConfig":"34"},{"size":5885,"mtime":1620555327616,"results":"40","hashOfConfig":"34"},{"size":7466,"mtime":1620385862280,"results":"41","hashOfConfig":"34"},{"size":8900,"mtime":1620564359794,"results":"42","hashOfConfig":"34"},{"size":8679,"mtime":1620555300230,"results":"43","hashOfConfig":"34"},{"size":6506,"mtime":1620555123157,"results":"44","hashOfConfig":"34"},{"size":10795,"mtime":1620385862280,"results":"45","hashOfConfig":"34"},{"size":10293,"mtime":1620385862287,"results":"46","hashOfConfig":"34"},{"size":9551,"mtime":1620564359794,"results":"47","hashOfConfig":"34"},{"size":11974,"mtime":1617169885641,"results":"48","hashOfConfig":"34"},{"size":6538,"mtime":1620555184740,"results":"49","hashOfConfig":"34"},{"size":5853,"mtime":1619686600990,"results":"50","hashOfConfig":"34"},{"size":3477,"mtime":1620385862284,"results":"51","hashOfConfig":"34"},{"size":7374,"mtime":1620385862280,"results":"52","hashOfConfig":"34"},{"size":751,"mtime":1617278437096,"results":"53","hashOfConfig":"34"},{"size":10098,"mtime":1620564359794,"results":"54","hashOfConfig":"34"},{"size":793,"mtime":1617278437096,"results":"55","hashOfConfig":"34"},{"size":712,"mtime":1617278437099,"results":"56","hashOfConfig":"34"},{"size":839,"mtime":1617278437096,"results":"57","hashOfConfig":"34"},{"size":830,"mtime":1617278437096,"results":"58","hashOfConfig":"34"},{"size":99,"mtime":1615964985097,"results":"59","hashOfConfig":"34"},{"size":7909,"mtime":1620385862284,"results":"60","hashOfConfig":"34"},{"size":181,"mtime":1615964985097,"results":"61","hashOfConfig":"34"},{"size":543,"mtime":1615964985094,"results":"62","hashOfConfig":"34"},{"size":3372,"mtime":1621098820972,"results":"63","hashOfConfig":"34"},{"size":258,"mtime":1620379265115,"results":"64","hashOfConfig":"34"},{"size":9748,"mtime":1621174482750,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"4ox5fk",{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"68"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sherlock/Workdev/Finished Product/lims-frontend/src/index.js",[],["149","150"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/App.js",["151","152"],"import React from \"react\";\nimport AppBar from \"./Components/appBar\";\nimport AddCustomer from \"./Components/AddCutomer\";\nimport AddReagent from \"./Components/AddReagent\";\nimport AddTest from \"./Components/AddTest\";\nimport ImportReagent from \"./Components/ImportReagent\";\nimport PendingSample from \"./Components/PendingSample\";\nimport AllSample from \"./Components/AllSample\";\nimport AllReagent from \"./Components/AllReagent\";\nimport AddSample from \"./Components/AddSample\";\nimport GenerateReport from \"./Components/GenerateReport\";\nimport Report from \"./Components/report\";\nimport AllTest from \"./Components/AllTest\";\nimport EditTest from \"./Components/EditTest\";\nimport AddEquipment from \"./Components/AddEquipment\";\nimport AllEquipment from \"./Components/AllEquipment\";\nimport HandleEquipment from \"./Components/HandleEquipment\";\nimport AddAnimal from \"./Components/AddAnimal\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport Login from \"./Components/login\";\nimport Register from \"./Components/register\";\nimport { setUser } from \"./action/setUser\";\nimport ProtectedStaffRoute from \"./Components/ProtectedStaffRoute\";\nimport ProtectedInventoryMRoute from \"./Components/ProtectedInventoryMRoute\";\nimport ProtectedStaffAccountRoute from \"./Components/ProtectedStaffAccount\";\nimport ProtectedInventoryStaff from \"./Components/ProtectedInventoryStaff\";\nimport ProtectedAdminRoute from \"./Components/ProtectedAdminRoute\";\n\nfunction App() {\n\tconst dispatch = useDispatch();\n\tconst token = localStorage.getItem(\"token\");\n\tconst [isLogin, setLogin] = useState(token ? true : false);\n\n\tif (token) {\n\t\ttry {\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\tdispatch(setUser(decoded.id, decoded.role));\n\t\t} catch (e) {\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\tsetLogin(false);\n\t\t}\n\t}\n\n\treturn isLogin ? (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<AppBar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<ProtectedStaffAccountRoute\n\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\texact\n\t\t\t\t\t\tcomponent={PendingSample}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedStaffAccountRoute\n\t\t\t\t\t\tpath=\"/addCustomer\"\n\t\t\t\t\t\tcomponent={AddCustomer}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedInventoryMRoute path=\"/addReagent\" component={AddReagent} />\n\t\t\t\t\t<ProtectedInventoryMRoute\n\t\t\t\t\t\tpath=\"/addEquipment\"\n\t\t\t\t\t\tcomponent={AddEquipment}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedInventoryMRoute\n\t\t\t\t\t\tpath=\"/handleEquipment\"\n\t\t\t\t\t\tcomponent={HandleEquipment}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedStaffRoute path=\"/addTest\" component={AddTest} />\n\t\t\t\t\t<ProtectedInventoryMRoute\n\t\t\t\t\t\tpath=\"/importReagent\"\n\t\t\t\t\t\tcomponent={ImportReagent}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedStaffAccountRoute path=\"/allSample\" component={AllSample} />\n\t\t\t\t\t<ProtectedInventoryStaff path=\"/allReagent\" component={AllReagent} />\n\t\t\t\t\t<ProtectedInventoryStaff\n\t\t\t\t\t\tpath=\"/allEquipment\"\n\t\t\t\t\t\tcomponent={AllEquipment}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedStaffRoute path=\"/allTest\" component={AllTest} />\n\t\t\t\t\t<ProtectedStaffRoute path=\"/addAnimal\" component={AddAnimal} />\n\t\t\t\t\t<ProtectedStaffRoute path=\"/addSample\" component={AddSample} />\n\t\t\t\t\t<ProtectedAdminRoute path=\"/register\" exact component={Register} />\n\t\t\t\t\t<ProtectedStaffRoute\n\t\t\t\t\t\tpath=\"/generateReport\"\n\t\t\t\t\t\texact\n\t\t\t\t\t\tcomponent={GenerateReport}\n\t\t\t\t\t/>\n\t\t\t\t\t<ProtectedStaffRoute path=\"/report\" exact component={Report} />\n\t\t\t\t\t<ProtectedStaffRoute path=\"/editTest\" exact component={EditTest} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t) : (\n\t\t<Login isLogin={isLogin} setLogin={setLogin} />\n\t);\n}\n\nexport default App;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/index.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/appBar.js",["153"],"import React from \"react\";\nimport {\n\tmakeStyles,\n\tMenuItem,\n\tDrawer,\n\tAppBar,\n\tToolbar,\n\tCssBaseline,\n\tTypography,\n\tDivider,\n\tIconButton,\n\tContainer,\n\tButton,\n} from \"@material-ui/core\";\nimport CollectionsBookmarkIcon from \"@material-ui/icons/CollectionsBookmark\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport HourglassEmptyIcon from \"@material-ui/icons/HourglassEmpty\";\nimport PersonAddRoundedIcon from \"@material-ui/icons/PersonAddRounded\";\nimport PostAddRoundedIcon from \"@material-ui/icons/PostAddRounded\";\nimport AllInboxRoundedIcon from \"@material-ui/icons/AllInboxRounded\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport { Redirect } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst drawerWidth = 290;\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t},\n\n\tmenuButton: {\n\t\tmarginRight: 36,\n\t},\n\thide: {\n\t\tdisplay: \"none\",\n\t},\n\tdrawer: {\n\t\twidth: drawerWidth,\n\t\tflexShrink: 0,\n\t\twhiteSpace: \"nowrap\",\n\t},\n\ticonSpacing: {\n\t\tdisplay: \"flex\",\n\t\tmarginLeft: theme.spacing(3),\n\t},\n\tbackButton: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t},\n\tparagraph: {\n\t\tfontSize: 18,\n\t\tmarginLeft: \"5px\",\n\t},\n\tcontainer: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"flex-end\",\n\t},\n\ttitle: {\n\t\twidth: \"700%\",\n\t},\n\tlims: {},\n}));\n\nexport default function Apppbar(props) {\n\tconst classes = useStyles();\n\tconst [open, setOpen] = React.useState(false);\n\tconst state = useSelector((state) => state.auth);\n\tconst handleDrawer = () => {\n\t\tsetOpen(!open);\n\t};\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<style>{`@media print {.no-print{display: none;}}`}</style>\n\t\t\t<div className={(classes.root, \"no-print\")}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<AppBar className={classes.appbar}>\n\t\t\t\t\t<Toolbar className={classes.toolbar}>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tcolor=\"inherit\"\n\t\t\t\t\t\t\tsize=\"medium\"\n\t\t\t\t\t\t\tedge=\"start\"\n\t\t\t\t\t\t\tonClick={handleDrawer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<Container className={classes.title}>\n\t\t\t\t\t\t\t<Typography align=\"center\" className={classes.lims}>\n\t\t\t\t\t\t\t\tLABORATORY INFORMATION MANAGEMENT SYSTEM\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t\t<Container className={classes.container}>\n\t\t\t\t\t\t\t<Typography>\n\t\t\t\t\t\t\t\t<IconButton color=\"inherit\" size=\"medium\">\n\t\t\t\t\t\t\t\t\t<AccountCircleIcon />\n\t\t\t\t\t\t\t\t\t<p className={classes.paragraph}> {state[0].role}</p>\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\tstyle={{ margin: \"20px 4px 20px 4px\" }}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\t\t\t\t\t\t\twindow.location.assign(\"/login\");\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLogout\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<Drawer\n\t\t\t\t\tvariant=\"persistent\"\n\t\t\t\t\tclassName={classes.root}\n\t\t\t\t\topen={open}\n\t\t\t\t\tclasses={{ paper: classes.drawer }}\n\t\t\t\t>\n\t\t\t\t\t<MenuItem onClick={handleDrawer}>\n\t\t\t\t\t\t<Container className={classes.backButton}>\n\t\t\t\t\t\t\t<ArrowBackIosIcon />\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<MenuItem>\n\t\t\t\t\t\t<CollectionsBookmarkIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>Test</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/\"}>\n\t\t\t\t\t\t<HourglassEmptyIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tPending Sample\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/addCustomer\"}>\n\t\t\t\t\t\t<PersonAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tAdd Customer\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/addSample\"}>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>Add Sample </Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/addTest\"}>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>Add Test </Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/addAnimal\"}>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>Add Animals</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/allTest\"}>\n\t\t\t\t\t\t<AllInboxRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>All Test </Typography>\n\t\t\t\t\t</MenuItem>\n\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/allSample\"}>\n\t\t\t\t\t\t<AllInboxRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>All sample </Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t{/* Inventory Management */}\n\t\t\t\t\t<MenuItem>\n\t\t\t\t\t\t<CollectionsBookmarkIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tInventory Management\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/allReagent\"}>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tAll Reagent{\" \"}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/addReagent\"}>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>Add Reagent</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tonClick={handleDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto={\"/importReagent\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tImport Reagent{\" \"}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t{/* Equipment Management */}\n\t\t\t\t\t<MenuItem>\n\t\t\t\t\t\t<CollectionsBookmarkIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tEquipment Management\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tonClick={handleDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto={\"/allEquipment\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tAll Equipment{\" \"}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tonClick={handleDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto={\"/addEquipment\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tAdd Equipment{\" \"}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tonClick={handleDrawer}\n\t\t\t\t\t\tcomponent={Link}\n\t\t\t\t\t\tto={\"/handleEquipment\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t<PostAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tHandle Equipment{\" \"}\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<Divider />\n\t\t\t\t\t<MenuItem onClick={handleDrawer} component={Link} to={\"/register\"}>\n\t\t\t\t\t\t<PersonAddRoundedIcon />\n\t\t\t\t\t\t<Typography className={classes.iconSpacing}>\n\t\t\t\t\t\t\tRegister Staff\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</MenuItem>\n\t\t\t\t</Drawer>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddCutomer.js",["154","155","156","157"],"import React, { forwardRef } from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tSelect,\n\tInputLabel,\n\tButton,\n\tFormControl,\n\tTextField,\n\tMenuItem,\n} from \"@material-ui/core\";\nimport { addCustomerValidation } from \"../validation/validator\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable, { MTableHeader } from \"material-table\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tmarginBottom: theme.spacing(7),\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: \"1 auto\",\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmargin: \"5px 10px 5px 5px\",\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n}));\n\nconst columns = [\n\t{ title: \"First Name\", field: \"firstName\" },\n\t{\n\t\ttitle: \"Last Name\",\n\t\tfield: \"lastName\",\n\t},\n\t{ title: \"Age\", field: \"age\" },\n\t{ title: \"Address\", field: \"address\" },\n\t{\n\t\ttitle: \"Gender\",\n\t\tfield: \"gender\",\n\t\tlookup: { male: \"male\", female: \"female\", others: \"others\" },\n\t},\n];\nconst AddCutomer = () => {\n\tconst classes = useStyles();\n\tconst [addCustomer, setAddCustomer] = React.useState({\n\t\tfirstName: \"\",\n\t\tlastName: \"\",\n\t\tage: \"\",\n\t\taddress: \"\",\n\t\tgender: \"\",\n\t\tcontactNumber: \"\",\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, addCustomer));\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [query, setQuery] = React.useState(\"\");\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/customer/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddCustomer({ ...addCustomer, [input]: event.target.value });\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetAddCustomer({ ...reset });\n\t};\n\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addCustomerValidation(addCustomer);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(\"/customer/add\", addCustomer);\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tpadding: \"1em 2em 2em 2em\",\n\t\t\t\t\t\tmargin: \"8em 2em 2em 2em\",\n\t\t\t\t\t\t// opacity: \"50%\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<h1 align=\"center\">Customer Registration Page</h1>\n\t\t\t\t\t<h4>Customer Details</h4>\n\t\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tname=\"First Name\"\n\t\t\t\t\t\t\tlabel=\"First Name\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.firstName}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"firstName\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Last Name\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.lastName}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"lastName\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Age\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.age}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tonChange={handleChange(\"age\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t\t\t<InputLabel className={classes.label}>Gender</InputLabel>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tlabelId=\"demo-controlled-open-select-label\"\n\t\t\t\t\t\t\t\tid=\"demo-controlled-open-select\"\n\t\t\t\t\t\t\t\tvalue={addCustomer.gender}\n\t\t\t\t\t\t\t\tlabel=\"Gender\"\n\t\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\t\tstyle={{ width: 120 }}\n\t\t\t\t\t\t\t\tonChange={handleChange(\"gender\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MenuItem value=\"male\">Male</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value=\"female\">Female</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value=\"others\">Others</MenuItem>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Location\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.address}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"address\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Contact Number\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.contactNumber}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tonChange={handleChange(\"contactNumber\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className={classes.buttons}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tstyle={{ width: \"200px\", paddingLeft: \"20px\" }}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tstyle={{ width: \"200px\", paddingRight: \"20px\" }}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tonClick={handleReset}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={Styles.table}>\n\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\ttitle=\"Customers\"\n\t\t\t\t\t\t\tdata={rows}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t\t\theaderStyle: { background: \"transparent\" },\n\t\t\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t\t\t`/customer/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t`/customer/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tlocalization={{\n\t\t\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\t\t\tsearchPlaceholder: \"Search Customer\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tisLoading={loading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\nconst Styles = {\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginButton: \"20%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n};\n\nexport default AddCutomer;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ImportReagent.js",["158","159"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { importReagentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nconst styles = makeStyles({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tmargin: \"30\",\n\t\tpadding: \"5\",\n\t},\n\tinput: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tjustifyContent: \"space-around\",\n\t},\n\titems: {\n\t\theight: \"80%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"2rem\",\n\t},\n\tspace: {\n\t\tmarginTop: \"2rem\",\n\t},\n});\n\nconst ImportReagent = () => {\n\tconst classes = styles();\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [volume, setVolume] = useState(0);\n\tconst [unit, setUnit] = useState(\"Select Reagent\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetUnit(\"Select Reagent\");\n\t\tsetVolume(0);\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = importReagentValidator({\n\t\t\treagentName: value,\n\t\t\tvolume: volume,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axiosi.put(`/reagent/import/${value._id}`, {\n\t\t\t\t\tvolume: volume,\n\t\t\t\t});\n\t\t\t\tsetMessage(data);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\t// const handleChange = (event) => {\n\t//     setRole(event.target.value);\n\t//   };\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{ height: \"100vh\" }}>\n\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t<div className={classes.input}>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\t\t\tsetUnit(newValue.unit);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetUnit(\"Select Reagent\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tlabel=\"Reagent Name\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\t\t\t// defaultValue=\"Select Reagent\"\n\t\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={(event) => setVolume(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImportReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PendingSample.js",["160","161","162","163"],"import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport axios from \"../api\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n}));\n\nconst columns = [\n\t{ id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\n\t{\n\t\tid: \"customerName\",\n\t\tlabel: \"Customer Name\",\n\t},\n\t{ id: \"testName\", label: \"Test Name\", minWidth: 100 },\n\t{\n\t\tid: \"dueDate\",\n\t\tlabel: \"Due Date\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{\n\t\tid: \"paymentStatus\",\n\t\tlabel: \"Payment\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toLocaleString('en-US'),\n\t},\n\t{\n\t\tid: \"collectedBy\",\n\t\tlabel: \"Collected By\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toFixed(2),\n\t},\n\t{\n\t\tid: \"status\",\n\t\tlabel: \"Status\",\n\t\tminWidth: 100,\n\t\tformat: (value) =>\n\t\t\tvalue ? (\n\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t) : (\n\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t),\n\t},\n\t{\n\t\tid: \"action\",\n\t\tlabel: \"\",\n\t\tformat: () => (\n\t\t\t<Button variant=\"contained\" color=\"primary\">\n\t\t\t\tGenerate Report\n\t\t\t</Button>\n\t\t),\n\t\t// align: 'right',\n\t\t// format: (value) => value.toFixed(2),\n\t},\n];\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: \"7%\",\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n});\n\nexport default function PendingSample(props) {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n\tconst token = localStorage.getItem(\"token\");\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axios.get(\"/sample/paginate\", {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axios.get(\"/sample/paginate\", {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<TableContainer className={classes.container}>\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableRow>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{rows\n\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\tif (column.id === \"action\") {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.history.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathname: \"/generateReport\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate: row,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReagent.js",["164","165","166","167","168"],"import React, { useState, forwardRef } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { TextField, Button, CssBaseline } from \"@material-ui/core\";\nimport axios from \"../api\";\nimport { addReagentValidator } from \"../validation/validator.js\";\nimport SnackBar from \"./SnackBar\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst columns = [\n\t{ title: \"Reagent\", field: \"reagentName\" },\n\t{\n\t\ttitle: \"Unit\",\n\t\tfield: \"unit\",\n\t},\n\t{ title: \"In Stock\", field: \"volume\", type: \"numeric\" },\n];\nconst AddReagent = () => {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [reagent, setReagent] = React.useState({\n\t\treagentName: \"\",\n\t\tunit: \"\",\n\t\tvolume: \"\",\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, reagent));\n\tconst [query, setQuery] = React.useState(\"\");\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/reagent/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetReagent({ ...reset });\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetReagent({ ...reagent, [input]: event.target.value });\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addReagentValidator(reagent);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(\"/reagent/add\", { ...reagent });\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tconsole.log(rows);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e.response);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\treturn (\n\t\t<CssBaseline>\n\t\t\t<div style={Styles.inputfiled}>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tid=\"reagentName\"\n\t\t\t\t\tlabel=\"Name Of Reagent\"\n\t\t\t\t\ttype=\"string\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tvalue={reagent.reagentName}\n\t\t\t\t\tonChange={handleChange(\"reagentName\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Unit Of Reagent\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={reagent.unit}\n\t\t\t\t\tonChange={handleChange(\"unit\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={reagent.volume}\n\t\t\t\t\tonChange={handleChange(\"volume\")}\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\tstyle={Styles.button}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div style={Styles.table}>\n\t\t\t\t<MaterialTable\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\ttoolbar: (props) => (\n\t\t\t\t\t\t\t<div style={{ background: \"transparent\" }}>\n\t\t\t\t\t\t\t\t<MTableToolbar {...props} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t),\n\t\t\t\t\t}}\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\ttitle=\"Reagents\"\n\t\t\t\t\tdata={rows}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t}}\n\t\t\t\t\teditable={{\n\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t`/reagent/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t`/reagent/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t}}\n\t\t\t\t\tlocalization={{\n\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\tsearchPlaceholder: \"Search Reagent\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tisLoading={loading}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</CssBaseline>\n\t);\n};\n\nconst Styles = {\n\tinputfiled: {\n\t\tmarginTop: \"6%\",\n\t\tmarginLeft: \"5%\",\n\t\tdisplay: \"flex\",\n\t},\n\tinputfileds: {\n\t\tmarginTop: \"3%\",\n\t\tmarginLeft: \"3%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"3%\",\n\t\tmarginLeft: \"5%\",\n\t\theight: 50,\n\t},\n\ttables: {\n\t\theight: \"380px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginButton: \"20%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n};\n\nexport default AddReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddTest.js",["169"],"import React from 'react';\nimport './myStyle.css';\nimport { makeStyles, Button, TextField, Chip } from '@material-ui/core';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport {\n\taddTestValidator,\n\taddParameterValidator,\n} from '../validation/validator';\nimport axios from '../api';\nimport SnackBar from './SnackBar';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\tbody: {\n\t\tpadding: '1em 2em 2em 2em',\n\t\t// margin: \"4em 2em 2em 2em\",\n\t\tmarginTop: '7%',\n\t\tmarginRight: '2em',\n\t\tmarginLeft: '2em',\n\t},\n\troot: {\n\t\tdisplay: 'flex',\n\t\tmarginTop: '1em',\n\t\tmarginBottom: '2em',\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: '1 auto',\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmarginLeft: theme.spacing(6),\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t},\n\ttable: {\n\t\tmarginTop: '7%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n\tsaveButton: {\n\t\tmarginLeft: '90%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t\tbackground: '#28B463',\n\t\tcolor: 'white',\n\t},\n}));\n\nconst AddTest = () => {\n\tconst classes = useStyles();\n\tconst [addTest, setAddTest] = React.useState({\n\t\ttestName: '',\n\t\ttestAmount: '',\n\t});\n\tconst [addParameter, setAddparameter] = React.useState({\n\t\tparameters: '',\n\t\tunits: '',\n\t\treferenceRange: '',\n\t});\n\tconst [parameter, setParameter] = React.useState([]);\n\n\tconst [columns, setColumns] = React.useState([\n\t\t{ title: 'Parameters', field: 'parameters' },\n\t\t{ title: 'Units', field: 'units' },\n\t\t{ title: 'Reference Range', field: 'referenceRange' },\n\t]);\n\tconst [message, setMessage] = React.useState();\n\tconst [status, setStatus] = React.useState();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddTest({ ...addTest, [input]: event.target.value });\n\t};\n\n\tconst handleParameters = (input) => (event) => {\n\t\tsetAddparameter({ ...addParameter, [input]: event.target.value });\n\t};\n\n\tconst handleAdd = () => {\n\t\tconst testError = addTestValidator(addTest);\n\t\tconst parameterError = addParameterValidator(addParameter);\n\t\tif (testError.error) {\n\t\t\tsetMessage(testError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (parameterError.error) {\n\t\t\tsetMessage(parameterError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!testError.error && !parameterError.error) {\n\t\t\tsetParameter([...parameter, addParameter]);\n\t\t\tsetAddparameter({ parameters: '', units: '', referenceRange: '' });\n\t\t}\n\t};\n\n\tconst handleSave = async () => {\n\t\ttry {\n\t\t\tconst test = {\n\t\t\t\tname: addTest.testName,\n\t\t\t\tamount: addTest.testAmount,\n\t\t\t\tparameter: parameter,\n\t\t\t};\n\t\t\tconsole.log(test);\n\t\t\tconst res = await axios.post('/test/add', test);\n\t\t\tconsole.log(res.data);\n\t\t\tsetMessage(res.data);\n\t\t\tsetStatus('success');\n\t\t\thandleClick();\n\t\t\tsetAddTest({\n\t\t\t\ttestName: '',\n\t\t\t\ttestAmount: '',\n\t\t\t});\n\t\t\tsetParameter([]);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.Error);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.body}>\n\t\t\t<React.Fragment>\n\t\t\t\t<h4>Test Details</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addTest.testName}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange('testName')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Test Amount\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addTest.testAmount}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonChange={handleChange('testAmount')}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<h4>Bio-Chemical Parameters</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Parameter\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.parameters}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('parameters')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"unit\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.units}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('units')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Reference Range\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.referenceRange}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('referenceRange')}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={handleAdd}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.table}>\n\t\t\t\t\t{parameter.length ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\t\ttitle=\"Add tests\"\n\t\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\tdata={parameter}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\t\tToolbar: (props) => (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<MTableToolbar {...props} />\n\t\t\t\t\t\t\t\t\t\t\t<div style={{ padding: '0px 10px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={addTest.testName}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 50 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Test Amount\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={addTest.testAmount}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconst name = oldData.parameters;\n\t\t\t\t\t\t\t\t\t\t\t\tconst filterdParameter = parameter.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(item) => item.parameters !== name\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tsetParameter([...filterdParameter]);\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tsave\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t</div>\n\t);\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllSample.js",["170","171","172","173","174","175","176","177","178"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n\tTextField,\n\tmakeStyles,\n\tuseTheme,\n\tButton,\n\tTableContainer,\n\tTable,\n\tTableHead,\n\tTableRow,\n\tTableCell,\n\tTableBody,\n\tChip,\n\tIconButton,\n\tTablePagination,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport { Link } from \"react-router-dom\";\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t\tmarginBottom: \"2%\",\n\t\tmarginRight: \"3%\",\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t},\n\titems: {\n\t\tflex: \"1 1 1 1 auto\",\n\t\twidth: \"20em\",\n\t},\n\tbutton: {\n\t\tmargin: \"13px 12px 12px 10px\",\n\t\tbackgroundColor: \"#27E208\",\n\t},\n\ttables: {\n\t\theight: \"500px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginLeft: \"3%\",\n\t},\n});\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n}));\n\nconst columns = [\n\t{ id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\n\t{\n\t\tid: \"customerName\",\n\t\tlabel: \"Customer Name\",\n\t},\n\t{ id: \"testName\", label: \"Test Name\", minWidth: 100 },\n\t{\n\t\tid: \"created_at\",\n\t\tlabel: \"Created At\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{\n\t\tid: \"dueDate\",\n\t\tlabel: \"Due Date\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{\n\t\tid: \"paymentStatus\",\n\t\tlabel: \"Payment\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toLocaleString('en-US'),\n\t},\n\t{\n\t\tid: \"collectedBy\",\n\t\tlabel: \"Collected By\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toFixed(2),\n\t},\n\t{\n\t\tid: \"status\",\n\t\tlabel: \"Status\",\n\t\tminWidth: 100,\n\t\tformat: (value) =>\n\t\t\tvalue ? (\n\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t) : (\n\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t),\n\t},\n\t{ id: \"Action\", label: \"Report\", minWidth: 100 },\n];\n\nconst AllSample = (props) => {\n\tconst classes = styles();\n\tconst [sampleFields, setSampleFields] = React.useState({\n\t\tdate: \"\",\n\t\tsampleId: \"\",\n\t});\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = React.useState({});\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [customer, setCustomer] = React.useState({\n\t\t_id: \"\",\n\t});\n\tlet cancelToken = useRef(\"\");\n\n\tReact.useEffect(() => {\n\t\thandleFirstload();\n\t}, [rowsPerPage]);\n\n\tReact.useEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleFirstload = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: page,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tsetTotal(data.total);\n\t\t\tconsole.log(\"data\");\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/customer/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangeInput = (input) => (event) => {\n\t\tsetSampleFields({ ...sampleFields, [input]: event.target.value });\n\t};\n\n\tconst handleSearch = async () => {\n\t\tconsole.log(customer._id);\n\t\ttry {\n\t\t\tlet { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: 0,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetTotal(data.total);\n\t\t\tsetPage(0);\n\t\t\tsetRows([...data.rows]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst openReport = (row) => {\n\t\tprops.history.push({ pathname: \"/generateReport\", state: row });\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tpage: page + 1,\n\t\t\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.firstName + \" \" + option.lastName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tnewValue\n\t\t\t\t\t\t\t? setCustomer({ _id: newValue._id })\n\t\t\t\t\t\t\t: setCustomer({ _id: \"\" });\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Customer Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"Date\"\n\t\t\t\t\tvalue={sampleFields.date}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"date\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"SampleId\"\n\t\t\t\t\tlabel=\"Sample Id\"\n\t\t\t\t\tvalue={sampleFields.sampleId}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"sampleId\")}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonClick={handleSearch}\n\t\t\t\t>\n\t\t\t\t\t<SearchIcon />\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer className={classes.tables}>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((item) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\talign={item.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: item.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows\n\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (column.id != \"Action\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => openReport(row)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t\t<TablePagination\n\t\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\tcount={total}\n\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\tpage={page}\n\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default AllSample;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllReagent.js",["179","180","181","182","183","184"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, Chip } from \"@material-ui/core\";\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n\n\tcontainer: {\n\t\tmarginTop: \"20%\",\n\t},\n}));\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: \"7%\",\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t},\n\ttable: { marginTop: \"1%\" },\n});\n\nexport default function AllReagent() {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [value, setValue] = React.useState(\"\");\n\tconst [options, setOptions] = React.useState([]);\n\tconst [columns, setColumns] = React.useState([\n\t\t{ id: \"reagentName\", label: \"Reagent Name\", minWidth: 170 },\n\t\t{\n\t\t\tid: \"unit\",\n\t\t\tlabel: \"Unit\",\n\t\t},\n\t\t{\n\t\t\tid: \"volume\",\n\t\t\tlabel: \"Volume\",\n\t\t\tminWidth: 100,\n\t\t\tformat: (value) => {\n\t\t\t\treturn value > 20 ? (\n\t\t\t\t\t<Chip label={value} color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip label={value} color=\"secondary\" style={{ marginRight: 5 }} />\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t]);\n\tlet cancelToken = useRef(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/reagent\", {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/reagent\", {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\thadleFirstLoad();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetTotal(1);\n\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\tsetRows([newValue]);\n\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Reagent Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.length\n\t\t\t\t\t\t\t\t? rows\n\t\t\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/GenerateReport.js",["185","186","187","188","189","190","191"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button, Chip } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { importReagentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nimport MaterialTable from \"material-table\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tmarginBottom: theme.spacing(5),\n\t\tmarginTop: theme.spacing(6),\n\t\tjustifyContent: \"space-between\",\n\t\tmarginleft: theme.spacing(6),\n\t\twidth: \"70%\",\n\t},\n\tposition: {\n\t\t// marginLeft: theme.spacing(4),\n\t\tflex: \"1 1 1 auto\",\n\t\twidth: \"80%\",\n\t\tmarginRight: theme.spacing(4),\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmargin: \"5px 10px 5px 5px\",\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n\tsaveButton: {\n\t\tmarginLeft: \"3%\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t\tbackground: \"#28B463\",\n\t\tcolor: \"white\",\n\t},\n}));\n\nconst columns = [\n\t{ title: \"Reagent Name\", field: \"reagentName\" },\n\t{ title: \"Unit\", field: \"unit\" },\n\t{ title: \"Volume\", field: \"volume\" },\n];\n\nconst GenerateReport = (props) => {\n\tconst classes = useStyles();\n\tconst data = props.location.state;\n\tconst [customerDetails, SetCustomerDetails] = React.useState({\n\t\tname: data ? data.customerName : \"\",\n\t\ttest: data ? data.testName : \"\",\n\t\tsample: data ? data.sampleNo : \"\",\n\t\tsampleId: data ? data._id : \"\",\n\t});\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [volume, setVolume] = useState(0);\n\tconst [unit, setUnit] = useState(\"Select Reagent\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [tableData, setTableData] = React.useState([]);\n\n\tuseEffect(() => {\n\t\tfetchUsedReagent();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetUnit(\"Select Reagent\");\n\t\tsetVolume(0);\n\t};\n\n\tconst fetchUsedReagent = async () => {\n\t\ttry {\n\t\t\tconst usedReagents = await axiosi.get(\n\t\t\t\t`/usedReagent/find/${customerDetails.sampleId}`,\n\t\t\t);\n\t\t\tsetTableData([...usedReagents.data]);\n\t\t\tconsole.log(usedReagents);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleAdd = async () => {\n\t\tconst { error } = importReagentValidator({\n\t\t\treagentName: value,\n\t\t\tvolume: volume,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\tif (volume <= value.volume) {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axiosi.post(\"/usedReagent/add\", {\n\t\t\t\t\t\treagentName: value.reagentName,\n\t\t\t\t\t\tunit: unit,\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t\tsampleNo: customerDetails.sample,\n\t\t\t\t\t\tsampleId: customerDetails.sampleId,\n\t\t\t\t\t\treagentId: value._id,\n\t\t\t\t\t});\n\t\t\t\t\tconst respose = await axiosi.put(`/reagent/use/${value._id}`, {\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t});\n\t\t\t\t\tsetTableData([...tableData, { ...res.data.reagent }]);\n\t\t\t\t\thandleReset();\n\t\t\t\t\tsetMessage(\"Reagent exported Sucessfully\");\n\t\t\t\t\tsetStatus(\"success\");\n\t\t\t\t\thandleClick();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\tsetStatus(\"error\");\n\t\t\t\t\thandleClick();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetMessage(\"Insufficiant Volume\");\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleOpenReport = () => {\n\t\tprops.history.push({ pathname: \"/report\", state: data });\n\t};\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: \"1em 2em 2em 2em\",\n\t\t\t\t\tmargin: \"8em 2em 2em 2em\",\n\t\t\t\t\t// height: \"100em\",\n\t\t\t\t}}\n\t\t\t\t// elevation={3}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"Customer Name\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={customerDetails.name}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: \"20em\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip label=\"Test Name\" color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={customerDetails.test}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: \"20em\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip label=\"Sample No\" color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={customerDetails.sample}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\tsetUnit(newValue.unit);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetUnit(\"Select Reagent\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tlabel=\"Reagent Name\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tonChange={(event) => setVolume(event.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={handleAdd}\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{tableData.length ? (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\t\ttitle=\"Reagent Used\"\n\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\t\tdata={tableData}\n\t\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(oldData._id);\n\t\t\t\t\t\t\t\t\t\t\t\tlet { volume, reagentId } = oldData;\n\t\t\t\t\t\t\t\t\t\t\t\tconst del = await axiosi.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`/usedReagent/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tconst inc = await axiosi.put(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`/reagent/import/${reagentId}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvolume,\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...tableData];\n\t\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\t\tsetTableData([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\t\tsetMessage(\"Used Reagent Deleted Sucessfully\");\n\t\t\t\t\t\t\t\t\t\t\t\tsetStatus(\"success\");\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick();\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\t\t\t\t\t\t\t\tsetStatus(\"error\");\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick();\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\t\t\t\tonClick={handleOpenReport}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default GenerateReport;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/report.js",["192","193","194","195","196","197","198","199"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tButton,\n\tTypography,\n\tTextareaAutosize,\n\tCheckbox,\n\tFormControlLabel,\n} from \"@material-ui/core\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\nimport MaterialTable from \"material-table\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\ttextArea: {\n\t\tmarginTop: theme.spacing(5),\n\t\twidth: \"100%\",\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tcheckbox: {\n\t\tmarginLeft: \"85%\",\n\t},\n\tbutton: {\n\t\tmargin: \"5px 10px 5px 5px\",\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n\tsaveButton: {\n\t\tmarginLeft: \"3%\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t\tbackground: \"#28B463\",\n\t\tcolor: \"white\",\n\t},\n\tbackButton: {\n\t\tmarginLeft: \"3%\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t},\n\tprintButton: {\n\t\tmarginLeft: \"50em\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t},\n\tTypo: {\n\t\tmarginRight: \"5\",\n\t\tmarginBottom: \"5\",\n\t},\n\tpaper: {\n\t\tpadding: \"1em 2em 2em 2em\",\n\t\tmargin: \"8em 2em 2em 2em\",\n\t\theight: \"95em\",\n\t},\n\tparent: {\n\t\tposition: \"relative\",\n\t\twidth: \"100%\",\n\t\theight: \"100px\",\n\t},\n\tcenter: {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\twidth: \"200px\",\n\t\tright: \"40%\",\n\t},\n\tlast: {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\twidth: \"200px\",\n\t\tright: theme.spacing(0),\n\t},\n}));\n\nconst columns = [\n\t{ title: \"Parameter\", field: \"parameters\", editable: \"never\" },\n\t{ title: \"Unit\", field: \"units\", editable: \"never\" },\n\t{ title: \"Reference Range\", field: \"referenceRange\", editable: \"never\" },\n\t{ title: \"Value\", field: \"value\" },\n\t{ title: \"Remarks\", field: \"remarks\" },\n];\n\nconst Report = (props) => {\n\tconst classes = useStyles();\n\tconst info = props.location.state;\n\tconsole.log(props.location);\n\tconst [customerDetails, setCustomerDetails] = React.useState({});\n\tconst [sampleDetails, setSampleDetails] = React.useState({\n\t\tname: info ? info.customerName : \"\",\n\t\ttest: info ? info.testName : \"\",\n\t\tsample: info ? info.sampleNo : \"\",\n\t\tsampleId: info ? info._id : \"\",\n\t});\n\tconst [date, setDate] = React.useState(new Date());\n\tconst [report, setReport] = React.useState([]);\n\tconst [Remarks, setRemarks] = React.useState(\"Remarks::\");\n\tconst [testCompleted, setTestCompleted] = React.useState(\n\t\tinfo ? info.status : false,\n\t);\n\tconst [reportId, setReportId] = React.useState(\"\");\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\n\tuseEffect(() => {\n\t\tfetchCustomerDetails();\n\t\tfetchTestDetails();\n\t\tfetchReport();\n\t}, []);\n\n\tconst ReportFields = (parameters) => {\n\t\tsetReport(\n\t\t\tparameters.map((item) => ({\n\t\t\t\t...item,\n\t\t\t\tvalue: \"Set Value\",\n\t\t\t\tremarks: \"Set Remarks\",\n\t\t\t})),\n\t\t);\n\t};\n\n\tconst fetchCustomerDetails = async () => {\n\t\ttry {\n\t\t\tconst cusInfo = await axios.get(`/customer/${info.customerId}`);\n\t\t\tsetCustomerDetails(cusInfo.data);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchTestDetails = async () => {\n\t\ttry {\n\t\t\tconst testInfo = await axios.get(`/test/search/${sampleDetails.test}`);\n\t\t\tReportFields([...testInfo.data[0].parameter]);\n\t\t\t// setParameters([...testInfo.data[0].parameter]);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchReport = async () => {\n\t\ttry {\n\t\t\tconst result = await axios.get(\n\t\t\t\t`/result/sample/${sampleDetails.sampleId}`,\n\t\t\t);\n\t\t\tconsole.log(result);\n\t\t\tsetReport([...result.data[0].result]);\n\t\t\tsetRemarks(result.data[0].Remarks);\n\t\t\tsetReportId(result.data[0]._id);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleSave = async () => {\n\t\tif (reportId) {\n\t\t\ttry {\n\t\t\t\tconst saveReport = await axios.put(`/result/update/${reportId}`, {\n\t\t\t\t\tresult: report,\n\t\t\t\t\tsampleId: sampleDetails.sampleId,\n\t\t\t\t\tRemarks,\n\t\t\t\t});\n\t\t\t\tsetMessage(\"Report Saved successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst saveReport = await axios.post(\"/result/add\", {\n\t\t\t\t\tresult: report,\n\t\t\t\t\tsampleId: sampleDetails.sampleId,\n\t\t\t\t\tRemarks,\n\t\t\t\t});\n\t\t\t\tsetMessage(\"Report Saved successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleTestStatus = async (event) => {\n\t\tsetTestCompleted(event.target.checked);\n\t\ttry {\n\t\t\tconst status = await axios.put(\n\t\t\t\t`/sample/update/${sampleDetails.sampleId}`,\n\t\t\t\t{\n\t\t\t\t\tstatus: event.target.checked,\n\t\t\t\t},\n\t\t\t);\n\t\t\tsetMessage(\"Test Completed Sucessfully\");\n\t\t\tsetStatus(\"success\");\n\t\t\thandleClick();\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleBack = () => {\n\t\tprops.history.push({ pathname: \"/generateReport\", state: info });\n\t};\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<div className={classes.paper}>\n\t\t\t<style>{`@media print {.no-print{display: none;}}`}</style>\n\t\t\t<div className={classes.parent}>\n\t\t\t\t<div>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tCustomer Name : {sampleDetails.name}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tAge: {customerDetails.age}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.center}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tLocation: {customerDetails.address}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tSample No: {sampleDetails.sample}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.last}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tDate: {date.toLocaleDateString()}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tTest Name: {sampleDetails.test}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={\"no-print\"}>\n\t\t\t\t<FormControlLabel\n\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\tcontrol={\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={testCompleted}\n\t\t\t\t\t\t\tonChange={handleTestStatus}\n\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tlabel=\"Test Completed\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<MaterialTable\n\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\ttitle=\"Report Card\"\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\tdata={report}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t}}\n\t\t\t\t\tcellEditable={{\n\t\t\t\t\t\tonCellEditApproved: (newValue, oldValue, rowData, columnDef) => {\n\t\t\t\t\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst copy = [...report];\n\t\t\t\t\t\t\t\t\tcopy[rowData.tableData.id][columnDef.field] = newValue;\n\t\t\t\t\t\t\t\t\tsetReport([...copy]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<TextareaAutosize\n\t\t\t\t\tclassName={classes.textArea}\n\t\t\t\t\taria-label=\"minimum height\"\n\t\t\t\t\trowsMin={3}\n\t\t\t\t\tplaceholder=\"Remarks::\"\n\t\t\t\t\tvalue={Remarks}\n\t\t\t\t\tonChange={(event) => setRemarks(event.target.value)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"no-print\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.backButton}\n\t\t\t\t\tonClick={handleBack}\n\t\t\t\t>\n\t\t\t\t\tBack\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\tonClick={handleSave}\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t{testCompleted ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.printButton}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\twindow.print();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tPrint\n\t\t\t\t\t</Button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<SnackBar\n\t\t\t\t\tmessege={message}\n\t\t\t\t\topen={open}\n\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\tstatus={status}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Report;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/EditTest.js",["200"],"import React from \"react\";\nimport \"./myStyle.css\";\nimport { makeStyles, Button, TextField, Chip } from \"@material-ui/core\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport {\n  addTestValidator,\n  addParameterValidator,\n} from \"../validation/validator\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"1em 2em 2em 2em\",\n    margin: \"4em 2em 2em 2em\",\n  },\n  root: {\n    display: \"flex\",\n  },\n  position: {\n    marginLeft: theme.spacing(8),\n    flex: \"1 auto\",\n  },\n  buttons: {\n    marginTop: theme.spacing(6),\n    marginLeft: theme.spacing(120),\n  },\n  button: {\n    marginLeft: theme.spacing(6),\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n  },\n  table: {\n    marginTop: \"7%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n  saveButton: {\n    marginLeft: \"90%\",\n    marginTop: \"5%\",\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n    background: \"#28B463\",\n    color: \"white\",\n  },\n}));\n\nconst AddTest = (props) => {\n  const { location } = props;\n  const classes = useStyles();\n  const [addTest, setAddTest] = React.useState({\n    testName: location.state ? location.state.name : \"\",\n    testAmount: location.state ? location.state.amount : \"\",\n  });\n  const [addParameter, setAddparameter] = React.useState({\n    parameters: \"\",\n    units: \"\",\n    referenceRange: \"\",\n  });\n  const [parameter, setParameter] = React.useState(\n    location.state ? location.state.parameter : []\n  );\n\n  const [columns, setColumns] = React.useState([\n    { title: \"Parameters\", field: \"parameters\" },\n    { title: \"Units\", field: \"units\" },\n    { title: \"Reference Range\", field: \"referenceRange\" },\n  ]);\n  const [message, setMessage] = React.useState();\n  const [status, setStatus] = React.useState();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleChange = (input) => (event) => {\n    setAddTest({ ...addTest, [input]: event.target.value });\n  };\n\n  const handleParameters = (input) => (event) => {\n    setAddparameter({ ...addParameter, [input]: event.target.value });\n  };\n\n  const handleAdd = () => {\n    const testError = addTestValidator(addTest);\n    const parameterError = addParameterValidator(addParameter);\n    if (testError.error) {\n      setMessage(testError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (parameterError.error) {\n      setMessage(parameterError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!testError.error && !parameterError.error) {\n      setParameter([...parameter, addParameter]);\n      setAddparameter({ parameters: \"\", units: \"\", referenceRange: \"\" });\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const test = {\n        name: addTest.testName,\n        amount: addTest.testAmount,\n        parameter: parameter,\n      };\n      if (!location.state._id) {\n        props.history.push(\"/\");\n      }\n      const res = await axios.put(`/test/update/${location.state._id}`, test);\n      props.history.push({\n        pathname: \"/allTest\",\n        state: res.data,\n      });\n    } catch (e) {\n      setMessage(e.Error);\n      setStatus(\"error\");\n      handleClick();\n      console.log(e);\n    }\n  };\n\n  return (\n    <div className={classes.body}>\n      <React.Fragment>\n        <h4>Test Details</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Test Name\"\n            variant=\"outlined\"\n            value={addTest.testName}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleChange(\"testName\")}\n          />\n          <TextField\n            label=\"Test Amount\"\n            variant=\"outlined\"\n            value={addTest.testAmount}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"number\"\n            onChange={handleChange(\"testAmount\")}\n          />\n        </div>\n        <h4>Bio-Chemical Parameters</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Parameter\"\n            variant=\"outlined\"\n            value={addParameter.parameters}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"parameters\")}\n          />\n          <TextField\n            label=\"unit\"\n            variant=\"outlined\"\n            value={addParameter.units}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"units\")}\n          />\n          <TextField\n            label=\"Reference Range\"\n            variant=\"outlined\"\n            value={addParameter.referenceRange}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"referenceRange\")}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={handleAdd}\n          >\n            Add\n          </Button>\n        </div>\n        <div className={classes.table}>\n          {parameter.length ? (\n            <div>\n              <MaterialTable\n                showEmptyDataSourceMessage={false}\n                title=\"Add tests\"\n                icons={tableIcons}\n                columns={columns}\n                data={parameter}\n                options={{\n                  search: false,\n                }}\n                components={{\n                  Toolbar: (props) => (\n                    <div>\n                      <MTableToolbar {...props} />\n                      <div style={{ padding: \"0px 10px\" }}>\n                        <Chip\n                          label=\"Test Name\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testName}\n                          color=\"secondary\"\n                          style={{ marginRight: 50 }}\n                        />\n                        <Chip\n                          label=\"Test Amount\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testAmount}\n                          color=\"secondary\"\n                          style={{ marginRight: 5 }}\n                        />\n                      </div>\n                    </div>\n                  ),\n                }}\n                editable={{\n                  onRowUpdate: (newData, oldData) =>\n                    new Promise(async (resolve, reject) => {\n                      try {\n                        const dataUpdate = [...parameter];\n                        const index = oldData.tableData.id;\n                        dataUpdate[index] = newData;\n                        setParameter([...dataUpdate]);\n                        resolve();\n                      } catch (e) {\n                        console.log(e);\n                        reject();\n                      }\n                    }),\n                  onRowDelete: (oldData) =>\n                    new Promise((resolve, reject) => {\n                      try {\n                        const name = oldData.parameters;\n                        const filterdParameter = parameter.filter(\n                          (item) => item.parameters !== name\n                        );\n                        setParameter([...filterdParameter]);\n                        resolve();\n                      } catch (e) {\n                        console.log(e);\n                        reject();\n                      }\n                    }),\n                }}\n              />\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.saveButton}\n                  onClick={handleSave}\n                >\n                  save\n                </Button>\n              </div>\n            </div>\n          ) : null}\n        </div>\n        <div>\n          <SnackBar\n            messege={message}\n            open={open}\n            handleClose={handleClose}\n            status={status}\n          />\n        </div>\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddSample.js",["201","202","203","204","205","206","207"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { forwardRef } from \"react\";\nimport { TextField, makeStyles, Button } from \"@material-ui/core\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport { MTableBodyRow } from \"material-table\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport SnackBar from \"./SnackBar\";\nimport { addSampleValidaiton } from \"../validation/validator\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\nconst styles = makeStyles((theme) => ({\n\n  paper: {\n    display: \"flex\",\n    marginBottom: theme.spacing(2),\n    padding: \"1em 2em 2em 2em\",\n    margin: \"6em 2em 2em 2em\",\n  },\n  item: {\n    width: \"7em\",\n  },\n  papers: {\n    display: \"flex\",\n    marginBottom: theme.spacing(3),\n    marginRight: theme.spacing(5),\n  },\n  items: {\n    marginLeft: theme.spacing(8),\n    flex: \"1 auto\",\n  },\n  buttons: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(120),\n  },\n  button: {\n    margin: \"5px 3px 5px 5px\",\n  },\n  tables: {\n    height: \"380px\",\n  },\n  table: {\n    marginTop: \"7%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n  itemsp: {\n    marginLeft: theme.spacing(8),\n    flex: \"1 auto\",\n    marginRight: theme.spacing(10),\n  },\n\n}));\n\nconst AddSample = () => {\n\tconst classes = styles();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [columns, setColumns] = useState([\n\t\t{ title: \"Sample Number\", field: \"sampleNo\" },\n\t\t{\n\t\t\ttitle: \"Test Name\",\n\t\t\tfield: \"testName\",\n\t\t},\n\t\t{ title: \"Due Date\", field: \"dueDate\", type: \"date\" },\n\t\t{ title: \"Collected By\", field: \"collectedBy\" },\n\t\t{ title: \"Payment\", field: \"paymentStatus\", type: \"numeric\" },\n\t\t{\n\t\t\ttitle: \"status\",\n\t\t\tfield: \"status\",\n\t\t\teditable: \"never\",\n\t\t\trender: (rowData) =>\n\t\t\t\trowData.status ? (\n\t\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t\t),\n\t\t},\n\t]);\n\n\n  const [data, setData] = useState([]);\n  const [addSample, setAddSample] = React.useState({\n    sampleNo: \"\",\n    dueDate: new Date(),\n    collectedBy: \"\",\n    paymentStatus: \"\",\n  });\n  const [reset, setReset] = React.useState(Object.assign({}, addSample));\n  const [options, setOptions] = useState([]);\n  const [value, setValue] = React.useState({});\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [inputTestValue, setInputTestValue] = React.useState(\"\");\n  const [testName, setTestName] = useState([]);\n  const [testOptions, setTestOptions] = useState([]);\n  const autoC = useRef(null);\n\n  let cancelToken = useRef(\"\");\n  let testcancelToken = useRef(\"\");\n  useEffect(() => {\n    if (inputTestValue) {\n      fetchTestSearchResult();\n    } else {\n      setTestOptions([]);\n    }\n  }, [inputTestValue]);\n\n  useEffect(() => {\n    if (inputValue) {\n      fetchSearchResult();\n    } else {\n      setOptions([]);\n    }\n  }, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n    setOpen(false);\n  };\n  const handleReset = () => {\n    setAddSample({ ...reset });\n    autoC.current\n      .getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n      .click();\n  };\n\n  const handleSubmit = async () => {\n    const { error } = addSampleValidaiton({\n      ...addSample,\n      testName: testName ? testName.name : \"\",\n    });\n    if (error) {\n      setMessage(error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!error) {\n      try {\n        const res = await axiosi.post(\"/sample/add\", {\n          ...addSample,\n          testName: testName.name,\n          customerId: value._id,\n          customerName: value.firstName + \" \" + value.lastName,\n        });\n        setData([{ ...res.data.data }, ...data]);\n        setMessage(res.data.message);\n        setStatus(\"success\");\n        handleClick();\n        handleReset();\n      } catch (e) {\n        console.log(e.response);\n        setMessage(e.response.data);\n        setStatus(\"error\");\n        handleClick();\n        handleReset();\n      }\n    }\n  };\n\n  const fetchTestSearchResult = async () => {\n    if (testcancelToken.current) {\n      testcancelToken.current.cancel();\n    }\n\n    testcancelToken.current = axios.CancelToken.source();\n    try {\n      const { data } = await axiosi.get(`/test/search/${inputTestValue}`, {\n        cancelToken: testcancelToken.current.token,\n      });\n      setTestOptions(data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const fetchSearchResult = async () => {\n    if (cancelToken.current) {\n      cancelToken.current.cancel();\n    }\n    cancelToken.current = axios.CancelToken.source();\n    try {\n      const { data } = await axiosi.get(`/customer/search/${inputValue}`, {\n        cancelToken: cancelToken.current.token,\n      });\n      console.log(\"search complete\");\n      setOptions(data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n\tconst fetchAllSample = async (newValue) => {\n\t\ttry {\n\t\t\tconst res = await axiosi.get(`/sample/find/${newValue._id}`);\n\t\t\tsetData([...data, ...res.data]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddSample({ ...addSample, [input]: event.target.value });\n\t};\n\n  return (\n    <div>\n      <React.Fragment>\n        <div className={classes.paper}>\n          <Autocomplete\n            id=\"combo-box-demo\"\n            getOptionLabel={(option) =>\n              option.firstName + \" \" + option.lastName\n            }\n            getOptionSelected={(option, value) => option.id === value.id}\n            inputValue={inputValue}\n            onChange={(event, newValue) => {\n              if (!newValue) {\n                setData([]);\n              }\n              setValue(newValue);\n              fetchAllSample(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n              setInputValue(newInputValue);\n            }}\n            options={options}\n            style={{ width: 300 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Customer Name\" variant=\"outlined\" />\n            )}\n          />\n        </div>\n        <div className={classes.papers}>\n          <TextField\n            name=\"sample_no\"\n            label=\"Sample NO\"\n            value={addSample.sampleNo}\n            variant=\"filled\"\n            className={classes.items}\n            onChange={handleChange(\"sampleNo\")}\n            type=\"string\"\n          />\n          <TextField\n            name=\"Due_Date\"\n            value={addSample.dueDate}\n            variant=\"filled\"\n            className={classes.items}\n            type=\"date\"\n            onChange={handleChange(\"dueDate\")}\n          />\n          <TextField\n            name=\"Collected_By\"\n            label=\"Collected By\"\n            value={addSample.collectedBy}\n            variant=\"filled\"\n            className={classes.items}\n            type=\"string\"\n            onChange={handleChange(\"collectedBy\")}\n          />\n        </div>\n        <div className={classes.papers}>\n          <TextField\n            name=\"payment\"\n            label=\"Payment\"\n            value={addSample.paymentStatus}\n            variant=\"filled\"\n            className={classes.items}\n            type=\"number\"\n            onChange={handleChange(\"paymentStatus\")}\n          />\n          <Autocomplete\n            id=\"combo-box-demo\"\n            ref={autoC}\n            className={classes.items}\n            getOptionLabel={(option) => option.name}\n            getOptionSelected={(option, value) => option._id === value._id}\n            inputValue={inputTestValue}\n            onChange={(event, newValue) => {\n              setTestName(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n              setInputTestValue(newInputValue);\n            }}\n            options={testOptions}\n            // style={{ width: 420 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Test Name\" variant=\"outlined\" />\n            )}\n          />\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.table}>\n\t\t\t\t\t{data.length ? (\n\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\ttitle=\"All tests\"\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axiosi.put(\n\t\t\t\t\t\t\t\t\t\t\t\t`/sample/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataUpdate = [...data];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\t\t\tsetData([...dataUpdate]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axiosi.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t`/sample/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...data];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tsetData([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default AddSample;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllEquipment.js",["208","209","210","211","212","213"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, Chip } from \"@material-ui/core\";\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n\n\tcontainer: {\n\t\tmarginTop: \"20%\",\n\t},\n}));\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: \"7%\",\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t},\n\ttable: { marginTop: \"1%\" },\n});\n\nexport default function AllReagent() {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [value, setValue] = React.useState(\"\");\n\tconst [options, setOptions] = React.useState([]);\n\tconst [columns, setColumns] = React.useState([\n\t\t{ id: \"equipmentName\", label: \"Equipment Name\", minWidth: 170 },\n\t\t{\n\t\t\tid: \"description\",\n\t\t\tlabel: \"Description\",\n\t\t},\n\t\t{\n\t\t\tid: \"quantity\",\n\t\t\tlabel: \"Quantity\",\n\t\t\tminWidth: 100,\n\t\t\tformat: (value) => {\n\t\t\t\treturn value > 20 ? (\n\t\t\t\t\t<Chip label={value} color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip label={value} color=\"secondary\" style={{ marginRight: 5 }} />\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t]);\n\tlet cancelToken = useRef(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/equipment/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/equipment\", {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/equipment\", {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.equipmentName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\thadleFirstLoad();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetTotal(1);\n\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\tsetRows([newValue]);\n\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Equipment Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.length\n\t\t\t\t\t\t\t\t? rows\n\t\t\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/HandleEquipment.js",["214","215"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { handleEquipmentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nconst styles = makeStyles({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tmargin: \"30\",\n\t\tpadding: \"5\",\n\t\t// backgroundColor: \"#f7f7f7\",\n\t},\n\tinput: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tjustifyContent: \"space-around\",\n\t},\n\titems: {\n\t\theight: \"80%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"2rem\",\n\t},\n\tspace: {\n\t\tmarginTop: \"2rem\",\n\t},\n});\n\nconst ImportReagent = () => {\n\tconst classes = styles();\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [quantity, setQuantity] = useState(\"\");\n\tconst [description, setDescription] = useState(\"Select Equipment\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetDescription(\"Select Equipment\");\n\t\tsetQuantity(\"\");\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/equipment/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = handleEquipmentValidator({\n\t\t\tequipmentName: value,\n\t\t\tquantity: quantity,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axiosi.put(`/equipment/import/${value._id}`, {\n\t\t\t\t\tquantity: quantity,\n\t\t\t\t});\n\t\t\t\tsetMessage(data);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleExport = async () => {\n\t\tconst { error } = handleEquipmentValidator({\n\t\t\tequipmentName: value,\n\t\t\tquantity: quantity,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\tif (quantity > value.quantity) {\n\t\t\t\tsetMessage(\"Insufficient quantity in inventory\");\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.put(`/equipment/use/${value._id}`, {\n\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t});\n\t\t\t\t\tsetMessage(data);\n\t\t\t\t\tsetStatus(\"success\");\n\t\t\t\t\thandleClick();\n\t\t\t\t\thandleReset();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\tsetStatus(\"error\");\n\t\t\t\t\thandleClick();\n\t\t\t\t\thandleReset();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// const handleChange = (event) => {\n\t//     setRole(event.target.value);\n\t//   };\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{ height: \"100vh\" }}>\n\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t<div className={classes.input}>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.equipmentName}\n\t\t\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\t\t\tsetDescription(newValue.description);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetDescription(\"Select Equipment\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tlabel=\"Equipment Name\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\t\t\t// defaultValue=\"Select Reagent\"\n\t\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tvalue={quantity}\n\t\t\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\t\t\tlabel=\"Quantity\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={(event) => setQuantity(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tImport\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleExport}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tExport\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImportReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/login.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddEquipment.js",["216","217","218","219","220"],"import React, { useState, forwardRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { TextField, Button, CssBaseline } from \"@material-ui/core\";\nimport axios from \"../api\";\nimport { addEquipmentValidator } from \"../validation/validator.js\";\nimport SnackBar from \"./SnackBar\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst columns = [\n\t{ title: \"Equipment\", field: \"equipmentName\" },\n\t{\n\t\ttitle: \"Description\",\n\t\tfield: \"description\",\n\t},\n\t{ title: \"Quantity\", field: \"quantity\", type: \"numeric\" },\n];\nconst AddReagent = () => {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [equipment, setEquipment] = React.useState({\n\t\tequipmentName: \"\",\n\t\tdescription: \"\",\n\t\tquantity: \"\",\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, equipment));\n\tconst [query, setQuery] = React.useState(\"\");\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/equipment/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetEquipment({ ...reset });\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetEquipment({ ...equipment, [input]: event.target.value });\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addEquipmentValidator(equipment);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(\"/equipment/add\", { ...equipment });\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tconsole.log(rows);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e.response);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\treturn (\n\t\t<CssBaseline>\n\t\t\t<div style={Styles.inputfiled}>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tid=\"equipmentName\"\n\t\t\t\t\tlabel=\"Name Of Equipment\"\n\t\t\t\t\ttype=\"string\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tvalue={equipment.equipmentName}\n\t\t\t\t\tonChange={handleChange(\"equipmentName\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={equipment.description}\n\t\t\t\t\tonChange={handleChange(\"description\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Quantity\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={equipment.quantity}\n\t\t\t\t\tonChange={handleChange(\"quantity\")}\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\tstyle={Styles.button}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div style={Styles.table}>\n\t\t\t\t<MaterialTable\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\ttitle=\"Equipments\"\n\t\t\t\t\tdata={rows}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t}}\n\t\t\t\t\teditable={{\n\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t`/equipment/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t`/equipment/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t}}\n\t\t\t\t\tlocalization={{\n\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\tsearchPlaceholder: \"Search Equipment\",\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tisLoading={loading}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</CssBaseline>\n\t);\n};\n\nconst Styles = {\n\tinputfiled: {\n\t\tmarginTop: \"6%\",\n\t\tmarginLeft: \"5%\",\n\t\tdisplay: \"flex\",\n\t},\n\tinputfileds: {\n\t\tmarginTop: \"3%\",\n\t\tmarginLeft: \"3%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"3%\",\n\t\tmarginLeft: \"5%\",\n\t\theight: 50,\n\t},\n\ttables: {\n\t\theight: \"380px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginButton: \"20%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n};\n\nexport default AddReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllTest.js",["221","222","223","224"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField } from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport SnackBar from \"./SnackBar\";\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n\n  container: {\n    marginTop: \"20%\",\n  },\n}));\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    marginTop: \"7%\",\n  },\n  container: {\n    maxHeight: 440,\n  },\n  paper: {\n    display: \"flex\",\n    marginTop: \"7%\",\n    marginLeft: \"5%\",\n  },\n  table: { marginTop: \"4%\" },\n  rowStyle: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n  subTable: {\n    width: \"30%\",\n  },\n});\nfunction Row(props) {\n  const { row, handleClick, history } = props;\n\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.rowStyle}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell>{row.amount}</TableCell>\n        <TableCell>\n          <IconButton\n            onClick={() => {\n              handleClick(row);\n            }}\n          >\n            <DeleteIcon color=\"secondary\" />\n          </IconButton>\n          <IconButton\n            onClick={() =>\n              history.push({\n                pathname: \"/editTest\",\n                state: row,\n              })\n            }\n          >\n            <EditIcon color=\"primary\" />\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Parameters\n              </Typography>\n              <Table\n                size=\"small\"\n                aria-label=\"purchases\"\n                className={classes.subTable}\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Parameter</TableCell>\n                    <TableCell>Unit</TableCell>\n                    <TableCell align=\"right\">Reference Range</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.parameter.map((parameter) => (\n                    <TableRow key={parameter._id}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {parameter.parameters}\n                      </TableCell>\n                      <TableCell>{parameter.units}</TableCell>\n                      <TableCell align=\"right\">\n                        {parameter.referenceRange}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nexport default function AllTest(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState();\n  const [status, setStatus] = React.useState();\n  const [openD, setOpenD] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n  const [total, setTotal] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [value, setValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  let cancelToken = useRef(\"\");\n\n  useEffect(() => {\n    if (inputValue) {\n      fetchSearchResult();\n    } else {\n      setOptions([]);\n    }\n  }, [inputValue]);\n\n  React.useEffect(() => {\n    hadleFirstLoad();\n  }, [rowsPerPage]);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  React.useEffect(() => {\n    if (props.location && props.location.state) {\n      setMessage(props.location.state);\n      setStatus(\"success\");\n      handleClick();\n    }\n  }, []);\n\n  const handleCloses = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleClickOpen = (name) => {\n    setValue(name);\n    setOpenD(true);\n  };\n\n  const handleClose = () => {\n    setOpenD(false);\n  };\n\n  const fetchSearchResult = async () => {\n    if (cancelToken.current) {\n      cancelToken.current.cancel();\n    }\n    cancelToken.current = axios.CancelToken.source();\n    try {\n      const { data } = await axiosi.get(`/test/search/${inputValue}`, {\n        cancelToken: cancelToken.current.token,\n      });\n      console.log(\"search complete\");\n      setOptions(data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const hadleFirstLoad = async () => {\n    try {\n      const { data } = await axiosi.get(\"/test\", {\n        params: { page: page, limit: rowsPerPage },\n      });\n      setRows([...data.rows]);\n      console.log(data.total);\n      setTotal(data.total);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const hadleDeleteLoad = async () => {\n    try {\n      const { data } = await axiosi.get(\"/test\", {\n        params: { page: 0, limit: rowsPerPage },\n      });\n      setRows([...data.rows]);\n      setTotal(data.total);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      const res = await axiosi.delete(`/test/delete/${value._id}`);\n      handleClose();\n      setPage(0);\n      hadleDeleteLoad();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  function TablePaginationActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n\n    const handleBackButtonClick = (event) => {\n      handleChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = async (event) => {\n      if (rows.length !== total) {\n        try {\n          const { data } = await axiosi.get(\"/test\", {\n            params: { page: page + 1, limit: rowsPerPage },\n          });\n          setRows([...rows, ...data.rows]);\n\n          console.log(rows);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      handleChangePage(event, page + 1);\n    };\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n      </div>\n    );\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.paper}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          getOptionLabel={(option) => option.name}\n          getOptionSelected={(option, value) => option._id === value._id}\n          inputValue={inputValue}\n          onChange={(event, newValue) => {\n            if (!newValue) {\n              setPage(0);\n              hadleFirstLoad();\n              return;\n            }\n            setTotal(1);\n            setPage(0);\n            setRows([newValue]);\n          }}\n          onInputChange={(event, newInputValue) => {\n            setInputValue(newInputValue);\n          }}\n          options={options}\n          style={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Test Name\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n      <div className={classes.table}>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"collapsible table\">\n            <TableHead>\n              <TableRow>\n                <TableCell />\n                <TableCell>Test Name</TableCell>\n                <TableCell>Amount</TableCell>\n                <TableCell>Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.length\n                ? rows\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => (\n                      <Row\n                        key={row.name}\n                        row={row}\n                        handleClick={handleClickOpen}\n                        history={props.history}\n                      />\n                    ))\n                : null}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 100]}\n        component=\"div\"\n        count={total}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n      <Dialog\n        open={openD}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Are you sure you want to delete \"{value.name}\"?\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Disagree\n          </Button>\n          <Button onClick={handleDelete} color=\"primary\" autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <SnackBar\n        messege={message}\n        open={open}\n        handleClose={handleCloses}\n        status={status}\n      />\n    </React.Fragment>\n  );\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryMRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedAdminRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffAccount.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryStaff.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/action/setUser.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/register.js",["225","226","227","228","229","230","231","232","233","234"],"import React, { useState, forwardRef } from \"react\";\nimport {\n  TextField,\n  Paper,\n  makeStyles,\n  Button,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  IconButton,\n  InputAdornment,\n} from \"@material-ui/core\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport { registervalidation } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nimport axios from \"../api\";\nimport MaterialTable from \"material-table\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst styles = makeStyles({\n  paper: {\n    marginTop: \"10%\",\n    marginRight: \"5%\",\n    marginLeft: \"5%\",\n    marginBottom: \"2%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  items: {\n    flex: \"1 1 1 1 auto\",\n    width: \"20em\",\n  },\n  button: {\n    margin: \"13px 50px 12px 10px\",\n  },\n  tables: {\n    height: \"380px\",\n  },\n  table: {\n    marginTop: \"5%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n  buttons: {\n    marginRight: \"5%\",\n  },\n});\n\nconst Register = () => {\n  const classes = styles();\n  const [userName, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [role, setRole] = useState(\"\");\n  const [open, setOpen] = React.useState(false);\n  const [openS, setOpenS] = React.useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [message, setMessage] = React.useState(\"\");\n  const [status, setStatus] = React.useState(\"\");\n  const [data, setData] = React.useState([]);\n  const [columns, setColumns] = useState([\n    { title: \"Username\", field: \"userName\" },\n    {\n      title: \"Role\",\n      field: \"role\",\n    },\n  ]);\n  React.useEffect(() => {\n    handleLoad();\n  }, []);\n\n  const handleLoad = async () => {\n    try {\n      const res = await axios.get(\"/users\");\n      setData(res.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleClick = () => {\n    setOpenS(true);\n  };\n\n  const handleReset = () => {\n    setUsername(\"\");\n    setPassword(\"\");\n    setRole(\"\");\n  };\n\n  const handleCloses = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpenS(false);\n  };\n\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\n  const handleMouseDownPassword = () => setShowPassword(!showPassword);\n\n  const handleSubmit = async () => {\n    const { error } = registervalidation({ userName, password, role });\n    if (error) {\n      setMessage(error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!error) {\n      try {\n        const res = await axios.post(\"/register\", { userName, password, role });\n        setData([{ ...res.data.data }, ...data]);\n        setMessage(res.data.message);\n        setStatus(\"success\");\n        handleClick();\n        handleReset();\n      } catch (e) {\n        console.log(e);\n        setMessage(e.response.data);\n        setStatus(\"error\");\n        handleClick();\n        handleReset();\n      }\n    }\n  };\n\n  const handleChange = (event) => {\n    setRole(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  return (\n    <React.Fragment>\n      <div className={classes.paper}>\n        <TextField\n          name=\"Username\"\n          label=\"Username\"\n          value={userName}\n          onChange={(e) => setUsername(e.target.value)}\n          variant=\"filled\"\n          className={classes.items}\n        />\n        <TextField\n          type={showPassword ? \"text\" : \"password\"}\n          name=\"password\"\n          label=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          variant=\"filled\"\n          className={classes.items}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"demo-controlled-open-select-label\">Roles</InputLabel>\n          <Select\n            labelId=\"demo-controlled-open-select-label\"\n            id=\"demo-controlled-open-select\"\n            open={open}\n            onClose={handleClose}\n            onOpen={handleOpen}\n            value={role}\n            onChange={handleChange}\n            className={classes.items}\n          >\n            <MenuItem value=\"staff\">Staff</MenuItem>\n            <MenuItem value=\"inventory_manager\">Inventory Manager</MenuItem>\n            <MenuItem value=\"accountant\">Accountant</MenuItem>\n            <MenuItem value=\"admin\">Admin</MenuItem>\n          </Select>\n        </FormControl>\n\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.items}\n          onClick={handleSubmit}\n        >\n          Register\n        </Button>\n      </div>\n      <div className={classes.table}>\n        {data.length ? (\n          <MaterialTable\n            showEmptyDataSourceMessage={false}\n            icons={tableIcons}\n            title=\"All Users\"\n            columns={columns}\n            data={data}\n            options={{\n              search: false,\n            }}\n            editable={{\n              onRowDelete: (oldData) =>\n                new Promise(async (resolve, reject) => {\n                  try {\n                    const res = await axios.delete(\n                      `/user/delete/${oldData._id}`\n                    );\n                    const dataDelete = [...data];\n                    const index = oldData.tableData.id;\n                    dataDelete.splice(index, 1);\n                    setData([...dataDelete]);\n                    resolve();\n                  } catch (e) {\n                    console.log(e);\n                    reject();\n                  }\n                }),\n            }}\n          />\n        ) : null}\n      </div>\n      <SnackBar\n        messege={message}\n        open={openS}\n        handleClose={handleCloses}\n        status={status}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Register;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/authReducer.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SnackBar.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/validation/validator.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/api/index.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddAnimal.js",["235","236","237","238","239"],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":20,"column":35,"nodeType":"246","messageId":"247","endLine":20,"endColumn":40},{"ruleId":"244","severity":1,"message":"248","line":22,"column":23,"nodeType":"246","messageId":"247","endLine":22,"endColumn":34},{"ruleId":"244","severity":1,"message":"249","line":23,"column":10,"nodeType":"246","messageId":"247","endLine":23,"endColumn":18},{"ruleId":"244","severity":1,"message":"250","line":30,"column":25,"nodeType":"246","messageId":"247","endLine":30,"endColumn":37},{"ruleId":"244","severity":1,"message":"251","line":101,"column":16,"nodeType":"246","messageId":"247","endLine":101,"endColumn":24},{"ruleId":"252","severity":1,"message":"253","line":126,"column":5,"nodeType":"254","endLine":126,"endColumn":12,"suggestions":"255"},{"ruleId":"244","severity":1,"message":"256","line":315,"column":18,"nodeType":"246","messageId":"247","endLine":315,"endColumn":21},{"ruleId":"244","severity":1,"message":"257","line":3,"column":21,"nodeType":"246","messageId":"247","endLine":3,"endColumn":26},{"ruleId":"252","severity":1,"message":"258","line":57,"column":5,"nodeType":"254","endLine":57,"endColumn":17,"suggestions":"259"},{"ruleId":"244","severity":1,"message":"257","line":9,"column":8,"nodeType":"246","messageId":"247","endLine":9,"endColumn":13},{"ruleId":"244","severity":1,"message":"260","line":13,"column":8,"nodeType":"246","messageId":"247","endLine":13,"endColumn":17},{"ruleId":"244","severity":1,"message":"261","line":96,"column":8,"nodeType":"246","messageId":"247","endLine":96,"endColumn":13},{"ruleId":"252","severity":1,"message":"262","line":100,"column":5,"nodeType":"254","endLine":100,"endColumn":18,"suggestions":"263"},{"ruleId":"244","severity":1,"message":"264","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"251","line":64,"column":16,"nodeType":"246","messageId":"247","endLine":64,"endColumn":24},{"ruleId":"252","severity":1,"message":"253","line":85,"column":5,"nodeType":"254","endLine":85,"endColumn":12,"suggestions":"265"},{"ruleId":"266","severity":1,"message":"267","line":143,"column":6,"nodeType":"268","endLine":143,"endColumn":32},{"ruleId":"244","severity":1,"message":"256","line":213,"column":16,"nodeType":"246","messageId":"247","endLine":213,"endColumn":19},{"ruleId":"244","severity":1,"message":"269","line":108,"column":18,"nodeType":"246","messageId":"247","endLine":108,"endColumn":28},{"ruleId":"244","severity":1,"message":"270","line":1,"column":27,"nodeType":"246","messageId":"247","endLine":1,"endColumn":36},{"ruleId":"244","severity":1,"message":"260","line":9,"column":2,"nodeType":"246","messageId":"247","endLine":9,"endColumn":11},{"ruleId":"244","severity":1,"message":"271","line":23,"column":10,"nodeType":"246","messageId":"247","endLine":23,"endColumn":14},{"ruleId":"244","severity":1,"message":"272","line":123,"column":9,"nodeType":"246","messageId":"247","endLine":123,"endColumn":14},{"ruleId":"244","severity":1,"message":"273","line":123,"column":16,"nodeType":"246","messageId":"247","endLine":123,"endColumn":24},{"ruleId":"252","severity":1,"message":"274","line":132,"column":5,"nodeType":"254","endLine":132,"endColumn":18,"suggestions":"275"},{"ruleId":"252","severity":1,"message":"276","line":140,"column":5,"nodeType":"254","endLine":140,"endColumn":17,"suggestions":"277"},{"ruleId":"278","severity":1,"message":"279","line":338,"column":34,"nodeType":"280","messageId":"281","endLine":338,"endColumn":36},{"ruleId":"282","severity":1,"message":"283","line":339,"column":27,"nodeType":"284","messageId":"285","endLine":339,"endColumn":29},{"ruleId":"244","severity":1,"message":"257","line":11,"column":8,"nodeType":"246","messageId":"247","endLine":11,"endColumn":13},{"ruleId":"244","severity":1,"message":"260","line":15,"column":8,"nodeType":"246","messageId":"247","endLine":15,"endColumn":17},{"ruleId":"244","severity":1,"message":"272","line":53,"column":9,"nodeType":"246","messageId":"247","endLine":53,"endColumn":14},{"ruleId":"244","severity":1,"message":"269","line":55,"column":18,"nodeType":"246","messageId":"247","endLine":55,"endColumn":28},{"ruleId":"252","severity":1,"message":"258","line":82,"column":5,"nodeType":"254","endLine":82,"endColumn":17,"suggestions":"286"},{"ruleId":"252","severity":1,"message":"262","line":86,"column":5,"nodeType":"254","endLine":86,"endColumn":18,"suggestions":"287"},{"ruleId":"244","severity":1,"message":"257","line":3,"column":21,"nodeType":"246","messageId":"247","endLine":3,"endColumn":26},{"ruleId":"244","severity":1,"message":"288","line":97,"column":26,"nodeType":"246","messageId":"247","endLine":97,"endColumn":44},{"ruleId":"252","severity":1,"message":"289","line":118,"column":5,"nodeType":"254","endLine":118,"endColumn":7,"suggestions":"290"},{"ruleId":"252","severity":1,"message":"258","line":126,"column":5,"nodeType":"254","endLine":126,"endColumn":17,"suggestions":"291"},{"ruleId":"244","severity":1,"message":"292","line":188,"column":12,"nodeType":"246","messageId":"247","endLine":188,"endColumn":19},{"ruleId":"244","severity":1,"message":"293","line":339,"column":19,"nodeType":"246","messageId":"247","endLine":339,"endColumn":22},{"ruleId":"244","severity":1,"message":"294","line":342,"column":19,"nodeType":"246","messageId":"247","endLine":342,"endColumn":22},{"ruleId":"244","severity":1,"message":"264","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"295","line":1,"column":27,"nodeType":"246","messageId":"247","endLine":1,"endColumn":33},{"ruleId":"244","severity":1,"message":"296","line":137,"column":24,"nodeType":"246","messageId":"247","endLine":137,"endColumn":40},{"ruleId":"244","severity":1,"message":"297","line":143,"column":15,"nodeType":"246","messageId":"247","endLine":143,"endColumn":22},{"ruleId":"252","severity":1,"message":"298","line":158,"column":5,"nodeType":"254","endLine":158,"endColumn":7,"suggestions":"299"},{"ruleId":"244","severity":1,"message":"300","line":212,"column":11,"nodeType":"246","messageId":"247","endLine":212,"endColumn":21},{"ruleId":"244","severity":1,"message":"300","line":227,"column":11,"nodeType":"246","messageId":"247","endLine":227,"endColumn":21},{"ruleId":"244","severity":1,"message":"301","line":246,"column":10,"nodeType":"246","messageId":"247","endLine":246,"endColumn":16},{"ruleId":"244","severity":1,"message":"269","line":106,"column":19,"nodeType":"246","messageId":"247","endLine":106,"endColumn":29},{"ruleId":"244","severity":1,"message":"302","line":23,"column":10,"nodeType":"246","messageId":"247","endLine":23,"endColumn":23},{"ruleId":"244","severity":1,"message":"269","line":101,"column":18,"nodeType":"246","messageId":"247","endLine":101,"endColumn":28},{"ruleId":"244","severity":1,"message":"251","line":131,"column":17,"nodeType":"246","messageId":"247","endLine":131,"endColumn":25},{"ruleId":"252","severity":1,"message":"303","line":148,"column":6,"nodeType":"254","endLine":148,"endColumn":22,"suggestions":"304"},{"ruleId":"252","severity":1,"message":"258","line":156,"column":6,"nodeType":"254","endLine":156,"endColumn":18,"suggestions":"305"},{"ruleId":"266","severity":1,"message":"267","line":344,"column":7,"nodeType":"268","endLine":344,"endColumn":32},{"ruleId":"244","severity":1,"message":"256","line":383,"column":18,"nodeType":"246","messageId":"247","endLine":383,"endColumn":21},{"ruleId":"244","severity":1,"message":"257","line":11,"column":8,"nodeType":"246","messageId":"247","endLine":11,"endColumn":13},{"ruleId":"244","severity":1,"message":"260","line":15,"column":8,"nodeType":"246","messageId":"247","endLine":15,"endColumn":17},{"ruleId":"244","severity":1,"message":"272","line":53,"column":9,"nodeType":"246","messageId":"247","endLine":53,"endColumn":14},{"ruleId":"244","severity":1,"message":"269","line":55,"column":18,"nodeType":"246","messageId":"247","endLine":55,"endColumn":28},{"ruleId":"252","severity":1,"message":"258","line":82,"column":5,"nodeType":"254","endLine":82,"endColumn":17,"suggestions":"306"},{"ruleId":"252","severity":1,"message":"262","line":86,"column":5,"nodeType":"254","endLine":86,"endColumn":18,"suggestions":"307"},{"ruleId":"244","severity":1,"message":"257","line":3,"column":21,"nodeType":"246","messageId":"247","endLine":3,"endColumn":26},{"ruleId":"252","severity":1,"message":"258","line":58,"column":5,"nodeType":"254","endLine":58,"endColumn":17,"suggestions":"308"},{"ruleId":"244","severity":1,"message":"264","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"251","line":64,"column":16,"nodeType":"246","messageId":"247","endLine":64,"endColumn":24},{"ruleId":"252","severity":1,"message":"253","line":85,"column":5,"nodeType":"254","endLine":85,"endColumn":12,"suggestions":"309"},{"ruleId":"266","severity":1,"message":"267","line":143,"column":6,"nodeType":"268","endLine":143,"endColumn":32},{"ruleId":"244","severity":1,"message":"256","line":206,"column":16,"nodeType":"246","messageId":"247","endLine":206,"endColumn":19},{"ruleId":"252","severity":1,"message":"258","line":170,"column":6,"nodeType":"254","endLine":170,"endColumn":18,"suggestions":"310"},{"ruleId":"252","severity":1,"message":"262","line":174,"column":6,"nodeType":"254","endLine":174,"endColumn":19,"suggestions":"311"},{"ruleId":"252","severity":1,"message":"312","line":186,"column":6,"nodeType":"254","endLine":186,"endColumn":8,"suggestions":"313"},{"ruleId":"244","severity":1,"message":"256","line":246,"column":13,"nodeType":"246","messageId":"247","endLine":246,"endColumn":16},{"ruleId":"244","severity":1,"message":"257","line":4,"column":3,"nodeType":"246","messageId":"247","endLine":4,"endColumn":8},{"ruleId":"244","severity":1,"message":"314","line":11,"column":3,"nodeType":"246","messageId":"247","endLine":11,"endColumn":17},{"ruleId":"244","severity":1,"message":"315","line":12,"column":3,"nodeType":"246","messageId":"247","endLine":12,"endColumn":8},{"ruleId":"244","severity":1,"message":"260","line":13,"column":3,"nodeType":"246","messageId":"247","endLine":13,"endColumn":12},{"ruleId":"244","severity":1,"message":"316","line":14,"column":3,"nodeType":"246","messageId":"247","endLine":14,"endColumn":11},{"ruleId":"244","severity":1,"message":"317","line":15,"column":3,"nodeType":"246","messageId":"247","endLine":15,"endColumn":12},{"ruleId":"244","severity":1,"message":"318","line":16,"column":3,"nodeType":"246","messageId":"247","endLine":16,"endColumn":12},{"ruleId":"244","severity":1,"message":"269","line":106,"column":19,"nodeType":"246","messageId":"247","endLine":106,"endColumn":29},{"ruleId":"266","severity":1,"message":"267","line":238,"column":11,"nodeType":"268","endLine":238,"endColumn":36},{"ruleId":"244","severity":1,"message":"256","line":259,"column":27,"nodeType":"246","messageId":"247","endLine":259,"endColumn":30},{"ruleId":"244","severity":1,"message":"272","line":86,"column":32,"nodeType":"246","messageId":"247","endLine":86,"endColumn":37},{"ruleId":"244","severity":1,"message":"256","line":92,"column":10,"nodeType":"246","messageId":"247","endLine":92,"endColumn":13},{"ruleId":"244","severity":1,"message":"319","line":193,"column":9,"nodeType":"246","messageId":"247","endLine":193,"endColumn":13},{"ruleId":"252","severity":1,"message":"276","line":225,"column":5,"nodeType":"254","endLine":225,"endColumn":17,"suggestions":"320"},{"ruleId":"244","severity":1,"message":"256","line":265,"column":11,"nodeType":"246","messageId":"247","endLine":265,"endColumn":14},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'Redirect' is defined but never used.","'MTableHeader' is defined but never used.","'setReset' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'runSearch'. Either include it or remove the dependency array.","ArrayExpression",["323"],"'res' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["324"],"'TableHead' is defined but never used.","'token' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'hadleFirstLoad'. Either include it or remove the dependency array.",["325"],"'useState' is defined but never used.",["326"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setColumns' is assigned a value but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'handleFirstload'. Either include it or remove the dependency array.",["327"],"React Hook React.useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["328"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["329"],["330"],"'SetCustomerDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsedReagent'. Either include it or remove the dependency array.",["331"],["332"],"'respose' is assigned a value but never used.","'del' is assigned a value but never used.","'inc' is assigned a value but never used.","'useRef' is defined but never used.","'setSampleDetails' is assigned a value but never used.","'setDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCustomerDetails', 'fetchReport', and 'fetchTestDetails'. Either include them or remove the dependency array.",["333"],"'saveReport' is assigned a value but never used.","'status' is assigned a value but never used.","'MTableBodyRow' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchTestSearchResult'. Either include it or remove the dependency array.",["334"],["335"],["336"],["337"],["338"],["339"],["340"],["341"],"React Hook React.useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.",["342"],"'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","'data' is assigned a value but never used.",["343"],"no-global-assign","no-unsafe-negation",{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"344","fix":"350"},{"desc":"351","fix":"352"},{"desc":"346","fix":"353"},{"desc":"346","fix":"354"},{"desc":"348","fix":"355"},{"desc":"356","fix":"357"},{"desc":"346","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"346","fix":"363"},{"desc":"346","fix":"364"},{"desc":"348","fix":"365"},{"desc":"346","fix":"366"},{"desc":"344","fix":"367"},{"desc":"346","fix":"368"},{"desc":"348","fix":"369"},{"desc":"370","fix":"371"},{"desc":"346","fix":"372"},"Update the dependencies array to be: [query, runSearch]",{"range":"373","text":"374"},"Update the dependencies array to be: [fetchSearchResult, inputValue]",{"range":"375","text":"376"},"Update the dependencies array to be: [hadleFirstLoad, rowsPerPage]",{"range":"377","text":"378"},{"range":"379","text":"374"},"Update the dependencies array to be: [handleFirstload, rowsPerPage]",{"range":"380","text":"381"},{"range":"382","text":"376"},{"range":"383","text":"376"},{"range":"384","text":"378"},"Update the dependencies array to be: [fetchUsedReagent]",{"range":"385","text":"386"},{"range":"387","text":"376"},"Update the dependencies array to be: [fetchCustomerDetails, fetchReport, fetchTestDetails]",{"range":"388","text":"389"},"Update the dependencies array to be: [fetchTestSearchResult, inputTestValue]",{"range":"390","text":"391"},{"range":"392","text":"376"},{"range":"393","text":"376"},{"range":"394","text":"378"},{"range":"395","text":"376"},{"range":"396","text":"374"},{"range":"397","text":"376"},{"range":"398","text":"378"},"Update the dependencies array to be: [props.location]",{"range":"399","text":"400"},{"range":"401","text":"376"},[4011,4018],"[query, runSearch]",[1388,1400],"[fetchSearchResult, inputValue]",[2455,2468],"[hadleFirstLoad, rowsPerPage]",[3367,3374],[2777,2790],"[handleFirstload, rowsPerPage]",[2901,2913],[2272,2284],[2337,2350],[4247,4249],"[fetchUsedReagent]",[4354,4366],[4800,4802],"[fetchCustomerDetails, fetchReport, fetchTestDetails]",[4921,4937],"[fetchTestSearchResult, inputTestValue]",[5056,5068],[2294,2306],[2359,2372],[1444,1456],[3389,3396],[5388,5400],[5457,5470],[5705,5707],"[props.location]",[5214,5226]]