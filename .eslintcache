[{"D:\\proj\\lims-frontend\\src\\index.js":"1","D:\\proj\\lims-frontend\\src\\App.js":"2","D:\\proj\\lims-frontend\\src\\reducers\\index.js":"3","D:\\proj\\lims-frontend\\src\\reducers\\authReducer.js":"4","D:\\proj\\lims-frontend\\src\\Components\\ImportReagent.js":"5","D:\\proj\\lims-frontend\\src\\action\\setUser.js":"6","D:\\proj\\lims-frontend\\src\\Components\\PendingSample.js":"7","D:\\proj\\lims-frontend\\src\\Components\\appBar.js":"8","D:\\proj\\lims-frontend\\src\\Components\\AllSample.js":"9","D:\\proj\\lims-frontend\\src\\Components\\AllReagent.js":"10","D:\\proj\\lims-frontend\\src\\Components\\login.js":"11","D:\\proj\\lims-frontend\\src\\Components\\register.js":"12","D:\\proj\\lims-frontend\\src\\Components\\AddReagent.js":"13","D:\\proj\\lims-frontend\\src\\Components\\AddTest.js":"14","D:\\proj\\lims-frontend\\src\\Components\\AddCutomer.js":"15","D:\\proj\\lims-frontend\\src\\Components\\AddSample.js":"16","D:\\proj\\lims-frontend\\src\\Components\\SnackBar.js":"17","D:\\proj\\lims-frontend\\src\\validation\\validator.js":"18","D:\\proj\\lims-frontend\\src\\api\\index.js":"19"},{"size":585,"mtime":1615879392673,"results":"20","hashOfConfig":"21"},{"size":2059,"mtime":1615881824029,"results":"22","hashOfConfig":"21"},{"size":175,"mtime":1615879392675,"results":"23","hashOfConfig":"21"},{"size":188,"mtime":1615879392674,"results":"24","hashOfConfig":"21"},{"size":3209,"mtime":1615879392662,"results":"25","hashOfConfig":"21"},{"size":106,"mtime":1615879392669,"results":"26","hashOfConfig":"21"},{"size":6232,"mtime":1616414825503,"results":"27","hashOfConfig":"21"},{"size":5385,"mtime":1615879392664,"results":"28","hashOfConfig":"21"},{"size":6760,"mtime":1615879392659,"results":"29","hashOfConfig":"21"},{"size":1448,"mtime":1615879392640,"results":"30","hashOfConfig":"21"},{"size":3574,"mtime":1615882075438,"results":"31","hashOfConfig":"21"},{"size":6052,"mtime":1615879392667,"results":"32","hashOfConfig":"21"},{"size":2832,"mtime":1615879392636,"results":"33","hashOfConfig":"21"},{"size":10450,"mtime":1616311719684,"results":"34","hashOfConfig":"21"},{"size":6210,"mtime":1616309419218,"results":"35","hashOfConfig":"21"},{"size":11405,"mtime":1616423874409,"results":"36","hashOfConfig":"21"},{"size":563,"mtime":1615964935018,"results":"37","hashOfConfig":"21"},{"size":1370,"mtime":1616309419222,"results":"38","hashOfConfig":"21"},{"size":187,"mtime":1615964988270,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1t17olv",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\proj\\lims-frontend\\src\\index.js",[],["89","90"],"D:\\proj\\lims-frontend\\src\\App.js",["91"],"import AppBar from \"./Components/appBar\";\r\nimport AddCustomer from \"./Components/AddCutomer\";\r\nimport AddReagent from \"./Components/AddReagent\";\r\nimport AddTest from \"./Components/AddTest\";\r\nimport ImportReagent from \"./Components/ImportReagent\";\r\nimport PendingSample from \"./Components/PendingSample\";\r\nimport AllSample from \"./Components/AllSample\";\r\nimport AllReagent from \"./Components/AllReagent\";\r\nimport AddSample from \"./Components/AddSample\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport Login from \"./Components/login\";\r\nimport Register from \"./Components/register\";\r\nimport { setUser } from \"./action/setUser\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const token = localStorage.getItem(\"token\");\r\n  const [isLogin, setLogin] = useState(token ? true : false);\r\n  if (token) {\r\n    try {\r\n      const decoded = jwt_decode(token);\r\n      dispatch(setUser(decoded.id, decoded.role));\r\n    } catch (e) {\r\n      localStorage.removeItem(\"token\");\r\n      setLogin(false);\r\n    }\r\n  }\r\n\r\n  return isLogin ? (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <AppBar />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={PendingSample} />\r\n          <Route path=\"/addCustomer\" component={AddCustomer} />\r\n          <Route path=\"/addReagent\" component={AddReagent} />\r\n          <Route path=\"/addTest\" component={AddTest} />\r\n          <Route path=\"/importReagent\" component={ImportReagent} />\r\n          <Route path=\"/allSample\" component={AllSample} />\r\n          <Route path=\"/allReagent\" component={AllReagent} />\r\n          <Route path=\"/addSample\" component={AddSample} />\r\n          <Route path=\"/register\" exact component={Register} />\r\n          <Route path=\"/login\" exact component={Login} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  ) : (\r\n    <Login isLogin={isLogin} setLogin={setLogin} />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\proj\\lims-frontend\\src\\reducers\\index.js",[],"D:\\proj\\lims-frontend\\src\\reducers\\authReducer.js",[],"D:\\proj\\lims-frontend\\src\\Components\\ImportReagent.js",["92","93","94"],"import React, { useState } from \"react\";\r\nimport \"./myStyle.css\";\r\nimport {\r\n    TextField,\r\n    Paper,\r\n    makeStyles,\r\n    Button,\r\n   Select,\r\n   MenuItem,\r\n   InputLabel,\r\n   FormControl\r\n} from \"@material-ui/core\";\r\nconst styles = makeStyles({\r\n    paper: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        margin: \"30\",\r\n        padding: \"5\",\r\n        backgroundColor: \"#f7f7f7\",\r\n\r\n    },\r\n    input: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent:\"space-around\"\r\n    },\r\n    items:{\r\n     height:\"80%\"\r\n    },\r\n    button: {\r\n        marginTop: \"2rem\",\r\n    }\r\n});\r\n\r\n\r\nconst ImportReagent = () => {\r\n    const classes = styles();\r\n    const [importReagent,setImportReagent] = React.useState({\r\n        reagent:\"\",\r\n        unit:\"\",\r\n        vloume:\"\"\r\n    })\r\n\r\n    // const handleChange = (event) => {\r\n    //     setRole(event.target.value);\r\n    //   };\r\n    return (\r\n        <div>\r\n                   <React.Fragment>\r\n        <Paper style={{ height: \"100vh\" }}>\r\n                <div className={classes.paper}>\r\n                    <div className={classes.input}>\r\n                        <FormControl className={classes.formControl}>\r\n                         <InputLabel id=\"demo-customized-select-label\">Name Of Reagent</InputLabel>\r\n                         <Select\r\n                        labelId=\"demo-customized-select-label\"\r\n                        id=\"demo-customized-select\"\r\n                        // value={reagent}\r\n                        // onChange={handleChange}\r\n                        >\r\n                        <MenuItem value=\"hcl\">Hcl</MenuItem>\r\n                        <MenuItem value=\"H2so4\">H2SO4</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl className={classes.formControl}>\r\n                         <InputLabel id=\"demo-customized-select-label\">Unit Of Reagent</InputLabel>\r\n                         <Select\r\n                        labelId=\"demo-customized-select-label\"\r\n                        id=\"demo-customized-select\"\r\n                        // value={unit}\r\n                        // onChange={handleChange}\r\n                        >\r\n                        <MenuItem value=\"ml\">ml</MenuItem>\r\n                        <MenuItem value=\"l\">l</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <TextField\r\n                            name=\"voume\"\r\n                            label=\"Volume\"\r\n                            // value={voulme}\r\n                            variant=\"filled\"     \r\n                        />\r\n\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Add \r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </React.Fragment>\r\n        </div>\r\n    )\r\n}\r\nexport default ImportReagent;","D:\\proj\\lims-frontend\\src\\action\\setUser.js",[],"D:\\proj\\lims-frontend\\src\\Components\\PendingSample.js",["95"],"import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport axios from \"../api\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nconst columns = [\r\n  { id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\r\n  {\r\n    id: \"customerName\",\r\n    label: \"Customer Name\",\r\n  },\r\n  { id: \"testName\", label: \"Test Name\", minWidth: 100 },\r\n  {\r\n    id: \"dueDate\",\r\n    label: \"Due Date\",\r\n    // minWidth: 170,\r\n    // align: 'right',\r\n    format: (value) => {\r\n      return value.substring(0, 10);\r\n    },\r\n  },\r\n  {\r\n    id: \"paymentStatus\",\r\n    label: \"Payment\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: \"collectedBy\",\r\n    label: \"Collected By\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    minWidth: 100,\r\n    format: (value) =>\r\n      value ? (\r\n        <Chip color=\"primary\" label=\"done\" />\r\n      ) : (\r\n        <Chip color=\"secondary\" label=\"pending\" />\r\n      ),\r\n  },\r\n  {\r\n    id: \"action\",\r\n    label: \"\",\r\n    format: () => (\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        Generate Report\r\n      </Button>\r\n    ),\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: \"7%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function PendingSample() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = React.useState([]);\r\n  const [total, setTotal] = React.useState(0);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  React.useEffect(() => {\r\n    hadleFirstLoad();\r\n  }, [rowsPerPage]);\r\n\r\n  function TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n\r\n    const handleBackButtonClick = (event) => {\r\n      handleChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = async (event) => {\r\n      if (rows.length !== total) {\r\n        try {\r\n          const { data } = await axios.get(\"/sample/paginate\", {\r\n            params: { page: page + 1, limit: rowsPerPage },\r\n          });\r\n          setRows([...rows, ...data.rows]);\r\n\r\n          console.log(rows);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      handleChangePage(event, page + 1);\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <IconButton\r\n          onClick={handleBackButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"previous page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowRight />\r\n          ) : (\r\n            <KeyboardArrowLeft />\r\n          )}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleNextButtonClick}\r\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\r\n          aria-label=\"next page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowLeft />\r\n          ) : (\r\n            <KeyboardArrowRight />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const hadleFirstLoad = async () => {\r\n    try {\r\n      const { data } = await axios.get(\"/sample/paginate\", {\r\n        params: { page: page, limit: rowsPerPage },\r\n      });\r\n      setRows([...data.rows]);\r\n      console.log(data.total);\r\n      setTotal(data.total);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format ? column.format(value) : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 100]}\r\n        component=\"div\"\r\n        count={total}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        ActionsComponent={TablePaginationActions}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","D:\\proj\\lims-frontend\\src\\Components\\appBar.js",[],"D:\\proj\\lims-frontend\\src\\Components\\AllSample.js",["96","97","98"],"import React, { useState} from \"react\";\r\nimport {\r\n    TextField,\r\n    makeStyles,\r\n    Button,\r\n   TableContainer,\r\n   Table,\r\n   TableHead,\r\n   TableRow,\r\n   TableCell,\r\n   TableBody\r\n} from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst styles = makeStyles({\r\n    paper: {\r\n        marginTop: \"7%\",\r\n        marginLeft: \"5%\",\r\n        marginBottom: \"2%\",\r\n        display: \"flex\",\r\n        justifyContent:\"space-between\"\r\n    },\r\n    items:{\r\n     flex:\"1 1 1 1 auto\",\r\n     width:\"20em\",\r\n    },\r\n    button: {\r\n        margin: \"13px 12px 12px 10px\",\r\n        backgroundColor:\"#27E208\"\r\n    },\r\n    tables: {\r\n        height: \"380px\",\r\n      },\r\n      table: {\r\n        marginTop:\"5%\",\r\n        marginLeft: \"3%\",\r\n      },\r\n});\r\n\r\nconst AllSample = () => {\r\n    const classes = styles();\r\n    const [sampleFields,setSampleFields] = React.useState({\r\n        customerName:\"\",\r\n        date:\"\",\r\n        sampleId:\"\"\r\n    })\r\n    return (\r\n        <React.Fragment>\r\n                <div className={classes.paper}>\r\n                    <TextField\r\n                            name=\"CustomerName\"\r\n                            label=\"Customer Name\"\r\n                            // value={sampleFields.customerName}\r\n                            variant=\"filled\" \r\n                            className={classes.items}\r\n                        />\r\n                        <TextField\r\n                            // type=\"password\"\r\n                            name=\"Date\"\r\n                            // value={sampleFields.date}\r\n                            variant=\"filled\"\r\n                            type=\"date\"\r\n                            className={classes.items}\r\n                        />\r\n                           <TextField\r\n                            name=\"SampleId\"\r\n                            label=\"Sample Id\"\r\n                            // value={sampleFields.sampleId}\r\n                            variant=\"filled\" \r\n                            className={classes.items}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.items}\r\n                        >\r\n                            <SearchIcon/>\r\n                            Search\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.table}>\r\n                    <TableContainer className={classes.tables}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Sample Id</TableCell>\r\n            <TableCell>Test</TableCell>\r\n            <TableCell>Customer Name</TableCell>\r\n            <TableCell>Due Date</TableCell>\r\n            <TableCell>Payment</TableCell>\r\n            <TableCell>Collected By</TableCell>\r\n            <TableCell>Status</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            <TableRow>\r\n                <TableCell>101</TableCell>\r\n                <TableCell>Urine Test</TableCell>\r\n                <TableCell>Rajesh</TableCell>\r\n                <TableCell>2020/01/20</TableCell>\r\n                <TableCell>1500</TableCell>\r\n                <TableCell>Ravish</TableCell>\r\n                <TableCell >Pending</TableCell>\r\n                <TableCell>\r\n                <Button\r\n                          className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"black-text\"\r\n                        >\r\n                           Generate Report\r\n                        </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>101</TableCell>\r\n                <TableCell>Urine Test</TableCell>\r\n                <TableCell>Rajesh</TableCell>\r\n                <TableCell>2020/01/20</TableCell>\r\n                <TableCell>1500</TableCell>\r\n                <TableCell>Ravish</TableCell>\r\n                <TableCell >Done</TableCell>\r\n                <TableCell>\r\n                <Button\r\n                        className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"black-text\"\r\n                        >\r\n                           Show Info\r\n                        </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>101</TableCell>\r\n                <TableCell>Urine Test</TableCell>\r\n                <TableCell>Rajesh</TableCell>\r\n                <TableCell>2020/01/20</TableCell>\r\n                <TableCell>1500</TableCell>\r\n                <TableCell>Ravish</TableCell>\r\n                <TableCell >Pending</TableCell>\r\n                <TableCell>\r\n                <Button\r\n                        className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"black-text\"\r\n                        >\r\n                           Generate Report\r\n                        </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>101</TableCell>\r\n                <TableCell>Urine Test</TableCell>\r\n                <TableCell>Rajesh</TableCell>\r\n                <TableCell>2020/01/20</TableCell>\r\n                <TableCell>1500</TableCell>\r\n                <TableCell>Ravish</TableCell>\r\n                <TableCell >Pending</TableCell>\r\n                <TableCell>\r\n                <Button\r\n                        className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"black-text\"\r\n                        >\r\n                           Generate Report\r\n                        </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>101</TableCell>\r\n                <TableCell>Urine Test</TableCell>\r\n                <TableCell>Rajesh</TableCell>\r\n                <TableCell>2020/01/20</TableCell>\r\n                <TableCell>1500</TableCell>\r\n                <TableCell>Ravish</TableCell>\r\n                <TableCell >Pending</TableCell>\r\n                <TableCell>\r\n                <Button\r\n                        className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"black-text\"\r\n                        >\r\n                           Generate Report\r\n                        </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AllSample;\r\n","D:\\proj\\lims-frontend\\src\\Components\\AllReagent.js",["99"],"import React, { useState} from \"react\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper\r\n} from \"@material-ui/core\";\r\n\r\nconst AllReagent = () => {\r\n    return (\r\n        <div>\r\n          <Paper style={Styles.Paper} elevation=\"2\">\r\n             <div style={Styles.table}>\r\n        <TableContainer style={Styles.tables}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Reagent Name</TableCell>\r\n            <TableCell>Unit</TableCell>\r\n            <TableCell>Volume</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            <TableRow>\r\n                <TableCell>Hcl</TableCell>\r\n                <TableCell>ml</TableCell>\r\n                <TableCell>1000</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>Hcl</TableCell>\r\n                <TableCell>ml</TableCell>\r\n                <TableCell>2000</TableCell>\r\n            </TableRow>\r\n        </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        </div>\r\n        </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Styles = {\r\n    tables: {\r\n        height: \"380px\",\r\n      },\r\n      table: {\r\n        marginTop:\"7%\",\r\n        // marginLeft: \"3%\",\r\n      },\r\n      Paper:{\r\n        marginTop:\"7%\",\r\n        marginLeft: \"3%\",\r\n        marginRight: \"3%\"\r\n      }\r\n}\r\n\r\nexport default AllReagent;","D:\\proj\\lims-frontend\\src\\Components\\login.js",["100"],"import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Paper,\r\n  makeStyles,\r\n  Typography,\r\n  Button,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nimport axios from \"../api\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../action/setUser\";\r\nimport { Redirect } from \"react-router\";\r\nconst styles = makeStyles({\r\n  paper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    margin: \"0\",\r\n    padding: \"0\",\r\n    backgroundColor: \"#f7f7f7\",\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  button: {\r\n    marginTop: \"2rem\",\r\n  },\r\n});\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst Login = ({ isLogin, setLogin }) => {\r\n  const dispatch = useDispatch();\r\n  const classes = styles();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // //SnackBar operations\r\n  const [messege, setMessege] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const { data } = await axios.post(\"/login\", {\r\n        userName: username,\r\n        password,\r\n      });\r\n      const { id, role } = jwt_decode(data.token);\r\n      localStorage.setItem(\"token\", data.token);\r\n      window.axios.defaults.headers.common[\"Authorization\"] =\r\n        \"Bearer \" + localStorage.getItem(\"token\");\r\n      dispatch(setUser(id, role));\r\n      setLogin(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setMessege(e.response.data);\r\n      handleOpen();\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper style={{ height: \"100vh\" }}>\r\n        <div className={classes.paper}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}\r\n          >\r\n            Laboratory Management System\r\n          </Typography>\r\n          <FormControl>\r\n            <div className={classes.input}>\r\n              <TextField\r\n                name=\"Username\"\r\n                required\r\n                label=\"Username\"\r\n                value={username}\r\n                variant=\"filled\"\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n              <TextField\r\n                required\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                variant=\"filled\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSubmit}\r\n              >\r\n                LOGIN\r\n              </Button>\r\n            </div>\r\n          </FormControl>\r\n        </div>\r\n      </Paper>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {messege}\r\n        </Alert>\r\n      </Snackbar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\proj\\lims-frontend\\src\\Components\\register.js",["101","102","103","104","105","106"],"import React, { useState } from \"react\";\r\nimport {\r\n    TextField,\r\n    Paper,\r\n    makeStyles,\r\n    Button,\r\n   Select,\r\n   MenuItem,\r\n   InputLabel,\r\n   FormControl,\r\n   TableContainer,\r\n   Table,\r\n   TableHead,\r\n   TableRow,\r\n   TableCell,\r\n   TableBody\r\n} from \"@material-ui/core\";\r\nconst styles = makeStyles({\r\n    paper: {\r\n        marginTop: \"10%\",\r\n        marginLeft: \"5%\",\r\n        marginBottom: \"2%\",\r\n        display: \"flex\",\r\n        justifyContent:\"space-between\"\r\n    },\r\n    items:{\r\n     flex:\"1 1 1 1 auto\",\r\n     width:\"20em\"\r\n    },\r\n    button: {\r\n        margin: \"13px 12px 12px 10px\",\r\n    },\r\n    tables: {\r\n        height: \"380px\",\r\n      },\r\n      table: {\r\n        marginTop:\"7%\",\r\n        marginLeft: \"3%\",\r\n      },\r\n});\r\n\r\n\r\nconst Register = () => {\r\n    const classes = styles();\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password , setPassword] = useState(\"\");\r\n    const [role , setRole] = useState(\"\");\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    setRole(event.target.value);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n    return (\r\n        <React.Fragment>\r\n                <div className={classes.paper}>\r\n                    <TextField\r\n                            name=\"Username\"\r\n                            label=\"Username\"\r\n                            // value={username}\r\n                            variant=\"filled\" \r\n                            className={classes.items}\r\n                        />\r\n                        <TextField\r\n                            // type=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            // value={password}\r\n                            variant=\"filled\"\r\n                            className={classes.items}\r\n                        />\r\n                         <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"demo-controlled-open-select-label\">Roles</InputLabel>\r\n                        <Select\r\n                        labelId=\"demo-controlled-open-select-label\"\r\n                        id=\"demo-controlled-open-select\"\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                        onOpen={handleOpen}\r\n                        value={role}\r\n                        onChange={handleChange}\r\n                        className={classes.items}\r\n                        >\r\n                        <MenuItem value=\"staff\">Staff</MenuItem>\r\n                        <MenuItem value=\"inventory_manager\">Inventory Manager</MenuItem>\r\n                        <MenuItem value=\"accountant\">Accountant</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.items}\r\n                        >\r\n                            Register\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.table}>\r\n        <TableContainer className={classes.tables}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>UserName</TableCell>\r\n            <TableCell>Password</TableCell>\r\n            <TableCell>Roles</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            <TableRow>\r\n                <TableCell>Ramesh</TableCell>\r\n                <TableCell>1234</TableCell>\r\n                <TableCell>Inventory Manager</TableCell>\r\n                <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>Ramesh</TableCell>\r\n                <TableCell>1234</TableCell>\r\n                <TableCell>Inventory Manager</TableCell>\r\n                <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>Ramesh</TableCell>\r\n                <TableCell>1234</TableCell>\r\n                <TableCell>Inventory Manager</TableCell>\r\n                <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Edit\r\n                        </Button>\r\n                        <Button\r\n                            className={classes.button}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n            </TableRow>\r\n        </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Register;","D:\\proj\\lims-frontend\\src\\Components\\AddReagent.js",["107","108","109","110"],"import React, { useState} from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  CssBaseline,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody\r\n} from \"@material-ui/core\";\r\n\r\nconst AddReagent=()=>{\r\n    const [reagent , setReagent] = React.useState({\r\n        reagentName:\"\",\r\n        unit:\"\",\r\n        voulme:\"\"\r\n    })\r\n    return(\r\n     <CssBaseline>\r\n      <div style={Styles.inputfiled}>\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          id=\"reagentName\"\r\n          label=\"Name Of Reagent\"\r\n          type=\"string\"\r\n          variant=\"outlined\"\r\n          style={Styles.inputfileds}\r\n        //   value={reagent.reagentName}\r\n        />\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          label=\"Unit Of Reagent\"\r\n          variant=\"outlined\"\r\n        //   value={reagent.unit}\r\n        />\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          label=\"Volume\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n        //   value={reagent.voulme}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={()=>{}}\r\n          style={Styles.button}\r\n        >\r\n          Add\r\n        </Button>\r\n        </div>\r\n        <div style={Styles.table}>\r\n        <TableContainer style={Styles.tables}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Reagent Name</TableCell>\r\n            <TableCell>Unit</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n            <TableRow>\r\n                <TableCell>Hcl</TableCell>\r\n                <TableCell>ml</TableCell>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={()=>{}}\r\n          style={Styles.button}\r\n        >\r\n            Delete\r\n            </Button>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>Hcl</TableCell>\r\n                <TableCell>ml</TableCell>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={()=>{}}\r\n          style={Styles.button}\r\n        >\r\n            Delete\r\n            </Button>\r\n            </TableRow>\r\n        </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        </div>\r\n    </CssBaseline>\r\n    )\r\n}\r\n\r\nconst Styles = {\r\n    inputfiled: {\r\n      marginTop: \"6%\",\r\n      marginLeft: \"5%\",\r\n      marginBottom: \"2%\",\r\n      display: \"flex\",\r\n    },\r\n    inputfileds: {\r\n      marginTop: \"3%\",\r\n      marginLeft: \"3%\",\r\n      marginBottom: \"2%\",\r\n    },\r\n    button: {\r\n      marginTop: \"3%\",\r\n      marginLeft: \"5%\",\r\n      height: 50,\r\n    },\r\n    tables: {\r\n      height: \"380px\",\r\n    },\r\n    table: {\r\n      marginLeft: \"3%\",\r\n    },\r\n  };\r\n\r\nexport default AddReagent;","D:\\proj\\lims-frontend\\src\\Components\\AddTest.js",["111"],"import React from \"react\";\r\nimport \"./myStyle.css\";\r\nimport { makeStyles, Button, TextField, Chip } from \"@material-ui/core\";\r\nimport { forwardRef } from \"react\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport {\r\n  addTestValidator,\r\n  addParameterValidator,\r\n} from \"../validation/validator\";\r\nimport axios from \"../api\";\r\nimport SnackBar from \"./SnackBar\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"1em 2em 2em 2em\",\r\n    margin: \"4em 2em 2em 2em\",\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  position: {\r\n    marginLeft: theme.spacing(8),\r\n    flex: \"1 auto\",\r\n  },\r\n  buttons: {\r\n    marginTop: theme.spacing(6),\r\n    marginLeft: theme.spacing(120),\r\n  },\r\n  button: {\r\n    marginLeft: theme.spacing(6),\r\n    width: \"200px\",\r\n    paddingLeft: \"20px\",\r\n    height: \"3.3em\",\r\n  },\r\n  table: {\r\n    marginTop: \"7%\",\r\n    marginLeft: \"10%\",\r\n    marginRight: \"10%\",\r\n  },\r\n  saveButton: {\r\n    marginLeft: \"90%\",\r\n    marginTop: \"5%\",\r\n    width: \"200px\",\r\n    paddingLeft: \"20px\",\r\n    height: \"3.3em\",\r\n    background: \"#28B463\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nconst AddTest = () => {\r\n  const classes = useStyles();\r\n  const [addTest, setAddTest] = React.useState({\r\n    testName: \"\",\r\n    testAmount: \"\",\r\n  });\r\n  const [addParameter, setAddparameter] = React.useState({\r\n    parameters: \"\",\r\n    units: \"\",\r\n    referenceRange: \"\",\r\n  });\r\n  const [parameter, setParameter] = React.useState([]);\r\n\r\n  const [columns, setColumns] = React.useState([\r\n    { title: \"Parameters\", field: \"parameters\" },\r\n    { title: \"Units\", field: \"units\" },\r\n    { title: \"Reference Range\", field: \"referenceRange\" },\r\n  ]);\r\n  const [message, setMessage] = React.useState();\r\n  const [status, setStatus] = React.useState();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (input) => (event) => {\r\n    setAddTest({ ...addTest, [input]: event.target.value });\r\n  };\r\n\r\n  const handleParameters = (input) => (event) => {\r\n    setAddparameter({ ...addParameter, [input]: event.target.value });\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const testError = addTestValidator(addTest);\r\n    const parameterError = addParameterValidator(addParameter);\r\n    if (testError.error) {\r\n      setMessage(testError.error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (parameterError.error) {\r\n      setMessage(parameterError.error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (!testError.error && !parameterError.error) {\r\n      setParameter([...parameter, addParameter]);\r\n      setAddparameter({ parameters: \"\", units: \"\", referenceRange: \"\" });\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const test = {\r\n        name: addTest.testName,\r\n        amount: addTest.testAmount,\r\n        parameter: parameter,\r\n      };\r\n      console.log(test);\r\n      const res = await axios.post(\"/test/add\", test);\r\n      console.log(res.data);\r\n      setMessage(res.data);\r\n      setStatus(\"success\");\r\n      handleClick();\r\n      setAddTest({\r\n        testName: \"\",\r\n        testAmount: \"\",\r\n      });\r\n      setParameter([]);\r\n    } catch (e) {\r\n      setMessage(e.Error);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <React.Fragment>\r\n        <h4>Test Details</h4>\r\n        <div className={classes.root}>\r\n          <TextField\r\n            label=\"Test Name\"\r\n            variant=\"outlined\"\r\n            value={addTest.testName}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleChange(\"testName\")}\r\n          />\r\n          <TextField\r\n            label=\"Test Amount\"\r\n            variant=\"outlined\"\r\n            value={addTest.testAmount}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"number\"\r\n            onChange={handleChange(\"testAmount\")}\r\n          />\r\n        </div>\r\n        <h4>Bio-Chemical Parameters</h4>\r\n        <div className={classes.root}>\r\n          <TextField\r\n            label=\"Parameter\"\r\n            variant=\"outlined\"\r\n            value={addParameter.parameters}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"parameters\")}\r\n          />\r\n          <TextField\r\n            label=\"unit\"\r\n            variant=\"outlined\"\r\n            value={addParameter.units}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"units\")}\r\n          />\r\n          <TextField\r\n            label=\"Reference Range\"\r\n            variant=\"outlined\"\r\n            value={addParameter.referenceRange}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"referenceRange\")}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n        <div className={classes.table}>\r\n          {parameter.length ? (\r\n            <div>\r\n              <MaterialTable\r\n                showEmptyDataSourceMessage={false}\r\n                title=\"Add tests\"\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                data={parameter}\r\n                options={{\r\n                  search: false,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div style={{ padding: \"0px 10px\" }}>\r\n                        <Chip\r\n                          label=\"Test Name\"\r\n                          color=\"primary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                        <Chip\r\n                          label={addTest.testName}\r\n                          color=\"secondary\"\r\n                          style={{ marginRight: 50 }}\r\n                        />\r\n                        <Chip\r\n                          label=\"Test Amount\"\r\n                          color=\"primary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                        <Chip\r\n                          label={addTest.testAmount}\r\n                          color=\"secondary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                editable={{\r\n                  onRowDelete: (oldData) =>\r\n                    new Promise((resolve, reject) => {\r\n                      try {\r\n                        const name = oldData.parameters;\r\n                        const filterdParameter = parameter.filter(\r\n                          (item) => item.parameters !== name\r\n                        );\r\n                        setParameter([...filterdParameter]);\r\n                        resolve();\r\n                      } catch (e) {\r\n                        console.log(e);\r\n                        reject();\r\n                      }\r\n                    }),\r\n                }}\r\n              />\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.saveButton}\r\n                  onClick={handleSave}\r\n                >\r\n                  save\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <SnackBar\r\n            messege={message}\r\n            open={open}\r\n            handleClose={handleClose}\r\n            status={status}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTest;\r\n","D:\\proj\\lims-frontend\\src\\Components\\AddCutomer.js",["112","113","114","115"],"import React from \"react\";\r\nimport \"./myStyle.css\";\r\nimport {\r\n    makeStyles,\r\n    Select,\r\n    InputLabel,\r\n    Button,\r\n    FormControl,\r\n    TextField,\r\n    MenuItem,\r\n    theme,\r\n    CircularProgress,\r\n    Paper,\r\n    Input,\r\n} from \"@material-ui/core\";\r\nimport {addCustomerValidation} from \"../validation/validator\"\r\nimport axios from \"../api\";\r\nimport SnackBar from \"./SnackBar\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        marginBottom: theme.spacing(7)\r\n        \r\n    },\r\n    position: {\r\n        marginLeft: theme.spacing(8),\r\n        flex : \"1 auto\",\r\n    },\r\n    buttons: {\r\n        marginTop: theme.spacing(6),\r\n        marginLeft: theme.spacing(120)\r\n    },\r\n    button:{\r\n        margin:\"5px 10px 5px 5px\"\r\n    },\r\n    label:{\r\n         marginLeft: theme.spacing(9)\r\n    }\r\n}));\r\n  \r\n\r\nconst AddCutomer = () => {\r\n    const classes = useStyles();\r\n    const [addCustomer,setAddCustomer]=React.useState({\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        age:0,\r\n        address:\"\",\r\n        gender:\"\",\r\n        contactNumber:0,\r\n    });\r\n    const [reset , setReset]= React.useState(Object.assign({},addCustomer));\r\n    const [open, setOpen] = React.useState(false);\r\n    const [message,setMessage]= React.useState(\"\");\r\n    const [status,setStatus]= React.useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleChange = input => event =>{\r\n      setAddCustomer({...addCustomer,[input]:event.target.value});\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n    const handleReset =()=>{\r\n        setAddCustomer({...reset});\r\n    }\r\n\r\n    const handleSubmit = async() =>{\r\n        const {error} = addCustomerValidation(addCustomer);\r\n        if(error){\r\n        setMessage(error.details[0].message);\r\n        setStatus(\"error\");\r\n        handleClick();\r\n    }\r\n        if(!error){\r\n            try{\r\n            const res = await axios.post(\"/customer/add\",addCustomer);\r\n            setMessage(res.data);\r\n            setStatus(\"success\");\r\n            handleClick();\r\n            setAddCustomer({...reset});\r\n            }\r\n            catch(e){\r\n                setMessage(e.Error);\r\n                setStatus(\"error\");\r\n                handleClick();\r\n                console.log(e);\r\n            }\r\n        }\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <Paper\r\n          style={{\r\n            padding: \"1em 2em 2em 2em\",\r\n            margin: \"8em 2em 2em 2em\",\r\n          }}\r\n          elevation={3}\r\n        >\r\n          <h1 align=\"center\">Customer Registration Page</h1>\r\n          <h4>Customer Details</h4>\r\n          <div className={classes.root}>\r\n            <TextField\r\n              name=\"First Name\"\r\n              label=\"First Name\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.firstName}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"firstName\")}\r\n            />\r\n            <TextField\r\n              label=\"Last Name\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.lastName}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"lastName\")}\r\n            />\r\n            <TextField\r\n              label=\"Age\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.age}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"number\"\r\n              onChange={handleChange(\"age\")}\r\n            />\r\n          </div>\r\n          <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel className={classes.label}>Gender</InputLabel>\r\n              <Select\r\n                labelId=\"demo-controlled-open-select-label\"\r\n                id=\"demo-controlled-open-select\"\r\n                value={addCustomer.gender}\r\n                label=\"Gender\"\r\n                className={classes.position}\r\n                style={{ width: 120 }}\r\n                onChange={handleChange(\"gender\")}\r\n              >\r\n                <MenuItem value=\"male\">Male</MenuItem>\r\n                <MenuItem value=\"female\">Female</MenuItem>\r\n                <MenuItem value=\"others\">Others</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <TextField\r\n              label=\"Location\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.address}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"address\")}\r\n            />\r\n            <TextField\r\n              label=\"Contact Number\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.contactNumber}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"number\"\r\n              onChange={handleChange(\"contactNumber\")}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div className={classes.buttons}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ width: \"200px\",paddingLeft:\"20px\" }}\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={handleSubmit}\r\n                >\r\n                  Add\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ width: \"200px\" ,paddingRight:\"20px\"}}\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={handleReset}\r\n                >\r\n                    Reset\r\n                </Button>\r\n            </div>\r\n            </div>\r\n            </Paper>\r\n            </React.Fragment>\r\n            <SnackBar\r\n            messege={message}\r\n            open = {open}\r\n            handleClose={handleClose}\r\n            status={status}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCutomer;\r\n","D:\\proj\\lims-frontend\\src\\Components\\AddSample.js",["116","117","118","119","120"],"D:\\proj\\lims-frontend\\src\\Components\\SnackBar.js",[],"D:\\proj\\lims-frontend\\src\\validation\\validator.js",[],"D:\\proj\\lims-frontend\\src\\api\\index.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":12,"column":3,"nodeType":"127","messageId":"128","endLine":12,"endColumn":11},{"ruleId":"125","severity":1,"message":"129","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"130","line":42,"column":12,"nodeType":"127","messageId":"128","endLine":42,"endColumn":25},{"ruleId":"125","severity":1,"message":"131","line":42,"column":26,"nodeType":"127","messageId":"128","endLine":42,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":98,"column":6,"nodeType":"134","endLine":98,"endColumn":19,"suggestions":"135"},{"ruleId":"125","severity":1,"message":"129","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"136","line":42,"column":12,"nodeType":"127","messageId":"128","endLine":42,"endColumn":24},{"ruleId":"125","severity":1,"message":"137","line":42,"column":25,"nodeType":"127","messageId":"128","endLine":42,"endColumn":40},{"ruleId":"125","severity":1,"message":"129","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":18,"column":10,"nodeType":"127","messageId":"128","endLine":18,"endColumn":18},{"ruleId":"125","severity":1,"message":"138","line":4,"column":5,"nodeType":"127","messageId":"128","endLine":4,"endColumn":10},{"ruleId":"125","severity":1,"message":"139","line":45,"column":12,"nodeType":"127","messageId":"128","endLine":45,"endColumn":20},{"ruleId":"125","severity":1,"message":"140","line":45,"column":22,"nodeType":"127","messageId":"128","endLine":45,"endColumn":33},{"ruleId":"125","severity":1,"message":"141","line":46,"column":12,"nodeType":"127","messageId":"128","endLine":46,"endColumn":20},{"ruleId":"125","severity":1,"message":"142","line":46,"column":23,"nodeType":"127","messageId":"128","endLine":46,"endColumn":34},{"ruleId":"143","severity":1,"message":"144","line":101,"column":29,"nodeType":"145","endLine":101,"endColumn":54},{"ruleId":"125","severity":1,"message":"129","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"146","line":15,"column":12,"nodeType":"127","messageId":"128","endLine":15,"endColumn":19},{"ruleId":"125","severity":1,"message":"147","line":15,"column":22,"nodeType":"127","messageId":"128","endLine":15,"endColumn":32},{"ruleId":"143","severity":1,"message":"144","line":29,"column":11,"nodeType":"145","endLine":29,"endColumn":37},{"ruleId":"125","severity":1,"message":"148","line":103,"column":19,"nodeType":"127","messageId":"128","endLine":103,"endColumn":29},{"ruleId":"125","severity":1,"message":"149","line":11,"column":5,"nodeType":"127","messageId":"128","endLine":11,"endColumn":10},{"ruleId":"125","severity":1,"message":"150","line":12,"column":5,"nodeType":"127","messageId":"128","endLine":12,"endColumn":21},{"ruleId":"125","severity":1,"message":"151","line":14,"column":5,"nodeType":"127","messageId":"128","endLine":14,"endColumn":10},{"ruleId":"125","severity":1,"message":"152","line":53,"column":20,"nodeType":"127","messageId":"128","endLine":53,"endColumn":28},{"ruleId":"125","severity":1,"message":"148","line":93,"column":19,"nodeType":"127","messageId":"128","endLine":93,"endColumn":29},{"ruleId":"125","severity":1,"message":"152","line":123,"column":17,"nodeType":"127","messageId":"128","endLine":123,"endColumn":25},{"ruleId":"132","severity":1,"message":"153","line":134,"column":6,"nodeType":"134","endLine":134,"endColumn":18,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"144","line":289,"column":13,"nodeType":"145","endLine":289,"endColumn":38},{"ruleId":"125","severity":1,"message":"155","line":328,"column":29,"nodeType":"127","messageId":"128","endLine":328,"endColumn":32},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'importReagent' is assigned a value but never used.","'setImportReagent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'hadleFirstLoad'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'sampleFields' is assigned a value but never used.","'setSampleFields' is assigned a value but never used.","'Paper' is defined but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'reagent' is assigned a value but never used.","'setReagent' is assigned a value but never used.","'setColumns' is assigned a value but never used.","'theme' is defined but never used.","'CircularProgress' is defined but never used.","'Input' is defined but never used.","'setReset' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["159"],"'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [hadleFirstLoad, rowsPerPage]",{"range":"164","text":"165"},"Update the dependencies array to be: [fetchSearchResult, inputValue]",{"range":"166","text":"167"},[2625,2638],"[hadleFirstLoad, rowsPerPage]",[4752,4764],"[fetchSearchResult, inputValue]"]