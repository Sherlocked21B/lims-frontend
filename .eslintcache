[{"/home/sherlock/Workdev/Finished Product/lims-frontend/src/index.js":"1","/home/sherlock/Workdev/Finished Product/lims-frontend/src/App.js":"2","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/index.js":"3","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/appBar.js":"4","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddCutomer.js":"5","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ImportReagent.js":"6","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PendingSample.js":"7","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReagent.js":"8","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddTest.js":"9","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllSample.js":"10","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllReagent.js":"11","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/GenerateReport.js":"12","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/report.js":"13","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/EditTest.js":"14","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddSample.js":"15","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllEquipment.js":"16","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/HandleEquipment.js":"17","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/login.js":"18","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddEquipment.js":"19","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffRoute.js":"20","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllTest.js":"21","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryMRoute.js":"22","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedAdminRoute.js":"23","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffAccount.js":"24","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryStaff.js":"25","/home/sherlock/Workdev/Finished Product/lims-frontend/src/action/setUser.js":"26","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/register.js":"27","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/authReducer.js":"28","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SnackBar.js":"29","/home/sherlock/Workdev/Finished Product/lims-frontend/src/validation/validator.js":"30","/home/sherlock/Workdev/Finished Product/lims-frontend/src/api/index.js":"31","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddAnimal.js":"32","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReference.js":"33","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/testRequestForm.js":"34","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SearchBilling.js":"35","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/Bill.js":"36","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/Statement.js":"37","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PrintStatement.js":"38"},{"size":562,"mtime":1613919733576,"results":"39","hashOfConfig":"40"},{"size":4279,"mtime":1623583080283,"results":"41","hashOfConfig":"40"},{"size":168,"mtime":1615964985100,"results":"42","hashOfConfig":"40"},{"size":7438,"mtime":1623583080283,"results":"43","hashOfConfig":"40"},{"size":9799,"mtime":1623580602353,"results":"44","hashOfConfig":"40"},{"size":4795,"mtime":1619686676157,"results":"45","hashOfConfig":"40"},{"size":6016,"mtime":1622726974829,"results":"46","hashOfConfig":"40"},{"size":7466,"mtime":1620385862280,"results":"47","hashOfConfig":"40"},{"size":8912,"mtime":1621427858899,"results":"48","hashOfConfig":"40"},{"size":10458,"mtime":1623324262027,"results":"49","hashOfConfig":"40"},{"size":6506,"mtime":1620555123157,"results":"50","hashOfConfig":"40"},{"size":13332,"mtime":1622726974829,"results":"51","hashOfConfig":"40"},{"size":11013,"mtime":1622726974829,"results":"52","hashOfConfig":"40"},{"size":9395,"mtime":1621427858899,"results":"53","hashOfConfig":"40"},{"size":14550,"mtime":1623583080283,"results":"54","hashOfConfig":"40"},{"size":6538,"mtime":1620555184740,"results":"55","hashOfConfig":"40"},{"size":5853,"mtime":1619686600990,"results":"56","hashOfConfig":"40"},{"size":3477,"mtime":1620385862284,"results":"57","hashOfConfig":"40"},{"size":7374,"mtime":1620385862280,"results":"58","hashOfConfig":"40"},{"size":751,"mtime":1617278437096,"results":"59","hashOfConfig":"40"},{"size":9975,"mtime":1621253067471,"results":"60","hashOfConfig":"40"},{"size":793,"mtime":1617278437096,"results":"61","hashOfConfig":"40"},{"size":712,"mtime":1617278437099,"results":"62","hashOfConfig":"40"},{"size":839,"mtime":1617278437096,"results":"63","hashOfConfig":"40"},{"size":830,"mtime":1617278437096,"results":"64","hashOfConfig":"40"},{"size":99,"mtime":1615964985097,"results":"65","hashOfConfig":"40"},{"size":7909,"mtime":1620385862284,"results":"66","hashOfConfig":"40"},{"size":181,"mtime":1615964985097,"results":"67","hashOfConfig":"40"},{"size":492,"mtime":1621240216266,"results":"68","hashOfConfig":"40"},{"size":3911,"mtime":1623235690134,"results":"69","hashOfConfig":"40"},{"size":258,"mtime":1620379265115,"results":"70","hashOfConfig":"40"},{"size":9801,"mtime":1621240493349,"results":"71","hashOfConfig":"40"},{"size":10637,"mtime":1622726974829,"results":"72","hashOfConfig":"40"},{"size":14617,"mtime":1623580730622,"results":"73","hashOfConfig":"40"},{"size":107,"mtime":1622364828684,"results":"74","hashOfConfig":"40"},{"size":4687,"mtime":1623332359348,"results":"75","hashOfConfig":"40"},{"size":7383,"mtime":1623583080283,"results":"76","hashOfConfig":"40"},{"size":2640,"mtime":1623583080283,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1ibq1we",{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"80"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"80"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sherlock/Workdev/Finished Product/lims-frontend/src/index.js",[],["175","176"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/App.js",["177","178"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/index.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/appBar.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddCutomer.js",["179","180","181","182","183"],"import React, { forwardRef } from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tSelect,\n\tInputLabel,\n\tButton,\n\tFormControl,\n\tTextField,\n\tMenuItem,\n} from \"@material-ui/core\";\nimport { Redirect } from \"react-router-dom\";\nimport { addCustomerValidation } from \"../validation/validator\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable, { MTableHeader } from \"material-table\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tmarginBottom: theme.spacing(7),\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: \"1 auto\",\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmargin: \"5px 10px 5px 5px\",\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n}));\n\nconst columns = [\n\t{ title: \"First Name\", field: \"firstName\" },\n\t{\n\t\ttitle: \"Last Name\",\n\t\tfield: \"lastName\",\n\t},\n\t{ title: \"Email\", field: \"email\" },\n\t{ title: \"Address\", field: \"address\" },\n\t{\n\t\ttitle: \"Gender\",\n\t\tfield: \"gender\",\n\t\tlookup: { male: \"male\", female: \"female\", others: \"others\" },\n\t},\n];\nconst AddCutomer = (props) => {\n\tconst classes = useStyles();\n\tconst [addCustomer, setAddCustomer] = React.useState({\n\t\tfirstName: \"\",\n\t\tlastName: \"\",\n\t\temail: \"\",\n\t\taddress: \"\",\n\t\tgender: \"\",\n\t\tcontactNumber: \"\",\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, addCustomer));\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [query, setQuery] = React.useState(\"\");\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/customer/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddCustomer({ ...addCustomer, [input]: event.target.value });\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetAddCustomer({ ...reset });\n\t};\n\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addCustomerValidation(addCustomer);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post(\"/customer/add\", addCustomer);\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t\tprops.history.push(\"/addSample\");\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tpadding: \"1em 2em 2em 2em\",\n\t\t\t\t\t\tmargin: \"8em 2em 2em 2em\",\n\t\t\t\t\t\t// opacity: \"50%\"\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<h1 align=\"center\">Customer Registration Page</h1>\n\t\t\t\t\t<h4>Customer Details</h4>\n\t\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tname=\"First Name\"\n\t\t\t\t\t\t\tlabel=\"First Name\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.firstName}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"firstName\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Last Name\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.lastName}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"lastName\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.email}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\tonChange={handleChange(\"email\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t\t\t<InputLabel className={classes.label}>Gender</InputLabel>\n\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\tlabelId=\"demo-controlled-open-select-label\"\n\t\t\t\t\t\t\t\tid=\"demo-controlled-open-select\"\n\t\t\t\t\t\t\t\tvalue={addCustomer.gender}\n\t\t\t\t\t\t\t\tlabel=\"Gender\"\n\t\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\t\tstyle={{ width: 120 }}\n\t\t\t\t\t\t\t\tonChange={handleChange(\"gender\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<MenuItem value=\"male\">Male</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value=\"female\">Female</MenuItem>\n\t\t\t\t\t\t\t\t<MenuItem value=\"others\">Others</MenuItem>\n\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Location\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.address}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\t\tonChange={handleChange(\"address\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Contact Number\"\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tvalue={addCustomer.contactNumber}\n\t\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\tonChange={handleChange(\"contactNumber\")}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className={classes.buttons}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tstyle={{ width: \"200px\", paddingLeft: \"20px\" }}\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tstyle={{ width: \"200px\", paddingRight: \"20px\" }}\n\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tonClick={handleReset}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div style={Styles.table}>\n\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\ttitle=\"Customers\"\n\t\t\t\t\t\t\tdata={rows}\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t\t\theaderStyle: { background: \"transparent\" },\n\t\t\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t\t\t`/customer/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t`/customer/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tlocalization={{\n\t\t\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\t\t\tsearchPlaceholder: \"Search Customer\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tisLoading={loading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\nconst Styles = {\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginButton: \"20%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n};\n\nexport default AddCutomer;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ImportReagent.js",["184","185"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { importReagentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nconst styles = makeStyles({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tmargin: \"30\",\n\t\tpadding: \"5\",\n\t},\n\tinput: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tjustifyContent: \"space-around\",\n\t},\n\titems: {\n\t\theight: \"80%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"2rem\",\n\t},\n\tspace: {\n\t\tmarginTop: \"2rem\",\n\t},\n});\n\nconst ImportReagent = () => {\n\tconst classes = styles();\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [volume, setVolume] = useState(0);\n\tconst [unit, setUnit] = useState(\"Select Reagent\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetUnit(\"Select Reagent\");\n\t\tsetVolume(0);\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = importReagentValidator({\n\t\t\treagentName: value,\n\t\t\tvolume: volume,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axiosi.put(`/reagent/import/${value._id}`, {\n\t\t\t\t\tvolume: volume,\n\t\t\t\t});\n\t\t\t\tsetMessage(data);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\t// const handleChange = (event) => {\n\t//     setRole(event.target.value);\n\t//   };\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{ height: \"100vh\" }}>\n\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t<div className={classes.input}>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\t\t\tsetUnit(newValue.unit);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetUnit(\"Select Reagent\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tlabel=\"Reagent Name\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\t\t\t// defaultValue=\"Select Reagent\"\n\t\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={(event) => setVolume(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImportReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PendingSample.js",["186","187","188","189","190"],"import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport TableHead from '@material-ui/core/TableHead';\nimport axios from '../api';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n}));\n\nconst columns = [\n\t,\n\t// { id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\n\n\t// { id: \"\", label: \"Test Name\", minWidth: 100 },\n\t// {\n\t// \tid: \"sampleSubmittedBy\",\n\t// \tlabel: \"Sample Submitted By\",\n\t// \tminWidth: 170,\n\t// \t// align: 'right',\n\t// \t// format: (value) => value.toFixed(2),\n\t// },\n\n\t{ label: 'Sample Number', id: 'sampleNo' },\n\t{\n\t\tid: 'customerName',\n\t\tlabel: 'Customer Name',\n\t},\n\t{\n\t\tlabel: 'Pet Name',\n\t\tid: 'petName',\n\t},\n\t{\n\t\tid: 'samplingDate',\n\t\tlabel: 'Sampling Date',\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{ label: 'Category', id: 'category', editable: 'never' },\n\t{ label: 'Animal', id: 'animal', editable: 'never' },\n\t{\n\t\tlabel: 'Sample submitted By',\n\t\tid: 'sampleSubmittedBy',\n\t\talign: 'right',\n\t},\n\t{ label: 'Age', id: 'age' },\n\t{ label: 'Breed', id: 'breed' },\n\t{\n\t\tlabel: 'Gender',\n\t\tid: 'gender',\n\t},\n\t{\n\t\tid: 'status',\n\t\tlabel: 'Status',\n\t\tminWidth: 100,\n\t\tformat: (value) =>\n\t\t\tvalue ? (\n\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t) : (\n\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t),\n\t},\n\t{\n\t\tid: 'action',\n\t\tlabel: '',\n\t},\n];\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: '100%',\n\t\tmarginTop: '7%',\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n});\n\nexport default function PendingSample(props) {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n\tconst token = localStorage.getItem('token');\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axios.get('/sample/paginate', {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === 'rtl' ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === 'rtl' ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axios.get('/sample/paginate', {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<TableContainer className={classes.container}>\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</TableRow>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{rows\n\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\tif (column.id === 'action') {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.history.push({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathname: '/generateReport',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate: row,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReagent.js",["191","192","193","194","195","196"],"import React, { useState, forwardRef } from 'react';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { TextField, Button, CssBaseline } from '@material-ui/core';\nimport axios from '../api';\nimport { addReagentValidator } from '../validation/validator.js';\nimport SnackBar from './SnackBar';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst columns = [\n\t{ title: 'Reagent', field: 'reagentName' },\n\t{\n\t\ttitle: 'Unit',\n\t\tfield: 'unit',\n\t},\n\t{ title: 'In Stock', field: 'volume', type: 'numeric' },\n];\nconst AddReagent = () => {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [reagent, setReagent] = React.useState({\n\t\treagentName: '',\n\t\tunit: '',\n\t\tvolume: '',\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, reagent));\n\tconst [query, setQuery] = React.useState('');\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/reagent/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetReagent({ ...reset });\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetReagent({ ...reagent, [input]: event.target.value });\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addReagentValidator(reagent);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post('/reagent/add', { ...reagent });\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tconsole.log(rows);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e.response);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\treturn (\n\t\t<CssBaseline>\n\t\t\t<div style={Styles.inputfiled}>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tid=\"reagentName\"\n\t\t\t\t\tlabel=\"Name Of Reagent\"\n\t\t\t\t\ttype=\"string\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tvalue={reagent.reagentName}\n\t\t\t\t\tonChange={handleChange('reagentName')}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Unit Of Reagent\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={reagent.unit}\n\t\t\t\t\tonChange={handleChange('unit')}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={reagent.volume}\n\t\t\t\t\tonChange={handleChange('volume')}\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\tstyle={Styles.button}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div style={Styles.table}>\n\t\t\t\t<MaterialTable\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\ttoolbar: (props) => (\n\t\t\t\t\t\t\t<div style={{ background: 'transparent' }}>\n\t\t\t\t\t\t\t\t<MTableToolbar {...props} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t),\n\t\t\t\t\t}}\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\ttitle=\"Reagents\"\n\t\t\t\t\tdata={rows}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t}}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t}}\n\t\t\t\t\teditable={{\n\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t`/reagent/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\treq\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t`/reagent/delete/${oldData._id}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t}}\n\t\t\t\t\tlocalization={{\n\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\tsearchPlaceholder: 'Search Reagent',\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tisLoading={loading}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</CssBaseline>\n\t);\n};\n\nconst Styles = {\n\tinputfiled: {\n\t\tmarginTop: '6%',\n\t\tmarginLeft: '5%',\n\t\tdisplay: 'flex',\n\t},\n\tinputfileds: {\n\t\tmarginTop: '3%',\n\t\tmarginLeft: '3%',\n\t},\n\tbutton: {\n\t\tmarginTop: '3%',\n\t\tmarginLeft: '5%',\n\t\theight: 50,\n\t},\n\ttables: {\n\t\theight: '380px',\n\t},\n\ttable: {\n\t\tmarginTop: '5%',\n\t\tmarginButton: '20%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n};\n\nexport default AddReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddTest.js",["197"],"import React from 'react';\nimport './myStyle.css';\nimport { makeStyles, Button, TextField, Chip } from '@material-ui/core';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport {\n\taddTestValidator,\n\taddParameterValidator,\n} from '../validation/validator';\nimport axios from '../api';\nimport SnackBar from './SnackBar';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\tbody: {\n\t\tpadding: '1em 2em 2em 2em',\n\t\t// margin: \"4em 2em 2em 2em\",\n\t\tmarginTop: '7em',\n\t\tmarginRight: '2em',\n\t\tmarginLeft: '2em',\n\t},\n\troot: {\n\t\tdisplay: 'flex',\n\t\tmarginTop: '1em',\n\t\tmarginBottom: '2em',\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: '1 auto',\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmarginLeft: theme.spacing(6),\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t},\n\ttable: {\n\t\tmarginTop: '7%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n\tsaveButton: {\n\t\tmarginLeft: '90%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t\tbackground: '#28B463',\n\t\tcolor: 'white',\n\t},\n}));\n\nconst AddTest = () => {\n\tconst classes = useStyles();\n\tconst [addTest, setAddTest] = React.useState({\n\t\ttestName: '',\n\t});\n\tconst [isPackage, setIsPackage] = React.useState(false);\n\tconst [addParameter, setAddparameter] = React.useState({\n\t\tparameters: '',\n\t\tunits: '',\n\t\tcost: 0,\n\t});\n\tconst [parameter, setParameter] = React.useState([]);\n\n\tconst [columns, setColumns] = React.useState([\n\t\t{ title: 'Parameters', field: 'parameters' },\n\t\t{ title: 'Units', field: 'units' },\n\t\t{ title: 'Cost', field: 'cost' },\n\t]);\n\tconst [message, setMessage] = React.useState();\n\tconst [status, setStatus] = React.useState();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddTest({ ...addTest, [input]: event.target.value });\n\t};\n\n\tconst handlePackageChange = (event) => {\n\t\tsetIsPackage(event.target.checked);\n\t};\n\n\tconst handleParameters = (input) => (event) => {\n\t\tsetAddparameter({ ...addParameter, [input]: event.target.value });\n\t};\n\n\tconst handleAdd = () => {\n\t\tconst testError = addTestValidator(addTest);\n\t\tconst parameterError = addParameterValidator(addParameter);\n\t\tif (testError.error) {\n\t\t\tsetMessage(testError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (parameterError.error) {\n\t\t\tsetMessage(parameterError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!testError.error && !parameterError.error) {\n\t\t\tsetParameter([...parameter, addParameter]);\n\t\t\tsetAddparameter({ parameters: '', units: '', cost: 0 });\n\t\t}\n\t};\n\n\tconst handleSave = async () => {\n\t\ttry {\n\t\t\tconst test = {\n\t\t\t\tname: addTest.testName,\n\t\t\t\tparameter: parameter,\n\t\t\t\tpackage: isPackage,\n\t\t\t};\n\t\t\tconsole.log(test);\n\t\t\tconst res = await axios.post('/test/add', test);\n\t\t\tconsole.log(res.data);\n\t\t\tsetMessage(res.data);\n\t\t\tsetStatus('success');\n\t\t\thandleClick();\n\t\t\tsetAddTest({\n\t\t\t\ttestName: '',\n\t\t\t});\n\t\t\tsetParameter([]);\n\t\t\tsetIsPackage(false);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.Error);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.body}>\n\t\t\t<React.Fragment>\n\t\t\t\t<h4>Test Details</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addTest.testName}\n\t\t\t\t\t\tstyle={{ width: '36%' }}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange('testName')}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tchecked={isPackage}\n\t\t\t\t\t\t\t\tonChange={handlePackageChange}\n\t\t\t\t\t\t\t\tname=\"checkedP\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel=\"Package\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<h4>Bio-Chemical Parameters</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Parameter\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.parameters}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('parameters')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.units}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('units')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Cost\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.cost}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonChange={handleParameters('cost')}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={handleAdd}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.table}>\n\t\t\t\t\t{parameter.length ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\t\ttitle=\"Add tests\"\n\t\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\tdata={parameter}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\t\tToolbar: (props) => (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<MTableToolbar {...props} />\n\t\t\t\t\t\t\t\t\t\t\t<div style={{ padding: '0px 10px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={addTest.testName}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 50 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconst name = oldData.parameters;\n\t\t\t\t\t\t\t\t\t\t\t\tconst filterdParameter = parameter.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(item) => item.parameters !== name\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tsetParameter([...filterdParameter]);\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tsave\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t</div>\n\t);\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllSample.js",["198","199","200","201","202","203","204"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n\tTextField,\n\tmakeStyles,\n\tuseTheme,\n\tButton,\n\tTableContainer,\n\tTable,\n\tTableRow,\n\tTableCell,\n\tTableBody,\n\tChip,\n\tIconButton,\n\tTablePagination,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t\tmarginBottom: \"2%\",\n\t\tmarginRight: \"3%\",\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t},\n\titems: {\n\t\tflex: \"1 1 1 1 auto\",\n\t\twidth: \"20em\",\n\t\tmarginLeft: \"10px\",\n\t},\n\tbutton: {\n\t\tmargin: \"13px 12px 12px 10px\",\n\t\tbackgroundColor: \"#27E208\",\n\t},\n\ttables: {\n\t\theight: \"500px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginLeft: \"3%\",\n\t},\n});\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n}));\n\nconst columns = [\n\t{ label: \"Sample Number\", id: \"sampleNo\" },\n\t{\n\t\tid: \"customerName\",\n\t\tlabel: \"Customer Name\",\n\t},\n\t{\n\t\tlabel: \"Pet Name\",\n\t\tid: \"petName\",\n\t},\n\t{\n\t\tid: \"samplingDate\",\n\t\tlabel: \"Sampling Date\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{ label: \"Category\", id: \"category\", editable: \"never\" },\n\t{ label: \"Animal\", id: \"animal\", editable: \"never\" },\n\t{\n\t\tlabel: \"Sample submitted By\",\n\t\tid: \"sampleSubmittedBy\",\n\t\talign: \"right\",\n\t},\n\t{ label: \"Age\", id: \"age\" },\n\t{ label: \"Breed\", id: \"breed\" },\n\t{\n\t\tlabel: \"Gender\",\n\t\tid: \"gender\",\n\t},\n\t{\n\t\tid: \"status\",\n\t\tlabel: \"Status\",\n\t\tminWidth: 100,\n\t\tformat: (value) =>\n\t\t\tvalue ? (\n\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t) : (\n\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t),\n\t},\n\t{ id: \"Action\", label: \"Report\", minWidth: 100 },\n\t{ id: \"Bill\", label: \"Bill\", minWidth: 100 },\n];\n\nconst AllSample = (props) => {\n\tconst classes = styles();\n\tconst [sampleFields, setSampleFields] = React.useState({\n\t\t// date: \"\",\n\t\tsampleId: \"\",\n\t});\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n\tconst [options, setOptions] = useState([]);\n\t// const [value, setValue] = React.useState({});\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [petInputValue, setPetInputValue] = React.useState(\"\");\n\tconst [customer, setCustomer] = React.useState({\n\t\t_id: \"\",\n\t});\n\tconst [pet, setPet] = React.useState({\n\t\tpetName: \"\",\n\t});\n\tconst [petOptions, setPetOptions] = useState([]);\n\tlet petCancelToken = useRef(\"\");\n\tlet cancelToken = useRef(\"\");\n\n\tReact.useEffect(() => {\n\t\thandleFirstload();\n\t}, [rowsPerPage]);\n\n\tReact.useEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\tif (petInputValue) {\n\t\t\tfetchSearchPetResult();\n\t\t} else {\n\t\t\tsetPetOptions([]);\n\t\t}\n\t}, [petInputValue]);\n\n\tconst handleFirstload = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: page,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tPet: pet.petName,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tsetTotal(data.total);\n\t\t\tconsole.log(\"data\");\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/customer/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchSearchPetResult = async () => {\n\t\tif (petCancelToken.current) {\n\t\t\tpetCancelToken.current.cancel();\n\t\t}\n\t\tpetCancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/sample/search/${petInputValue}`, {\n\t\t\t\tcancelToken: petCancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetPetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangeInput = (input) => (event) => {\n\t\tsetSampleFields({ ...sampleFields, [input]: event.target.value });\n\t};\n\n\tconst handleSearch = async () => {\n\t\ttry {\n\t\t\tlet { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: 0,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tPet: pet.petName,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetTotal(data.total);\n\t\t\tsetPage(0);\n\t\t\tsetRows([...data.rows]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst openReport = (row) => {\n\t\tprops.history.push({ pathname: \"/generateReport\", state: row });\n\t};\n\n\tconst openBill = (row) => {\n\t\tprops.history.push({ pathname: \"/generateBill\", state: row });\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tpage: page + 1,\n\t\t\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\t\t\tPet: pet.petName,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) =>\n\t\t\t\t\t\toption.firstName +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\toption.lastName +\n\t\t\t\t\t\t\"(\" +\n\t\t\t\t\t\toption.contactNumber +\n\t\t\t\t\t\t\")\"\n\t\t\t\t\t}\n\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tnewValue\n\t\t\t\t\t\t\t? setCustomer({ _id: newValue._id })\n\t\t\t\t\t\t\t: setCustomer({ _id: \"\" });\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\tlabel=\"Customer Name\"\n\t\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.petName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\tinputValue={petInputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tnewValue\n\t\t\t\t\t\t\t? setPet({ petName: newValue.petName })\n\t\t\t\t\t\t\t: setPet({ petName: \"\" });\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetPetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={petOptions}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\tlabel=\"Pet Name\"\n\t\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t\t{/* <TextField\n\t\t\t\t\tname=\"Date\"\n\t\t\t\t\tvalue={sampleFields.date}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"date\")}\n\t\t\t\t/> */}\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"SampleId\"\n\t\t\t\t\tlabel=\"Sample Id\"\n\t\t\t\t\tvalue={sampleFields.sampleId}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"sampleId\")}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonClick={handleSearch}\n\t\t\t\t>\n\t\t\t\t\t<SearchIcon />\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer className={classes.tables}>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((item) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\talign={item.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: item.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows\n\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (column.id != \"Action\" && column.id != \"Bill\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => openReport(row)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tReport\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => openBill(row)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tBill\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t\t<TablePagination\n\t\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\tcount={total}\n\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\tpage={page}\n\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default AllSample;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllReagent.js",["205","206","207","208","209","210"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, Chip } from \"@material-ui/core\";\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n\n\tcontainer: {\n\t\tmarginTop: \"20%\",\n\t},\n}));\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: \"7%\",\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t},\n\ttable: { marginTop: \"1%\" },\n});\n\nexport default function AllReagent() {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [value, setValue] = React.useState(\"\");\n\tconst [options, setOptions] = React.useState([]);\n\tconst [columns, setColumns] = React.useState([\n\t\t{ id: \"reagentName\", label: \"Reagent Name\", minWidth: 170 },\n\t\t{\n\t\t\tid: \"unit\",\n\t\t\tlabel: \"Unit\",\n\t\t},\n\t\t{\n\t\t\tid: \"volume\",\n\t\t\tlabel: \"Volume\",\n\t\t\tminWidth: 100,\n\t\t\tformat: (value) => {\n\t\t\t\treturn value > 20 ? (\n\t\t\t\t\t<Chip label={value} color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip label={value} color=\"secondary\" style={{ marginRight: 5 }} />\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t]);\n\tlet cancelToken = useRef(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/reagent\", {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/reagent\", {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\thadleFirstLoad();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetTotal(1);\n\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\tsetRows([newValue]);\n\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Reagent Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.length\n\t\t\t\t\t\t\t\t? rows\n\t\t\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/GenerateReport.js",["211","212","213","214","215","216","217","218","219","220"],"import React, { useState, useRef, useEffect } from 'react';\nimport './myStyle.css';\nimport { TextField, Paper, makeStyles, Button, Chip } from '@material-ui/core';\nimport axios from 'axios';\nimport axiosi from '../api';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { importReagentValidator } from '../validation/validator';\nimport SnackBar from './SnackBar';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport Popover from '@material-ui/core/Popover';\nimport Typography from '@material-ui/core/Typography';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tmarginBottom: theme.spacing(5),\n\t\tmarginTop: theme.spacing(6),\n\t\tjustifyContent: 'space-between',\n\t\tmarginleft: theme.spacing(6),\n\t\twidth: '70%',\n\t},\n\tpaper: {\n\t\tpadding: theme.spacing(1),\n\t},\n\tpopover: {\n\t\tpointerEvents: 'none',\n\t},\n\tposition: {\n\t\t// marginLeft: theme.spacing(4),\n\t\tflex: '1 1 1 auto',\n\t\twidth: '80%',\n\t\tmarginRight: theme.spacing(4),\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmargin: '5px 10px 5px 5px',\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n\tsaveButton: {\n\t\tmarginLeft: '3%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t\tbackground: '#28B463',\n\t\tcolor: 'white',\n\t},\n}));\n\nconst columns = [\n\t{ title: 'Reagent Name', field: 'reagentName' },\n\t{ title: 'Unit', field: 'unit' },\n\t{ title: 'Volume', field: 'volume' },\n];\n\nconst GenerateReport = (props) => {\n\tconst classes = useStyles();\n\tconst data = props.location.state;\n\tconst [customerDetails, SetCustomerDetails] = React.useState({\n\t\tname: data ? data.customerName : '',\n\t\tsample: data ? data.sampleNo : '',\n\t\tsampleId: data ? data._id : '',\n\t});\n\tlet cancelToken = useRef('');\n\tconst [alltest, setAllTest] = React.useState([]);\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\tconst [sampleType, setSampleType] = React.useState([]);\n\tconst autoC = useRef(null);\n\tconst [tests, setTests] = useState([]);\n\tconst [volume, setVolume] = useState(0);\n\tconst [unit, setUnit] = useState('Select Reagent');\n\tconst [inputValue, setInputValue] = React.useState('');\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [tableData, setTableData] = React.useState([]);\n\tconst [testrequest, setTestRequest] = useState([]);\n\n\tconst handlePopoverOpen = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handlePopoverClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tconst opens = Boolean(anchorEl);\n\n\tuseEffect(() => {\n\t\tfetchUsedReagent();\n\t\tfetchTestName();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleSampleType = (sampletypes) => {\n\t\tlet sample = [];\n\t\tsampletypes.map((item) => {\n\t\t\titem.checked && sample.push(item.name);\n\t\t});\n\t\tsetSampleType(sample);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName('MuiAutocomplete-clearIndicator')[0]\n\t\t\t.click();\n\t\tsetUnit('Select Reagent');\n\t\tsetVolume(0);\n\t};\n\n\tconst fetchTestName = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\n\t\t\t\t`/testRequest/find/${customerDetails.sampleId}`\n\t\t\t);\n\t\t\thandleSampleType(data[0].sampleType);\n\t\t\tsetTestRequest(data);\n\t\t\tsetAllTest(data[0].toTest.map((test) => test.testName));\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchUsedReagent = async () => {\n\t\ttry {\n\t\t\tconst usedReagents = await axiosi.get(\n\t\t\t\t`/usedReagent/find/${customerDetails.sampleId}`\n\t\t\t);\n\t\t\tsetTableData([...usedReagents.data]);\n\t\t\tconsole.log(usedReagents);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleAdd = async () => {\n\t\tconst { error } = importReagentValidator({\n\t\t\treagentName: value,\n\t\t\tvolume: volume,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\tif (volume <= value.volume) {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await axiosi.post('/usedReagent/add', {\n\t\t\t\t\t\treagentName: value.reagentName,\n\t\t\t\t\t\tunit: unit,\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t\tsampleNo: customerDetails.sample,\n\t\t\t\t\t\tsampleId: customerDetails.sampleId,\n\t\t\t\t\t\treagentId: value._id,\n\t\t\t\t\t});\n\t\t\t\t\tconst respose = await axiosi.put(`/reagent/use/${value._id}`, {\n\t\t\t\t\t\tvolume: volume,\n\t\t\t\t\t});\n\t\t\t\t\tsetTableData([...tableData, { ...res.data.reagent }]);\n\t\t\t\t\thandleReset();\n\t\t\t\t\tsetMessage('Reagent exported Sucessfully');\n\t\t\t\t\tsetStatus('success');\n\t\t\t\t\thandleClick();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\tsetStatus('error');\n\t\t\t\t\thandleClick();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetMessage('Insufficiant Volume');\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleOpenReport = () => {\n\t\tprops.history.push({ pathname: '/report', state: { ...data, tests } });\n\t};\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\tpadding: '1em 2em 2em 2em',\n\t\t\t\t\tmargin: '8em 2em 2em 2em',\n\t\t\t\t\t// height: \"100em\",\n\t\t\t\t}}\n\t\t\t\t// elevation={3}\n\t\t\t>\n\t\t\t\t<div>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"Customer Name\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={customerDetails.name}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: '4em' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip label=\"Pet Name\" color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={data.petName}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: '4em' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel=\"Sample Type\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={sampleType.toString()}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: '4em' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Chip label=\"Sample No\" color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t\t<Chip\n\t\t\t\t\t\tlabel={customerDetails.sample}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ marginTop: '2em' }}>\n\t\t\t\t\t<Chip label=\"Test Name\" color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t\t<Chip\n\t\t\t\t\t\taria-owns={open ? 'mouse-over-popover' : undefined}\n\t\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\t\tonMouseEnter={handlePopoverOpen}\n\t\t\t\t\t\tonMouseLeave={handlePopoverClose}\n\t\t\t\t\t\tlabel={alltest.toString()}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tstyle={{ marginRight: '4em' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Popover\n\t\t\t\t\t\tid=\"mouse-over-popover\"\n\t\t\t\t\t\tclassName={classes.popover}\n\t\t\t\t\t\tclasses={{\n\t\t\t\t\t\t\tpaper: classes.paper,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\topen={opens}\n\t\t\t\t\t\tanchorEl={anchorEl}\n\t\t\t\t\t\tanchorOrigin={{\n\t\t\t\t\t\t\tvertical: 'bottom',\n\t\t\t\t\t\t\thorizontal: 'left',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttransformOrigin={{\n\t\t\t\t\t\t\tvertical: 'top',\n\t\t\t\t\t\t\thorizontal: 'left',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonClose={handlePopoverClose}\n\t\t\t\t\t\tdisableRestoreFocus\n\t\t\t\t\t>\n\t\t\t\t\t\t{testrequest.length > 0 &&\n\t\t\t\t\t\t\ttestrequest[0].toTest.map((item) => {\n\t\t\t\t\t\t\t\tlet testName = `${item.testName}:`;\n\t\t\t\t\t\t\t\titem.parameter.map(({ parameters, ...rest }, index) => {\n\t\t\t\t\t\t\t\t\tindex === item.parameter.length - 1\n\t\t\t\t\t\t\t\t\t\t? (testName += `${parameters}`)\n\t\t\t\t\t\t\t\t\t\t: (testName += `${parameters}, `);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn <Typography>{testName}</Typography>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</Popover>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\tsetUnit(newValue.unit);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetUnit('Select Reagent');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tlabel=\"Reagent Name\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tclassName={classes.postion}\n\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tonChange={(event) => setVolume(event.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={handleAdd}\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t{tableData.length ? (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\t\ttitle=\"Reagent Used\"\n\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\t\tdata={tableData}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(oldData._id);\n\t\t\t\t\t\t\t\t\t\t\t\tlet { volume, reagentId } = oldData;\n\t\t\t\t\t\t\t\t\t\t\t\tconst del = await axiosi.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`/usedReagent/delete/${oldData._id}`\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tconst inc = await axiosi.put(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`/reagent/import/${reagentId}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvolume,\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...tableData];\n\t\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\t\tsetTableData([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\t\tsetMessage('Used Reagent Deleted Sucessfully');\n\t\t\t\t\t\t\t\t\t\t\t\tsetStatus('success');\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick();\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\t\t\t\t\t\t\t\tsetStatus('error');\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick();\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\t\t\t\tonClick={handleOpenReport}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default GenerateReport;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/report.js",["221","222","223","224","225","226","227","228","229","230"],"import React, { useState, useRef, useEffect } from 'react';\nimport './myStyle.css';\nimport {\n\tmakeStyles,\n\tButton,\n\tTypography,\n\tTextareaAutosize,\n\tCheckbox,\n\tFormControlLabel,\n} from '@material-ui/core';\nimport axios from '../api';\nimport SnackBar from './SnackBar';\nimport MaterialTable from 'material-table';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\ttextArea: {\n\t\tmarginTop: theme.spacing(5),\n\t\twidth: '100%',\n\t\tbackground: 'transparent',\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tcheckbox: {\n\t\tmarginLeft: '85%',\n\t},\n\tbutton: {\n\t\tmargin: '5px 10px 5px 5px',\n\t},\n\tlabel: {\n\t\tmarginLeft: theme.spacing(9),\n\t},\n\tsaveButton: {\n\t\tmarginLeft: '3%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t\tbackground: '#28B463',\n\t\tcolor: 'white',\n\t},\n\tbackButton: {\n\t\tmarginLeft: '3%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t},\n\tprintButton: {\n\t\tmarginLeft: '50em',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t},\n\tTypo: {\n\t\tmarginRight: '5',\n\t\tmarginBottom: '5',\n\t},\n\tpaper: {\n\t\tpadding: '1em 2em 2em 2em',\n\t\tmargin: '8em 2em 2em 2em',\n\t\theight: '95em',\n\t},\n\tparent: {\n\t\tposition: 'relative',\n\t\twidth: '100%',\n\t\theight: '100px',\n\t},\n\tcenter: {\n\t\tposition: 'absolute',\n\t\ttop: 0,\n\t\twidth: '200px',\n\t\tright: '40%',\n\t},\n\tlast: {\n\t\tposition: 'absolute',\n\t\ttop: 0,\n\t\twidth: '200px',\n\t\tright: theme.spacing(0),\n\t},\n}));\n\nconst columns = [\n\t{ title: 'Test Name', field: 'testName', editable: 'never' },\n\t{ title: 'Parameter', field: 'parameters', editable: 'never' },\n\t{ title: 'Unit', field: 'units', editable: 'never' },\n\t{ title: 'Reference Range', field: 'referenceRange', editable: 'never' },\n\t{ title: 'Value', field: 'value' },\n\t{ title: 'Remarks', field: 'remarks' },\n];\n\nconst Report = (props) => {\n\tconst classes = useStyles();\n\tconst info = props.location.state;\n\t// console.log(props.location);\n\tconst [customerDetails, setCustomerDetails] = React.useState({});\n\tconst [sampleDetails, setSampleDetails] = React.useState({\n\t\tname: info ? info.customerName : '',\n\t\tsample: info ? info.sampleNo : '',\n\t\tsampleId: info ? info._id : '',\n\t\ttests: info ? info.tests : [],\n\t});\n\tconst [date, setDate] = React.useState(new Date());\n\tconst [sampleType, setSampleType] = React.useState([]);\n\tconst [report, setReport] = React.useState([]);\n\tconst [Remarks, setRemarks] = React.useState('Remarks::');\n\tconst [testCompleted, setTestCompleted] = React.useState(\n\t\tinfo ? info.status : false\n\t);\n\tconst [reportId, setReportId] = React.useState('');\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [open, setOpen] = React.useState(false);\n\n\tuseEffect(() => {\n\t\tfetchCustomerDetails();\n\t\tfetchTestDetails();\n\t\tfetchReport();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconsole.log(report);\n\t}, [report]);\n\n\tconst ReportFields = (tests) => {\n\t\tconst result = [];\n\t\ttests.map((item) => {\n\t\t\tresult.push({\n\t\t\t\ttestName: item.testName,\n\t\t\t});\n\t\t\titem.parameter.map(\n\t\t\t\t({ parameters, units, referenceRange, ...rest }, index) => {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tparameters,\n\t\t\t\t\t\tunits,\n\t\t\t\t\t\treferenceRange,\n\t\t\t\t\t\tvalue: 'Set Value',\n\t\t\t\t\t\tremarks: 'Set Remarks',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t\tconsole.log(result);\n\t\tsetReport(result);\n\t};\n\n\tconst fetchCustomerDetails = async () => {\n\t\ttry {\n\t\t\tconst cusInfo = await axios.get(`/customer/${info.customerId}`);\n\t\t\tsetCustomerDetails(cusInfo.data);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchTestDetails = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axios.get(\n\t\t\t\t`/testRequest/find/${sampleDetails.sampleId}`\n\t\t\t);\n\t\t\thandleSampleType(data[0].sampleType);\n\t\t\tReportFields(data[0].toTest);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst fetchReport = async () => {\n\t\ttry {\n\t\t\tconst result = await axios.get(\n\t\t\t\t`/result/sample/${sampleDetails.sampleId}`\n\t\t\t);\n\t\t\tif (result.data.length > 0) {\n\t\t\t\tsetReport([...result.data[0].result]);\n\t\t\t\tsetRemarks(result.data[0].Remarks);\n\t\t\t\tsetReportId(result.data[0]._id);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleSave = async () => {\n\t\tif (reportId) {\n\t\t\ttry {\n\t\t\t\tconst saveReport = await axios.put(`/result/update/${reportId}`, {\n\t\t\t\t\tresult: report,\n\t\t\t\t\tsampleId: sampleDetails.sampleId,\n\t\t\t\t\tRemarks,\n\t\t\t\t});\n\t\t\t\tsetMessage('Report Updated successfully');\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axios.post('/result/add', {\n\t\t\t\t\tresult: report,\n\t\t\t\t\tsampleId: sampleDetails.sampleId,\n\t\t\t\t\tRemarks,\n\t\t\t\t});\n\t\t\t\tsetReportId(data._id);\n\t\t\t\tsetMessage('Report Saved successfully');\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleSampleType = (sampletypes) => {\n\t\tlet sample = [];\n\t\tsampletypes.map((item) => {\n\t\t\titem.checked && sample.push(item.name);\n\t\t});\n\t\tsetSampleType(sample);\n\t};\n\n\tconst handleTestStatus = async (event) => {\n\t\tsetTestCompleted(event.target.checked);\n\t\ttry {\n\t\t\tconst status = await axios.put(\n\t\t\t\t`/sample/update/${sampleDetails.sampleId}`,\n\t\t\t\t{\n\t\t\t\t\tstatus: event.target.checked,\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (event.target.checked) {\n\t\t\t\tsetMessage('Test Completed Sucessfully');\n\t\t\t} else {\n\t\t\t\tsetMessage('Test Marked Uncompleted');\n\t\t\t}\n\n\t\t\tsetStatus('success');\n\t\t\thandleClick();\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleBack = () => {\n\t\tprops.history.push({ pathname: '/generateReport', state: info });\n\t};\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<div className={classes.paper}>\n\t\t\t<style>{`@media print {.no-print{display: none;}}`}</style>\n\t\t\t<div className={classes.parent}>\n\t\t\t\t<div>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tCustomer Name : {sampleDetails.name}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tPet Name : {info.petName}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.center}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tLocation: {customerDetails.address}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tSample No: {sampleDetails.sample}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.last}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tDate: {date.toLocaleDateString()}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tSample Type: {sampleType.toString()}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className={'no-print'}>\n\t\t\t\t<FormControlLabel\n\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\tcontrol={\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={testCompleted}\n\t\t\t\t\t\t\tonChange={handleTestStatus}\n\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tlabel=\"Test Completed\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<MaterialTable\n\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\ttitle=\"Report Card\"\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\tdata={report}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t}}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t}}\n\t\t\t\t\tcellEditable={{\n\t\t\t\t\t\tonCellEditApproved: (newValue, oldValue, rowData, columnDef) => {\n\t\t\t\t\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst copy = [...report];\n\t\t\t\t\t\t\t\t\tcopy[rowData.tableData.id][columnDef.field] = newValue;\n\t\t\t\t\t\t\t\t\tsetReport([...copy]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<TextareaAutosize\n\t\t\t\t\tclassName={classes.textArea}\n\t\t\t\t\taria-label=\"minimum height\"\n\t\t\t\t\trowsMin={3}\n\t\t\t\t\tplaceholder=\"Remarks::\"\n\t\t\t\t\tvalue={Remarks}\n\t\t\t\t\tonChange={(event) => setRemarks(event.target.value)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"no-print\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.backButton}\n\t\t\t\t\tonClick={handleBack}\n\t\t\t\t>\n\t\t\t\t\tBack\n\t\t\t\t</Button>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\tonClick={handleSave}\n\t\t\t\t>\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t{testCompleted ? (\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.printButton}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\twindow.print();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tPrint\n\t\t\t\t\t</Button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<SnackBar\n\t\t\t\t\tmessege={message}\n\t\t\t\t\topen={open}\n\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\tstatus={status}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Report;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/EditTest.js",["231"],"import React from 'react';\nimport './myStyle.css';\nimport { makeStyles, Button, TextField, Chip } from '@material-ui/core';\nimport { forwardRef } from 'react';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport {\n\taddTestValidator,\n\taddParameterValidator,\n} from '../validation/validator';\nimport axios from '../api';\nimport SnackBar from './SnackBar';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n\tbody: {\n\t\tpadding: '1em 2em 2em 2em',\n\t\t// margin: \"4em 2em 2em 2em\",\n\t\tmarginTop: '7%',\n\t\tmarginRight: '2em',\n\t\tmarginLeft: '2em',\n\t},\n\troot: {\n\t\tdisplay: 'flex',\n\t\tmarginTop: '1em',\n\t\tmarginBottom: '2em',\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: '1 auto',\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmarginLeft: theme.spacing(6),\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t},\n\ttable: {\n\t\tmarginTop: '7%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n\tsaveButton: {\n\t\tmarginLeft: '90%',\n\t\tmarginTop: '5%',\n\t\twidth: '200px',\n\t\tpaddingLeft: '20px',\n\t\theight: '3.3em',\n\t\tbackground: '#28B463',\n\t\tcolor: 'white',\n\t},\n}));\n\nconst AddTest = (props) => {\n\tconst { location } = props;\n\tconst classes = useStyles();\n\tconst [addTest, setAddTest] = React.useState({\n\t\ttestName: location.state ? location.state.name : '',\n\t});\n\tconst [isPackage, setIsPackage] = React.useState(location.state.package);\n\tconst [addParameter, setAddparameter] = React.useState({\n\t\tparameters: '',\n\t\tunits: '',\n\t\tcost: 0,\n\t});\n\tconst [parameter, setParameter] = React.useState(\n\t\tlocation.state ? location.state.parameter : []\n\t);\n\n\tconst [columns, setColumns] = React.useState([\n\t\t{ title: 'Parameters', field: 'parameters' },\n\t\t{ title: 'Units', field: 'units' },\n\t\t{ title: 'Cost', field: 'cost' },\n\t]);\n\tconst [message, setMessage] = React.useState();\n\tconst [status, setStatus] = React.useState();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddTest({ ...addTest, [input]: event.target.value });\n\t};\n\tconst handlePackageChange = (event) => {\n\t\tsetIsPackage(event.target.checked);\n\t};\n\n\tconst handleParameters = (input) => (event) => {\n\t\tsetAddparameter({ ...addParameter, [input]: event.target.value });\n\t};\n\n\tconst handleAdd = () => {\n\t\tconst testError = addTestValidator(addTest);\n\t\tconst parameterError = addParameterValidator(addParameter);\n\t\tif (testError.error) {\n\t\t\tsetMessage(testError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (parameterError.error) {\n\t\t\tsetMessage(parameterError.error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!testError.error && !parameterError.error) {\n\t\t\tsetParameter([...parameter, addParameter]);\n\t\t\tsetAddparameter({ parameters: '', units: '', cost: 0 });\n\t\t}\n\t};\n\n\tconst handleSave = async () => {\n\t\ttry {\n\t\t\tconst test = {\n\t\t\t\tname: addTest.testName,\n\t\t\t\tparameter: parameter,\n\t\t\t\tpackage: isPackage,\n\t\t\t};\n\t\t\tif (!location.state._id) {\n\t\t\t\tprops.history.push('/');\n\t\t\t}\n\t\t\tconst res = await axios.put(`/test/update/${location.state._id}`, test);\n\t\t\tprops.history.push({\n\t\t\t\tpathname: '/allTest',\n\t\t\t\tstate: res.data,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tsetMessage(e.Error);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.body}>\n\t\t\t<React.Fragment>\n\t\t\t\t<h4>Test Details</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addTest.testName}\n\t\t\t\t\t\tstyle={{ width: '36%' }}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange('testName')}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tchecked={isPackage}\n\t\t\t\t\t\t\t\tonChange={handlePackageChange}\n\t\t\t\t\t\t\t\tname=\"checkedP\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel=\"Package\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<h4>Bio-Chemical Parameters</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Parameter\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.parameters}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('parameters')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"unit\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.units}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleParameters('units')}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Cost\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addParameter.cost}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonChange={handleParameters('cost')}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={handleAdd}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.table}>\n\t\t\t\t\t{parameter.length ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\t\ttitle=\"Add tests\"\n\t\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\tdata={parameter}\n\t\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\t\tToolbar: (props) => (\n\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t<MTableToolbar {...props} />\n\t\t\t\t\t\t\t\t\t\t\t<div style={{ padding: '0px 10px' }}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 5 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Chip\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel={addTest.testName}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{ marginRight: 50 }}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconst dataUpdate = [...parameter];\n\t\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\t\tdataUpdate[index] = newData;\n\t\t\t\t\t\t\t\t\t\t\t\tsetParameter([...dataUpdate]);\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\t\tnew Promise((resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tconst name = oldData.parameters;\n\t\t\t\t\t\t\t\t\t\t\t\tconst filterdParameter = parameter.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(item) => item.parameters !== name\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\tsetParameter([...filterdParameter]);\n\t\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\tclassName={classes.saveButton}\n\t\t\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tsave\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t</div>\n\t);\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddSample.js",["232","233","234","235","236","237","238","239"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllEquipment.js",["240","241","242","243","244","245"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, Chip } from \"@material-ui/core\";\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n\n\tcontainer: {\n\t\tmarginTop: \"20%\",\n\t},\n}));\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: \"100%\",\n\t\tmarginTop: \"7%\",\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t},\n\ttable: { marginTop: \"1%\" },\n});\n\nexport default function AllReagent() {\n\tconst classes = useStyles();\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [value, setValue] = React.useState(\"\");\n\tconst [options, setOptions] = React.useState([]);\n\tconst [columns, setColumns] = React.useState([\n\t\t{ id: \"equipmentName\", label: \"Equipment Name\", minWidth: 170 },\n\t\t{\n\t\t\tid: \"description\",\n\t\t\tlabel: \"Description\",\n\t\t},\n\t\t{\n\t\t\tid: \"quantity\",\n\t\t\tlabel: \"Quantity\",\n\t\t\tminWidth: 100,\n\t\t\tformat: (value) => {\n\t\t\t\treturn value > 20 ? (\n\t\t\t\t\t<Chip label={value} color=\"primary\" style={{ marginRight: 5 }} />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip label={value} color=\"secondary\" style={{ marginRight: 5 }} />\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t]);\n\tlet cancelToken = useRef(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/equipment/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/equipment\", {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/equipment\", {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.equipmentName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\thadleFirstLoad();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetTotal(1);\n\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\tsetRows([newValue]);\n\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Equipment Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\tkey={column.id}\n\t\t\t\t\t\t\t\t\talign={column.align}\n\t\t\t\t\t\t\t\t\tstyle={{ minWidth: column.minWidth }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.length\n\t\t\t\t\t\t\t\t? rows\n\t\t\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/HandleEquipment.js",["246","247"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { handleEquipmentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nconst styles = makeStyles({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tmargin: \"30\",\n\t\tpadding: \"5\",\n\t\t// backgroundColor: \"#f7f7f7\",\n\t},\n\tinput: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tjustifyContent: \"space-around\",\n\t},\n\titems: {\n\t\theight: \"80%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"2rem\",\n\t},\n\tspace: {\n\t\tmarginTop: \"2rem\",\n\t},\n});\n\nconst ImportReagent = () => {\n\tconst classes = styles();\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [quantity, setQuantity] = useState(\"\");\n\tconst [description, setDescription] = useState(\"Select Equipment\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetDescription(\"Select Equipment\");\n\t\tsetQuantity(\"\");\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/equipment/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = handleEquipmentValidator({\n\t\t\tequipmentName: value,\n\t\t\tquantity: quantity,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axiosi.put(`/equipment/import/${value._id}`, {\n\t\t\t\t\tquantity: quantity,\n\t\t\t\t});\n\t\t\t\tsetMessage(data);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleExport = async () => {\n\t\tconst { error } = handleEquipmentValidator({\n\t\t\tequipmentName: value,\n\t\t\tquantity: quantity,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\tif (quantity > value.quantity) {\n\t\t\t\tsetMessage(\"Insufficient quantity in inventory\");\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.put(`/equipment/use/${value._id}`, {\n\t\t\t\t\t\tquantity: quantity,\n\t\t\t\t\t});\n\t\t\t\t\tsetMessage(data);\n\t\t\t\t\tsetStatus(\"success\");\n\t\t\t\t\thandleClick();\n\t\t\t\t\thandleReset();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tsetMessage(e.response);\n\t\t\t\t\tsetStatus(\"error\");\n\t\t\t\t\thandleClick();\n\t\t\t\t\thandleReset();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// const handleChange = (event) => {\n\t//     setRole(event.target.value);\n\t//   };\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div style={{ height: \"100vh\" }}>\n\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t<div className={classes.input}>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.equipmentName}\n\t\t\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\t\t\tsetDescription(newValue.description);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetDescription(\"Select Equipment\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tlabel=\"Equipment Name\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\t\t\t// defaultValue=\"Select Reagent\"\n\t\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tvalue={quantity}\n\t\t\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\t\t\tlabel=\"Quantity\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={(event) => setQuantity(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tImport\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleExport}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tExport\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImportReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/login.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddEquipment.js",["248","249","250","251","252"],"import React, { useState, forwardRef } from 'react';\nimport MaterialTable from 'material-table';\nimport { TextField, Button, CssBaseline } from '@material-ui/core';\nimport axios from '../api';\nimport { addEquipmentValidator } from '../validation/validator.js';\nimport SnackBar from './SnackBar';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst columns = [\n\t{ title: 'Equipment', field: 'equipmentName' },\n\t{\n\t\ttitle: 'Description',\n\t\tfield: 'description',\n\t},\n\t{ title: 'Quantity', field: 'quantity', type: 'numeric' },\n];\nconst AddReagent = () => {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [equipment, setEquipment] = React.useState({\n\t\tequipmentName: '',\n\t\tdescription: '',\n\t\tquantity: '',\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, equipment));\n\tconst [query, setQuery] = React.useState('');\n\tconst [loading, setLoading] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\n\tconst runSearch = async () => {\n\t\ttry {\n\t\t\tsetLoading(true);\n\t\t\tconst { data } = await axios.get(`/equipment/search/${query}`);\n\t\t\tsetRows([...data]);\n\t\t\tsetLoading(false);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tReact.useEffect(() => {\n\t\tif (query) {\n\t\t\trunSearch();\n\t\t} else {\n\t\t\tsetRows([]);\n\t\t}\n\t}, [query]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetEquipment({ ...reset });\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetEquipment({ ...equipment, [input]: event.target.value });\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addEquipmentValidator(equipment);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post('/equipment/add', { ...equipment });\n\t\t\t\tif (query) {\n\t\t\t\t\tsetRows([res.data.data]);\n\t\t\t\t} else {\n\t\t\t\t\tsetRows([{ ...res.data.data }, ...rows]);\n\t\t\t\t}\n\t\t\t\tconsole.log(rows);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e.response);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\treturn (\n\t\t<CssBaseline>\n\t\t\t<div style={Styles.inputfiled}>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tid=\"equipmentName\"\n\t\t\t\t\tlabel=\"Name Of Equipment\"\n\t\t\t\t\ttype=\"string\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tvalue={equipment.equipmentName}\n\t\t\t\t\tonChange={handleChange('equipmentName')}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Description\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tvalue={equipment.description}\n\t\t\t\t\tonChange={handleChange('description')}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tstyle={Styles.inputfileds}\n\t\t\t\t\tlabel=\"Quantity\"\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={equipment.quantity}\n\t\t\t\t\tonChange={handleChange('quantity')}\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\tstyle={Styles.button}\n\t\t\t\t>\n\t\t\t\t\tAdd\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div style={Styles.table}>\n\t\t\t\t<MaterialTable\n\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\ttitle=\"Equipments\"\n\t\t\t\t\tdata={rows}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tonSearchChange={setQuery}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tdebounceInterval: 500,\n\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t// searchAutoFocus: true\n\t\t\t\t\t}}\n\t\t\t\t\tcomponents={{\n\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t}}\n\t\t\t\t\teditable={{\n\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\tconst res = await axios.put(\n\t\t\t\t\t\t\t\t\t\t`/equipment/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\treq\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataUpdate = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\tsetRows([...dataUpdate]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t`/equipment/delete/${oldData._id}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst dataDelete = [...rows];\n\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\tsetRows([...dataDelete]);\n\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t}}\n\t\t\t\t\tlocalization={{\n\t\t\t\t\t\ttoolbar: {\n\t\t\t\t\t\t\tsearchPlaceholder: 'Search Equipment',\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t\tisLoading={loading}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</CssBaseline>\n\t);\n};\n\nconst Styles = {\n\tinputfiled: {\n\t\tmarginTop: '6%',\n\t\tmarginLeft: '5%',\n\t\tdisplay: 'flex',\n\t},\n\tinputfileds: {\n\t\tmarginTop: '3%',\n\t\tmarginLeft: '3%',\n\t},\n\tbutton: {\n\t\tmarginTop: '3%',\n\t\tmarginLeft: '5%',\n\t\theight: 50,\n\t},\n\ttables: {\n\t\theight: '380px',\n\t},\n\ttable: {\n\t\tmarginTop: '5%',\n\t\tmarginButton: '20%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n};\n\nexport default AddReagent;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AllTest.js",["253","254","255","256","257"],"import React, { useRef, useEffect } from 'react';\nimport axiosi from '../api';\nimport axios from 'axios';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableHead from '@material-ui/core/TableHead';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { TextField } from '@material-ui/core';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Box from '@material-ui/core/Box';\nimport Collapse from '@material-ui/core/Collapse';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport SnackBar from './SnackBar';\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n\n\tcontainer: {\n\t\tmarginTop: '20%',\n\t},\n}));\n\nconst useStyles = makeStyles({\n\troot: {\n\t\twidth: '100%',\n\t\tmarginTop: '7%',\n\t},\n\tcontainer: {\n\t\tmaxHeight: 440,\n\t},\n\tpaper: {\n\t\tdisplay: 'flex',\n\t\tmarginTop: '7%',\n\t\tmarginLeft: '5%',\n\t},\n\ttable: { marginTop: '4%' },\n\trowStyle: {\n\t\t'& > *': {\n\t\t\tborderBottom: 'unset',\n\t\t},\n\t},\n\tsubTable: {\n\t\twidth: '30%',\n\t},\n});\nfunction Row(props) {\n\tconst { row, handleClick, history } = props;\n\n\tconst [open, setOpen] = React.useState(false);\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<TableRow className={classes.rowStyle}>\n\t\t\t\t<TableCell>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\taria-label=\"expand row\"\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tonClick={() => setOpen(!open)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n\t\t\t\t\t</IconButton>\n\t\t\t\t</TableCell>\n\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t{row.name}\n\t\t\t\t</TableCell>\n\t\t\t\t<TableCell>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\thandleClick(row);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DeleteIcon color=\"secondary\" />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\thistory.push({\n\t\t\t\t\t\t\t\tpathname: '/editTest',\n\t\t\t\t\t\t\t\tstate: row,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<EditIcon color=\"primary\" />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t\t<TableRow>\n\t\t\t\t<TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n\t\t\t\t\t<Collapse in={open} timeout=\"auto\" unmountOnExit>\n\t\t\t\t\t\t<Box margin={1}>\n\t\t\t\t\t\t\t<Typography variant=\"h6\" gutterBottom component=\"div\">\n\t\t\t\t\t\t\t\tParameters\n\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\t\t\taria-label=\"purchases\"\n\t\t\t\t\t\t\t\tclassName={classes.subTable}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t<TableCell>Parameter</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell>Unit</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">Cost</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t{row.parameter.map((parameter) => (\n\t\t\t\t\t\t\t\t\t\t<TableRow key={parameter._id}>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t{parameter.parameters}\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>{parameter.units}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{parameter.cost}</TableCell>\n\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</Collapse>\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default function AllTest(props) {\n\tconst classes = useStyles();\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState();\n\tconst [status, setStatus] = React.useState();\n\tconst [openD, setOpenD] = React.useState(false);\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\tconst [inputValue, setInputValue] = React.useState('');\n\tconst [value, setValue] = React.useState('');\n\tconst [options, setOptions] = React.useState([]);\n\n\tlet cancelToken = useRef('');\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tReact.useEffect(() => {\n\t\thadleFirstLoad();\n\t}, [rowsPerPage]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tReact.useEffect(() => {\n\t\tif (props.location && props.location.state) {\n\t\t\tsetMessage(props.location.state);\n\t\t\tsetStatus('success');\n\t\t\thandleClick();\n\t\t}\n\t}, []);\n\n\tconst handleCloses = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleClickOpen = (name) => {\n\t\tsetValue(name);\n\t\tsetOpenD(true);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetOpenD(false);\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/test/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log('search complete');\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst hadleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get('/test', {\n\t\t\t\tparams: { page: page, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tconsole.log(data.total);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst hadleDeleteLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get('/test', {\n\t\t\t\tparams: { page: 0, limit: rowsPerPage },\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleDelete = async () => {\n\t\ttry {\n\t\t\tconst res = await axiosi.delete(`/test/delete/${value._id}`);\n\t\t\thandleClose();\n\t\t\tsetPage(0);\n\t\t\thadleDeleteLoad();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get('/test', {\n\t\t\t\t\t\tparams: { page: page + 1, limit: rowsPerPage },\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\n\t\t\t\t\tconsole.log(rows);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === 'rtl' ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === 'rtl' ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\t\thadleFirstLoad();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetTotal(1);\n\t\t\t\t\t\tsetPage(0);\n\t\t\t\t\t\tsetRows([newValue]);\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Test Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table aria-label=\"collapsible table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell />\n\t\t\t\t\t\t\t<TableCell>Test Name</TableCell>\n\t\t\t\t\t\t\t<TableCell>Action</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.length\n\t\t\t\t\t\t\t\t? rows\n\t\t\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t\t\t.map((row) => (\n\t\t\t\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\t\t\t\tkey={row.name}\n\t\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick={handleClickOpen}\n\t\t\t\t\t\t\t\t\t\t\t\thistory={props.history}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</div>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={total}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t/>\n\t\t\t<Dialog\n\t\t\t\topen={openD}\n\t\t\t\tonClose={handleClose}\n\t\t\t\taria-labelledby=\"alert-dialog-title\"\n\t\t\t\taria-describedby=\"alert-dialog-description\"\n\t\t\t>\n\t\t\t\t<DialogTitle id=\"alert-dialog-title\">\n\t\t\t\t\tAre you sure you want to delete \"{value.name}\"?\n\t\t\t\t</DialogTitle>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button onClick={handleClose} color=\"primary\">\n\t\t\t\t\t\tDisagree\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={handleDelete} color=\"primary\" autoFocus>\n\t\t\t\t\t\tAgree\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleCloses}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryMRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedAdminRoute.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedStaffAccount.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/ProtectedInventoryStaff.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/action/setUser.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/register.js",["258","259","260","261","262","263","264","265","266","267"],"import React, { useState, forwardRef } from 'react';\nimport {\n\tTextField,\n\tPaper,\n\tmakeStyles,\n\tButton,\n\tSelect,\n\tMenuItem,\n\tInputLabel,\n\tFormControl,\n\tTableContainer,\n\tTable,\n\tTableHead,\n\tTableRow,\n\tTableCell,\n\tTableBody,\n\tIconButton,\n\tInputAdornment,\n} from '@material-ui/core';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport { registervalidation } from '../validation/validator';\nimport SnackBar from './SnackBar';\nimport axios from '../api';\nimport MaterialTable from 'material-table';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: '10%',\n\t\tmarginRight: '5%',\n\t\tmarginLeft: '5%',\n\t\tmarginBottom: '2%',\n\t\tdisplay: 'flex',\n\t\tjustifyContent: 'space-between',\n\t},\n\titems: {\n\t\tflex: '1 1 1 1 auto',\n\t\twidth: '20em',\n\t},\n\tbutton: {\n\t\tmargin: '13px 50px 12px 10px',\n\t},\n\ttables: {\n\t\theight: '380px',\n\t},\n\ttable: {\n\t\tmarginTop: '5%',\n\t\tmarginLeft: '10%',\n\t\tmarginRight: '10%',\n\t},\n\tbuttons: {\n\t\tmarginRight: '5%',\n\t},\n});\n\nconst Register = () => {\n\tconst classes = styles();\n\tconst [userName, setUsername] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [role, setRole] = useState('');\n\tconst [open, setOpen] = React.useState(false);\n\tconst [openS, setOpenS] = React.useState(false);\n\tconst [showPassword, setShowPassword] = useState(false);\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [data, setData] = React.useState([]);\n\tconst [columns, setColumns] = useState([\n\t\t{ title: 'Username', field: 'userName' },\n\t\t{\n\t\t\ttitle: 'Role',\n\t\t\tfield: 'role',\n\t\t},\n\t]);\n\tReact.useEffect(() => {\n\t\thandleLoad();\n\t}, []);\n\n\tconst handleLoad = async () => {\n\t\ttry {\n\t\t\tconst res = await axios.get('/users');\n\t\t\tsetData(res.data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleClick = () => {\n\t\tsetOpenS(true);\n\t};\n\n\tconst handleReset = () => {\n\t\tsetUsername('');\n\t\tsetPassword('');\n\t\tsetRole('');\n\t};\n\n\tconst handleCloses = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tsetOpenS(false);\n\t};\n\n\tconst handleClickShowPassword = () => setShowPassword(!showPassword);\n\tconst handleMouseDownPassword = () => setShowPassword(!showPassword);\n\n\tconst handleSubmit = async () => {\n\t\tconst { error } = registervalidation({ userName, password, role });\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus('error');\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axios.post('/register', { userName, password, role });\n\t\t\t\tsetData([{ ...res.data.data }, ...data]);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleChange = (event) => {\n\t\tsetRole(event.target.value);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetOpen(false);\n\t};\n\n\tconst handleOpen = () => {\n\t\tsetOpen(true);\n\t};\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"Username\"\n\t\t\t\t\tlabel=\"Username\"\n\t\t\t\t\tvalue={userName}\n\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\ttype={showPassword ? 'text' : 'password'}\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tInputProps={{\n\t\t\t\t\t\tendAdornment: (\n\t\t\t\t\t\t\t<InputAdornment position=\"end\">\n\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\taria-label=\"toggle password visibility\"\n\t\t\t\t\t\t\t\t\tonClick={handleClickShowPassword}\n\t\t\t\t\t\t\t\t\tonMouseDown={handleMouseDownPassword}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{showPassword ? <Visibility /> : <VisibilityOff />}\n\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t</InputAdornment>\n\t\t\t\t\t\t),\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t<InputLabel id=\"demo-controlled-open-select-label\">Roles</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tlabelId=\"demo-controlled-open-select-label\"\n\t\t\t\t\t\tid=\"demo-controlled-open-select\"\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\tonClose={handleClose}\n\t\t\t\t\t\tonOpen={handleOpen}\n\t\t\t\t\t\tvalue={role}\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuItem value=\"staff\">Staff</MenuItem>\n\t\t\t\t\t\t<MenuItem value=\"inventory_manager\">Inventory Manager</MenuItem>\n\t\t\t\t\t\t<MenuItem value=\"accountant\">Accountant</MenuItem>\n\t\t\t\t\t\t<MenuItem value=\"admin\">Admin</MenuItem>\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\n\t\t\t\t<Button\n\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t>\n\t\t\t\t\tRegister\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t{data.length ? (\n\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\ttitle=\"All Users\"\n\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst res = await axios.delete(\n\t\t\t\t\t\t\t\t\t\t\t`/user/delete/${oldData._id}`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...data];\n\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\tsetData([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={openS}\n\t\t\t\thandleClose={handleCloses}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default Register;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/reducers/authReducer.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SnackBar.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/validation/validator.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/api/index.js",[],["268","269"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddAnimal.js",["270","271","272","273","274"],"import React from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tButton,\n\tTextField,\n\tBox,\n\tCollapse,\n\tIconButton,\n\tTable,\n\tTableBody,\n\tTableCell,\n\tTableContainer,\n\tTableHead,\n\tTableRow,\n\tTypography,\n} from \"@material-ui/core\";\nimport SnackBar from \"./SnackBar\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { categoryValidator, speciesValidator } from \"../validation/validator\";\n\nconst useStyles = makeStyles((theme) => ({\n\tbody: {\n\t\tpadding: \"1em 2em 2em 2em\",\n\t\t// margin: \"4em 2em 2em 2em\",\n\t\tmarginTop: \"7%\",\n\t\tmarginRight: \"2em\",\n\t\tmarginLeft: \"2em\",\n\t},\n\troot: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"1em\",\n\t\tmarginBottom: \"2em\",\n\t\twidth: \"70%\",\n\t},\n\troot1: {\n\t\tdisplay: \"flex\",\n\t\tmarginTop: \"1em\",\n\t\tmarginBottom: \"2em\",\n\t\twidth: \"50%\",\n\t},\n\tposition: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: \"1 auto\",\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(6),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmarginLeft: theme.spacing(6),\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t},\n\ttable: {\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n\tsaveButton: {\n\t\tmarginLeft: \"90%\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t\tbackground: \"#28B463\",\n\t\tcolor: \"white\",\n\t},\n}));\n\nconst useRowStyles = makeStyles({\n\troot: {\n\t\t\"& > *\": {\n\t\t\tborderBottom: \"unset\",\n\t\t},\n\t},\n});\n\nfunction Row(props) {\n\tconst { row, handleFirstload, value, setValue, setInputValue } = props;\n\tconst [open, setOpen] = React.useState(false);\n\tconst classes = useRowStyles();\n\n\tconst deleteCategory = async (id) => {\n\t\ttry {\n\t\t\tconst res = await axiosi.delete(`/animal/delete/${id}`);\n\t\t\thandleFirstload();\n\t\t\tsetInputValue(\"\");\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst deleteSpecies = async (delItem) => {\n\t\ttry {\n\t\t\tconst speciesClone = [...row.species];\n\t\t\tconst index = speciesClone.indexOf(delItem);\n\t\t\tspeciesClone.splice(index, 1);\n\t\t\tconsole.log(speciesClone);\n\t\t\tconst res = await axiosi.put(`/animal/update/${row._id}`, {\n\t\t\t\tspecies: speciesClone,\n\t\t\t});\n\t\t\tsetValue(res.data);\n\t\t\thandleFirstload();\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<TableRow className={classes.root}>\n\t\t\t\t<TableCell>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\taria-label=\"expand row\"\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tonClick={() => setOpen(!open)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n\t\t\t\t\t</IconButton>\n\t\t\t\t</TableCell>\n\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t{row.category}\n\t\t\t\t</TableCell>\n\t\t\t\t<TableCell>\n\t\t\t\t\t<IconButton onClick={() => deleteCategory(row._id)}>\n\t\t\t\t\t\t<DeleteIcon color=\"secondary\" />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t\t<TableRow>\n\t\t\t\t<TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n\t\t\t\t\t<Collapse in={open} timeout=\"auto\" unmountOnExit>\n\t\t\t\t\t\t{row.species.length ? (\n\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t<Box margin={1}>\n\t\t\t\t\t\t\t\t\t<Typography variant=\"h6\" gutterBottom component=\"div\">\n\t\t\t\t\t\t\t\t\t\tAnimals\n\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t\t\t<Table size=\"small\" aria-label=\"purchases\">\n\t\t\t\t\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>Name of the animal</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>Action</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t\t\t{row.species.map((speciesRow) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow key={speciesRow}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{speciesRow}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => deleteSpecies(speciesRow)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon color=\"secondary\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Box margin={1}>\n\t\t\t\t\t\t\t\t<Typography variant=\"h7\" gutterBottom component=\"div\">\n\t\t\t\t\t\t\t\t\tNot any animals added to this category\n\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Collapse>\n\t\t\t\t</TableCell>\n\t\t\t</TableRow>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default function AddAnimal() {\n\tconst classes = useStyles();\n\tconst [addAnimal, setAddAnimal] = React.useState({\n\t\tcategory: \"\",\n\t\tspecies: \"\",\n\t});\n\n\tconst [data, setData] = React.useState([]);\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [value, setValue] = React.useState({});\n\tconst [options, setOptions] = React.useState([]);\n\tconst [rows, setRows] = React.useState([]);\n\tlet cancelToken = React.useRef(\"\");\n\tconst [message, setMessage] = React.useState();\n\tconst [status, setStatus] = React.useState();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tReact.useEffect(() => {\n\t\thandleFirstload();\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/animal/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleFirstload = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/animal/\");\n\t\t\tsetRows([...data]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddAnimal({ ...addAnimal, [input]: event.target.value });\n\t};\n\n\tconst addCategory = async () => {\n\t\tconst { error } = categoryValidator({ category: addAnimal.category });\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axiosi.post(\"/animal/add/\", {\n\t\t\t\t\tcategory: addAnimal.category,\n\t\t\t\t\tspecies: [],\n\t\t\t\t});\n\t\t\t\tsetAddAnimal({ category: \"\" });\n\t\t\t\thandleFirstload();\n\t\t\t\tsetMessage(\"Category added successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst addSpecies = async () => {\n\t\tconst categoryError = categoryValidator({ category: inputValue });\n\t\tconst speciesError = speciesValidator({ species: addAnimal.species });\n\t\tif (categoryError.error) {\n\t\t\tsetMessage(categoryError.error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (speciesError.error) {\n\t\t\tsetMessage(speciesError.error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!categoryError.error && !speciesError.error) {\n\t\t\ttry {\n\t\t\t\tconst speciesClone = [...value.species];\n\t\t\t\tspeciesClone.push(addAnimal.species);\n\t\t\t\tconst res = await axiosi.put(`/animal/update/${value._id}`, {\n\t\t\t\t\tspecies: speciesClone,\n\t\t\t\t});\n\t\t\t\tsetValue(res.data);\n\t\t\t\tsetAddAnimal({ species: \"\" });\n\t\t\t\thandleFirstload();\n\t\t\t\tsetMessage(\"Species added successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.body}>\n\t\t\t<React.Fragment>\n\t\t\t\t<h4>Add category</h4>\n\t\t\t\t<div className={classes.root1}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Category Name\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addAnimal.category}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange(\"category\")}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={addCategory}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<h4>Add Animals</h4>\n\t\t\t\t<div className={classes.root}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\tgetOptionLabel={(option) => option.category}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\t\tsetData([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\tconsole.log(\"new value is arrived\");\n\t\t\t\t\t\t\t// fetchAllSample(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField {...params} label=\"Category Name\" variant=\"outlined\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Animal name\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tvalue={addAnimal.species}\n\t\t\t\t\t\tstyle={{ width: 80 }}\n\t\t\t\t\t\tclassName={classes.position}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange(\"species\")}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tonClick={addSpecies}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table aria-label=\"collapsible table\">\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<TableCell />\n\t\t\t\t\t\t\t<TableCell>Name of Category</TableCell>\n\t\t\t\t\t\t\t<TableCell>Action</TableCell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows.map((row) => (\n\t\t\t\t\t\t\t\t<Row\n\t\t\t\t\t\t\t\t\tkey={row._id}\n\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\thandleFirstload={handleFirstload}\n\t\t\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\t\t\tsetValue={setValue}\n\t\t\t\t\t\t\t\t\tsetInputValue={setInputValue}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\n\t\t\t\t<div>\n\t\t\t\t\t<SnackBar\n\t\t\t\t\t\tmessege={message}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\t\tstatus={status}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t</div>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/AddReference.js",["275","276","277","278","279"],"import React, { useState, useEffect, useRef, forwardRef } from 'react';\nimport axios from 'axios';\nimport { TextField, makeStyles, Button } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport MaterialTable from 'material-table';\nimport axiosi from '../api';\nimport SnackBar from './SnackBar';\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst styles = makeStyles((theme) => ({\n\troot: {\n\t\tmarginTop: '7em',\n\t\tmarginRight: '2em',\n\t\tmarginLeft: '2em',\n\t},\n\tformControl: {\n\t\tminWidth: 160,\n\t},\n\ttable: {\n\t\tmarginLeft: '2em',\n\t\tmarginTop: '2em',\n\t\tmarginRight: '4em',\n\t},\n\tbuttonContainer: {\n\t\twidth: '85%',\n\t\tmarginTop: '3em',\n\t},\n\tbutton: {\n\t\tfloat: 'right',\n\t\twidth: '100px',\n\t\tmarginBottom: '2em',\n\t},\n}));\n\nconst columns = [\n\t{ title: 'Parameter', field: 'parameters', editable: 'never' },\n\t{ title: 'Unit', field: 'units', editable: 'never' },\n\t{ title: 'Reference Range', field: 'referenceRange' },\n];\n\nconst AddReference = () => {\n\tconst classes = styles();\n\tconst [testName, setTestName] = useState('');\n\tconst [categoryName, setCategoryName] = useState('');\n\tconst [testOptions, setTestOptions] = useState([]);\n\tconst [categoryOptions, setCategoryOptions] = useState([]);\n\tconst [testValue, setTestValue] = useState(null);\n\tconst [categoryValue, setCategoryValue] = useState({});\n\tconst [animal, setAnimal] = useState('');\n\tconst [tableFields, setTableFields] = useState([]);\n\tconst [referenceId, setReferenceId] = useState('');\n\tconst [message, setMessage] = React.useState('');\n\tconst [status, setStatus] = React.useState('');\n\tconst [open, setOpen] = React.useState(false);\n\tlet testcancelToken = useRef('');\n\tlet animalcancelToken = useRef('');\n\n\tuseEffect(() => {\n\t\tif (testName) {\n\t\t\tfetchTestSearchResult();\n\t\t} else {\n\t\t\tsetTestOptions([]);\n\t\t}\n\t}, [testName]);\n\n\tuseEffect(() => {\n\t\tif (categoryName) {\n\t\t\tfetchCategorySearchResult();\n\t\t} else {\n\t\t\tsetCategoryOptions([]);\n\t\t}\n\t}, [categoryName]);\n\n\tuseEffect(() => {\n\t\tif (testValue && animal) {\n\t\t\tfetchReference();\n\t\t}\n\t}, [testValue, animal]);\n\n\tconst fetchTestSearchResult = async () => {\n\t\tif (testcancelToken.current) {\n\t\t\ttestcancelToken.current.cancel();\n\t\t}\n\n\t\ttestcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/test/search/${testName}`, {\n\t\t\t\tcancelToken: testcancelToken.current.token,\n\t\t\t});\n\t\t\tsetTestOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchCategorySearchResult = async () => {\n\t\tif (animalcancelToken.current) {\n\t\t\tanimalcancelToken.current.cancel();\n\t\t}\n\n\t\tanimalcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/animal/search/${categoryName}`, {\n\t\t\t\tcancelToken: animalcancelToken.current.token,\n\t\t\t});\n\t\t\tsetCategoryOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchReference = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get('/reference', {\n\t\t\t\tparams: {\n\t\t\t\t\ttestName: testValue.name,\n\t\t\t\t\tanimalName: animal,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconsole.log(data);\n\t\t\tdata.length ? handleFetchReference(data[0]) : ReferenceFields(testValue);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleFetchReference = (data) => {\n\t\tsetReferenceId(data._id);\n\t\tsetTableFields(data.refTable);\n\t};\n\n\tconst handleChange = (event) => {\n\t\tsetAnimal(event.target.value);\n\t\tif (!event.target.value) {\n\t\t\tsetTableFields([]);\n\t\t}\n\t};\n\n\tconst ReferenceFields = (newValue) => {\n\t\tconsole.log(newValue);\n\t\tsetTableFields(\n\t\t\tnewValue.parameter.map(({ cost, _id, ...item }) => ({\n\t\t\t\t...item,\n\t\t\t\treferenceRange: 'Set Reference Range',\n\t\t\t}))\n\t\t);\n\t};\n\n\tconst handleSave = async () => {\n\t\tif (referenceId) {\n\t\t\ttry {\n\t\t\t\tconst saveReference = await axiosi.put(\n\t\t\t\t\t`/reference/update/${referenceId}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tanimalName: animal,\n\t\t\t\t\t\ttestName: testValue.name,\n\t\t\t\t\t\trefTable: tableFields,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tsetMessage('Report Saved successfully');\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response.message);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tconst saveReference = await axiosi.post('/reference/add', {\n\t\t\t\t\tanimalName: animal,\n\t\t\t\t\ttestName: testValue.name,\n\t\t\t\t\trefTable: tableFields,\n\t\t\t\t});\n\t\t\t\tsetReferenceId(saveReference.data._id);\n\t\t\t\tsetMessage('Report Saved successfully');\n\t\t\t\tsetStatus('success');\n\t\t\t\thandleClick();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response.message);\n\t\t\t\tsetStatus('error');\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\t//for snackbar\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tdirection=\"row\"\n\t\t\t\tjustify=\"center\"\n\t\t\t\tspacing={3}\n\t\t\t\tclassName={classes.root}\n\t\t\t>\n\t\t\t\t<Grid item xs={12} sm={6} md={4}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\tinputValue={testName}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetTestName(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\toptions={testOptions}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\t\tgetOptionLabel={(option) => option.name}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\t\tsetTableFields([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// newValue ? ReferenceFields(newValue) : setTableFields(newValue);\n\t\t\t\t\t\t\tsetTestValue(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField {...params} label=\"Test Name\" variant=\"outlined\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\n\t\t\t\t<Grid item xs={12} sm={6} md={4}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\toptions={categoryOptions}\n\t\t\t\t\t\tgetOptionLabel={(option) => option.category}\n\t\t\t\t\t\tinputValue={categoryName}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetCategoryName(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\t\tsetTableFields([]);\n\t\t\t\t\t\t\t\tsetAnimal('');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetCategoryValue(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\tlabel=\"Animal Category\"\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item xs={12} sm={6} md={4}>\n\t\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t\t<InputLabel id=\"demo-simple-select-label\">Select Animal</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tlabelId=\"demo-simple-select-label\"\n\t\t\t\t\t\t\tid=\"demo-simple-select\"\n\t\t\t\t\t\t\tvalue={animal}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MenuItem value=\"\">\n\t\t\t\t\t\t\t\t<em>None</em>\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t{categoryValue &&\n\t\t\t\t\t\t\t\t(Object.keys(categoryValue).length != 0\n\t\t\t\t\t\t\t\t\t? categoryValue.species.map((item) => (\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem key={item} value={item}>\n\t\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t\t  ))\n\t\t\t\t\t\t\t\t\t: null)}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<div className={classes.table}>\n\t\t\t\t{tableFields.length ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\ttitle=\"Add Reference\"\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\tdata={tableFields}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tpaging: false,\n\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t\theaderStyle: { background: 'transparent' },\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcomponents={{\n\t\t\t\t\t\t\t\tContainer: (props) => <div {...props} />,\n\n\t\t\t\t\t\t\t\t// Cell: (props) => <div {...props} />,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcellEditable={{\n\t\t\t\t\t\t\t\tonCellEditApproved: (\n\t\t\t\t\t\t\t\t\tnewValue,\n\t\t\t\t\t\t\t\t\toldValue,\n\t\t\t\t\t\t\t\t\trowData,\n\t\t\t\t\t\t\t\t\tcolumnDef\n\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst copy = [...tableFields];\n\t\t\t\t\t\t\t\t\t\t\tcopy[rowData.tableData.id][columnDef.field] = newValue;\n\t\t\t\t\t\t\t\t\t\t\tsetTableFields([...copy]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className={classes.buttonContainer}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tonClick={handleSave}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<SnackBar\n\t\t\t\t\tmessege={message}\n\t\t\t\t\topen={open}\n\t\t\t\t\thandleClose={handleClose}\n\t\t\t\t\tstatus={status}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default AddReference;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/testRequestForm.js",["280","281","282","283","284","285","286","287","288","289","290","291"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tButton,\n\tCheckbox,\n\tFormControlLabel,\n\tMenuItem,\n\tFormControl,\n\tInputLabel,\n\tSelect,\n\tTextField,\n} from \"@material-ui/core\";\n\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\nimport { paymentDoneValidator } from \"../validation/validator\";\n\nconst useStyles = makeStyles((theme) => ({\n\tpaper: {\n\t\tpadding: \"1em 2em 2em 2em\",\n\t\tmargin: \"8em 2em 2em 2em\",\n\t\t// height: \"95em\",\n\t},\n\tbutton: {\n\t\tpadding: \"10px 30px 10px 30px\",\n\t\tmargin: \"15px 8px 5px 5px\",\n\t},\n\tpayment: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\twidth: \"90%\",\n\t\tmargin: \"40px 8px 5px 5px\",\n\t\tposition: \"relative\",\n\t},\n\tpaymentDone: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\twidth: \"32%\",\n\t\tmargin: \"15px 8px 5px 5px\",\n\t},\n\tprevPayment: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t\twidth: \"25%\",\n\t\tposition: \"absolute\",\n\t\tleft: \"68%\",\n\t\ttop: \"-50%\",\n\t},\n}));\n\nconst TestRequestForm = (props) => {\n\tconst classes = useStyles();\n\tconst sampleData = props.location.state;\n\tconst [sampleTypes, setSampleTypes] = useState([\n\t\t{ name: \"Blood\", checked: false },\n\t\t{ name: \"Urine\", checked: false },\n\t\t{ name: \"Fluid\", checked: false },\n\t\t{ name: \"Skin Scrape\", checked: false },\n\t\t{ name: \"Swab\", checked: false },\n\t\t{ name: \"Hair pluck\", checked: false },\n\t\t{ name: \"Stool\", checked: false },\n\t]);\n\tconst [paymentAmount, setPaymentAmount] = React.useState(0);\n\tconst [fullPayment, setFullPayment] = React.useState(false);\n\tconst [testCheckbox, setTestCheckbox] = useState([]);\n\tconst [healthPackage, setHealthPackage] = useState([]);\n\tconst [testFee, setTestFee] = useState(0);\n\tconst [prevPayment, setPrevPayment] = useState({\n\t\tdone: false,\n\t\tprevPaid: 0,\n\t});\n\tconst [meansOfPayment, setMeansOfPayment] = React.useState(\"\");\n\tconst [updateVariable, setUpdateVariable] = React.useState({\n\t\tshouldUpdate: false,\n\t\t_id: \"\",\n\t});\n\tconst [open, setOpen] = React.useState(false);\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\t// const [refData, setRefData] = React.useState([]);\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tReact.useEffect(() => {\n\t\thandleReferenceRange();\n\t\thandlePreviousPayment();\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tlet nonHealthPackageCost = 0;\n\t\tlet healthPackageCost = 0;\n\t\ttestCheckbox.map((item) => {\n\t\t\tif (item.testChecked === true) {\n\t\t\t\titem.parameter.map((param) => {\n\t\t\t\t\tif (param.checked === true) {\n\t\t\t\t\t\tnonHealthPackageCost += param.cost;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\thealthPackage.map((item) => {\n\t\t\tif (item.testChecked === true) {\n\t\t\t\titem.parameter.map((param) => {\n\t\t\t\t\thealthPackageCost += param.cost;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tsetTestFee(nonHealthPackageCost + healthPackageCost);\n\t}, [testCheckbox, healthPackage]);\n\n\tconst handleReferenceRange = async () => {\n\t\ttry {\n\t\t\tconst referenceTable = await axios.get(\n\t\t\t\t`/reference/find/${sampleData.animal}`,\n\t\t\t);\n\t\t\thandleFirstLoad(referenceTable.data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleFirstLoad = async (refData) => {\n\t\ttry {\n\t\t\tlet newTest = [];\n\t\t\tconst prevTestForm = await axios.get(\n\t\t\t\t`/testRequest/find/${sampleData._id}`,\n\t\t\t);\n\t\t\tif (prevTestForm.data.length > 0) {\n\t\t\t\t// newTest = prevTestForm.data[0].toTest;\n\t\t\t\tsetUpdateVariable({\n\t\t\t\t\tshouldUpdate: true,\n\t\t\t\t\t_id: prevTestForm.data[0]._id,\n\t\t\t\t});\n\t\t\t\tsetSampleTypes([...prevTestForm.data[0].sampleType]);\n\t\t\t\tsetMeansOfPayment(prevTestForm.data[0].means);\n\t\t\t\tsetPaymentAmount(prevTestForm.data[0].paymentAmount);\n\t\t\t}\n\t\t\tconst testSchema = await axios.get(\"/test/getAll\");\n\t\t\tnewTest = testSchema.data.map((item) => {\n\t\t\t\tconst refTestIndex =\n\t\t\t\t\trefData.length > 0\n\t\t\t\t\t\t? refData.findIndex((x) => x.testName === item.name)\n\t\t\t\t\t\t: -1;\n\t\t\t\tconst testIndex =\n\t\t\t\t\tprevTestForm.data.length > 0\n\t\t\t\t\t\t? prevTestForm.data[0].toTest.findIndex(\n\t\t\t\t\t\t\t\t(x) => x.testName === item.name,\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: -1;\n\t\t\t\t// console.log(refTestIndex >= 0 && refData[refTestIndex].refTable);\n\t\t\t\t// console.log(refData);\n\t\t\t\treturn {\n\t\t\t\t\tpackage: item.package,\n\t\t\t\t\t_id: item._id,\n\t\t\t\t\ttestName: item.name,\n\t\t\t\t\ttestChecked:\n\t\t\t\t\t\ttestIndex >= 0\n\t\t\t\t\t\t\t? prevTestForm.data[0].toTest[testIndex].testChecked\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\tcheckedAll:\n\t\t\t\t\t\ttestIndex >= 0\n\t\t\t\t\t\t\t? prevTestForm.data[0].toTest[testIndex].checkedAll\n\t\t\t\t\t\t\t: false,\n\t\t\t\t\tparameter: item.parameter.map((param) => {\n\t\t\t\t\t\tconst refIndex =\n\t\t\t\t\t\t\trefTestIndex >= 0\n\t\t\t\t\t\t\t\t? refData[refTestIndex].refTable.findIndex(\n\t\t\t\t\t\t\t\t\t\t(x) => x.parameters === param.parameters,\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: -1;\n\t\t\t\t\t\tconst paramIndex =\n\t\t\t\t\t\t\ttestIndex >= 0 &&\n\t\t\t\t\t\t\tprevTestForm.data[0].toTest[testIndex].parameter.findIndex(\n\t\t\t\t\t\t\t\t(x) => x._id === param._id,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t_id: param._id,\n\t\t\t\t\t\t\tparameters: param.parameters,\n\t\t\t\t\t\t\tunits: param.units,\n\t\t\t\t\t\t\tcost: param.cost,\n\t\t\t\t\t\t\tchecked:\n\t\t\t\t\t\t\t\tparamIndex >= 0 && testIndex >= 0\n\t\t\t\t\t\t\t\t\t? prevTestForm.data[0].toTest[testIndex].parameter[paramIndex]\n\t\t\t\t\t\t\t\t\t\t\t.checked\n\t\t\t\t\t\t\t\t\t: false,\n\t\t\t\t\t\t\treferenceRange:\n\t\t\t\t\t\t\t\trefTestIndex >= 0 && refIndex >= 0\n\t\t\t\t\t\t\t\t\t? refData[refTestIndex].refTable[refIndex].referenceRange\n\t\t\t\t\t\t\t\t\t: \"-\",\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t});\n\t\t\tconst HealthPackageClone = newTest.filter(\n\t\t\t\t(item) => item.package === true,\n\t\t\t);\n\t\t\tconst nonHealthPackage = newTest.filter((item) => item.package !== true);\n\t\t\t// console.log(HealthPackageClone);\n\t\t\tsetHealthPackage([...HealthPackageClone]);\n\t\t\tsetTestCheckbox([...nonHealthPackage]);\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleSubmit = async () => {\n\t\ttry {\n\t\t\tconst reportHealthPackage = healthPackage.filter(\n\t\t\t\t(x) => x.testChecked === true,\n\t\t\t);\n\t\t\tconst reportTestCheckbox = testCheckbox.filter(\n\t\t\t\t(x) => x.testChecked === true,\n\t\t\t);\n\t\t\treportTestCheckbox.forEach((x) => {\n\t\t\t\tlet filterParameter;\n\t\t\t\tx.checkedAll\n\t\t\t\t\t? (filterParameter = x.parameter)\n\t\t\t\t\t: (filterParameter = x.parameter.filter(\n\t\t\t\t\t\t\t(param) => param.checked === true,\n\t\t\t\t\t  ));\n\n\t\t\t\treturn (x.parameter = filterParameter);\n\t\t\t});\n\t\t\tconst testRequestForm = {\n\t\t\t\tcustomerId: sampleData.customerId,\n\t\t\t\tcustomerName: sampleData.customerName,\n\t\t\t\tsampleId: sampleData._id,\n\t\t\t\ttestFee: testFee,\n\t\t\t\tmeans: meansOfPayment,\n\t\t\t\tsampleType: sampleTypes,\n\t\t\t\tanimalName: sampleData.animal,\n\t\t\t\ttoTest: [...reportTestCheckbox, ...reportHealthPackage],\n\t\t\t};\n\t\t\tif (paymentAmount > 0) {\n\t\t\t\tconst validationError = await handlePaymentSubmit();\n\t\t\t\tif (validationError) {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (updateVariable.shouldUpdate) {\n\t\t\t\tconst updateRes = await axios.put(\n\t\t\t\t\t`/testRequest/update/${updateVariable._id}`,\n\t\t\t\t\ttestRequestForm,\n\t\t\t\t);\n\t\t\t\thandleFirstLoad(updateRes.data);\n\t\t\t\tsetMessage(\"Data update successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t} else {\n\t\t\t\tconst res = await axios.post(\"/testRequest/add\", testRequestForm);\n\t\t\t\tsetUpdateVariable({\n\t\t\t\t\tshouldUpdate: true,\n\t\t\t\t\t_id: res.data._id,\n\t\t\t\t});\n\t\t\t\tsetMessage(\"Data Added successfully\");\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t\tprops.history.push(\"/allSample\");\n\t\t} catch (e) {\n\t\t\tsetMessage(\"Error Occured\");\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\tconst handleFullPayment = (event) => {\n\t\tsetFullPayment(event.target.checked);\n\t\tevent.target.checked\n\t\t\t? setPaymentAmount(testFee - prevPayment.prevPaid)\n\t\t\t: setPaymentAmount(0);\n\t};\n\n\tconst handlePaymentSubmit = async () => {\n\t\tconst dueFee = testFee + 1 - prevPayment.prevPaid;\n\t\tconst { error } = paymentDoneValidator({\n\t\t\tpaymentAmount: paymentAmount,\n\t\t\ttestFee: dueFee,\n\t\t});\n\t\tconsole.log(error);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t\treturn true;\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst paymentInfo = {\n\t\t\t\t\tsampleId: sampleData._id,\n\t\t\t\t\tsampleNo: sampleData.sampleNo,\n\t\t\t\t\tpetName: sampleData.petName,\n\t\t\t\t\tcustomerName: sampleData.customerName,\n\t\t\t\t\tamount: paymentAmount,\n\t\t\t\t};\n\t\t\t\tconst res = await axios.post(\"/statement/add\", paymentInfo);\n\t\t\t\tconsole.log(res);\n\t\t\t\treturn false;\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handlePreviousPayment = async () => {\n\t\ttry {\n\t\t\tlet previouslyPaid = 0;\n\t\t\tlet paymentDone = false;\n\t\t\tconst res = await axios.get(\"/statement/sample\", {\n\t\t\t\tparams: { sampleNo: sampleData.sampleNo },\n\t\t\t});\n\t\t\tif (res.data.length > 0) {\n\t\t\t\tres.data.map((item) => {\n\t\t\t\t\tpreviouslyPaid += item.amount;\n\t\t\t\t});\n\t\t\t\tconsole.log(testFee);\n\t\t\t\tconsole.log(previouslyPaid);\n\t\t\t\tpaymentDone = true;\n\t\t\t}\n\t\t\tsetPrevPayment({\n\t\t\t\tdone: paymentDone,\n\t\t\t\tprevPaid: previouslyPaid,\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tsetMessage(e.response);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className={classes.paper}>\n\t\t\t<h4>Sample Type</h4>\n\t\t\t{sampleTypes.map((item) => (\n\t\t\t\t<FormControlLabel\n\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\tkey={item.name}\n\t\t\t\t\tcontrol={\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tchecked={item.checked}\n\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\tconst index = sampleTypes.findIndex(\n\t\t\t\t\t\t\t\t\t(x) => x.name === item.name,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst sampleTypesClone = sampleTypes;\n\t\t\t\t\t\t\t\tsampleTypesClone[index].checked = event.target.checked;\n\t\t\t\t\t\t\t\tsetSampleTypes([...sampleTypesClone]);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tlabel={item.name}\n\t\t\t\t/>\n\t\t\t))}\n\n\t\t\t<h4>Tests</h4>\n\t\t\t{testCheckbox.map((item) => (\n\t\t\t\t<React.Fragment key={item._id}>\n\t\t\t\t\t<h5>{item.testName}</h5>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={item.checkedAll}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tconst testIndex = testCheckbox.findIndex(\n\t\t\t\t\t\t\t\t\t\t(x) => x.testName === item.testName,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst testCheckboxClone = testCheckbox;\n\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].parameter.map((param) => {\n\t\t\t\t\t\t\t\t\t\tparam.checked = event.target.checked;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].checkedAll =\n\t\t\t\t\t\t\t\t\t\tevent.target.checked;\n\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].testChecked =\n\t\t\t\t\t\t\t\t\t\tevent.target.checked;\n\t\t\t\t\t\t\t\t\tconsole.log(testCheckboxClone);\n\t\t\t\t\t\t\t\t\tsetTestCheckbox([...testCheckboxClone]);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel=\"All\"\n\t\t\t\t\t/>\n\t\t\t\t\t{item.parameter.map((param) => (\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\t\t\tkey={param._id}\n\t\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\tchecked={param.checked}\n\t\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\t\tlet count = 0;\n\t\t\t\t\t\t\t\t\t\tconst testIndex = testCheckbox.findIndex(\n\t\t\t\t\t\t\t\t\t\t\t(x) => x.testName === item.testName,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst index = item.parameter.findIndex(\n\t\t\t\t\t\t\t\t\t\t\t(x) => x.parameters === param.parameters,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tconst testCheckboxClone = testCheckbox;\n\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].parameter[index].checked =\n\t\t\t\t\t\t\t\t\t\t\tevent.target.checked;\n\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].parameter.map((param) => {\n\t\t\t\t\t\t\t\t\t\t\tif (param.checked) {\n\t\t\t\t\t\t\t\t\t\t\t\tcount = count + 1;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tif (count > 0) {\n\t\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].testChecked = true;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].testChecked = false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tcount === testCheckboxClone[testIndex].parameter.length\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].checkedAll = true;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ttestCheckboxClone[testIndex].checkedAll = false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tsetTestCheckbox([...testCheckboxClone]);\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel={param.parameters}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</React.Fragment>\n\t\t\t))}\n\n\t\t\t<h4>Health Packages</h4>\n\t\t\t{healthPackage.map((item) => (\n\t\t\t\t<React.Fragment key={item._id}>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\t\tkey={item._id}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={item.testChecked}\n\t\t\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\t\t\tconst testIndex = healthPackage.findIndex(\n\t\t\t\t\t\t\t\t\t\t(x) => x.testName === item.testName,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst healthPackageClone = healthPackage;\n\t\t\t\t\t\t\t\t\thealthPackageClone[testIndex].testChecked =\n\t\t\t\t\t\t\t\t\t\tevent.target.checked;\n\t\t\t\t\t\t\t\t\thealthPackageClone[testIndex].parameter.map((param) => {\n\t\t\t\t\t\t\t\t\t\tparam.checked = event.target.checked;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\thealthPackageClone[testIndex].checkedAll =\n\t\t\t\t\t\t\t\t\t\tevent.target.checked;\n\t\t\t\t\t\t\t\t\tsetHealthPackage([...healthPackageClone]);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel={item.testName}\n\t\t\t\t\t/>\n\t\t\t\t</React.Fragment>\n\t\t\t))}\n\t\t\t<div className={classes.payment}>\n\t\t\t\t{prevPayment.done ? (\n\t\t\t\t\t<div className={classes.prevPayment}>\n\t\t\t\t\t\t<h4>Previous Payment:{prevPayment.prevPaid}</h4>\n\t\t\t\t\t\t<h4>Due:{testFee - prevPayment.prevPaid}</h4>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t<h4>Total Cost::{testFee}</h4>\n\t\t\t\t<FormControl className={classes.formControl}>\n\t\t\t\t\t<InputLabel id=\"demo-simple-select-label\">\n\t\t\t\t\t\tMeans Of Payment\n\t\t\t\t\t</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tstyle={{ width: \"180px\" }}\n\t\t\t\t\t\tlabelId=\"demo-simple-select-label\"\n\t\t\t\t\t\tid=\"demo-simple-select\"\n\t\t\t\t\t\tvalue={meansOfPayment}\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tsetMeansOfPayment(event.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<MenuItem value=\"Cash\">Cash</MenuItem>\n\t\t\t\t\t\t<MenuItem value=\"Cheque\">Cheque</MenuItem>\n\t\t\t\t\t\t<MenuItem value=\"E-payment\">E-payment</MenuItem>\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t\t<div className={classes.paymentDone}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tlabel=\"Payment Amount\"\n\t\t\t\t\t\tvalue={paymentAmount}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tsetPaymentAmount(event.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t/>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tclassName={classes.checkbox}\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={fullPayment}\n\t\t\t\t\t\t\t\tonChange={handleFullPayment}\n\t\t\t\t\t\t\t\tname=\"testCompleted\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel=\"Full Payment\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Button\n\t\t\t\tclassName={classes.tableButton}\n\t\t\t\tclassName={classes.button}\n\t\t\t\tvariant=\"contained\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tstyle={{ width: \"140px\" }}\n\t\t\t\tonClick={handleSubmit}\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</Button>\n\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default TestRequestForm;\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/SearchBilling.js",[],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/Bill.js",["292","293","294","295","296","297","298","299","300","301"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport {\n\tmakeStyles,\n\tButton,\n\tTypography,\n\tTextareaAutosize,\n\tCheckbox,\n\tFormControlLabel,\n\tTableCell,\n\tTableRow,\n\tTable,\n\tTableContainer,\n\tTableBody,\n\tTableHead,\n} from \"@material-ui/core\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\n\nconst useStyles = makeStyles((theme) => ({\n\tpaper: {\n\t\tpadding: \"1em 2em 2em 2em\",\n\t\tmargin: \"8em 2em 2em 2em\",\n\t\theight: \"95em\",\n\t},\n\tprintButton: {\n\t\tmarginLeft: \"85%\",\n\t\tmarginTop: \"5%\",\n\t\twidth: \"200px\",\n\t\tpaddingLeft: \"20px\",\n\t\theight: \"3.3em\",\n\t},\n\tparent: {\n\t\tposition: \"relative\",\n\t\twidth: \"100%\",\n\t\theight: \"100px\",\n\t},\n\tTypo: {\n\t\tmarginRight: \"5\",\n\t\tmarginBottom: \"5\",\n\t},\n\tcenter: {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\twidth: \"200px\",\n\t\tright: \"40%\",\n\t},\n\tlast: {\n\t\tposition: \"absolute\",\n\t\ttop: 0,\n\t\twidth: \"200px\",\n\t\tright: theme.spacing(0),\n\t},\n}));\n\nexport default function Bill(props) {\n\tconst classes = useStyles();\n\tconst sampleDetails = props.location.state;\n\tconst [date, setDate] = React.useState(new Date());\n\tconst [rows, setRows] = React.useState([]);\n\tconst [totalCost, setTotalCost] = React.useState(0);\n\tconst [prevPayment, setPrevPayment] = React.useState(0);\n\n\tuseEffect(() => {\n\t\thandleFirstLoad();\n\t\thandlePaymentInfo();\n\t}, []);\n\n\tconst handleFirstLoad = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axios.get(\n\t\t\t\t`/testRequest/find/${sampleDetails._id}`,\n\t\t\t);\n\t\t\tconst rowInfo = data[0].toTest.map((item) => {\n\t\t\t\tlet testCost = 0;\n\t\t\t\titem.parameter.map((param) => {\n\t\t\t\t\ttestCost += param.cost;\n\t\t\t\t});\n\t\t\t\treturn {\n\t\t\t\t\ttestName: item.testName,\n\t\t\t\t\ttestCost: testCost,\n\t\t\t\t};\n\t\t\t});\n\t\t\tconsole.log();\n\t\t\tsetRows([...rowInfo]);\n\t\t\tsetTotalCost(data[0].testFee);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handlePaymentInfo = async () => {\n\t\ttry {\n\t\t\ttry {\n\t\t\t\tlet previouslyPaid = 0;\n\t\t\t\tconst res = await axios.get(\"/statement/sample\", {\n\t\t\t\t\tparams: { sampleNo: sampleDetails.sampleNo },\n\t\t\t\t});\n\t\t\t\tif (res.data.length > 0) {\n\t\t\t\t\tres.data.map((item) => {\n\t\t\t\t\t\tpreviouslyPaid += item.amount;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tsetPrevPayment(previouslyPaid);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\treturn (\n\t\t<div className={classes.paper}>\n\t\t\t<div className={classes.parent}>\n\t\t\t\t<div>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tCustomer Name : {sampleDetails.customerName}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tPet Name : {sampleDetails.petName}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.center}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tBreed: {sampleDetails.breed}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tSample No: {sampleDetails.sampleNo}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.last}>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tDate: {date.toLocaleDateString()}\n\t\t\t\t\t</Typography>\n\t\t\t\t\t<Typography className={classes.Typo}>\n\t\t\t\t\t\tSampling Date:{\" \"}\n\t\t\t\t\t\t{new Date(sampleDetails.samplingDate).toLocaleDateString()}\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{/* TableSpace */}\n\t\t\t{rows.length > 0 ? (\n\t\t\t\t<div>\n\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t<Table className={classes.table} aria-label=\"spanning table\">\n\t\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">Tests</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">Price</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t{rows.map((row) => (\n\t\t\t\t\t\t\t\t\t<TableRow key={row.testName}>\n\t\t\t\t\t\t\t\t\t\t{/* <TableCell>{row.desc}</TableCell> */}\n\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">{row.testName}</TableCell>\n\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">{row.testCost}</TableCell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t<b>Total</b>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">{totalCost}</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t<b>Amount Paid</b>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">{prevPayment}</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t<b>Due Fee</b>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t{totalCost - prevPayment}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</TableContainer>\n\t\t\t\t\t<div className=\"no-print\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tclassName={classes.printButton}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\twindow.print();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPrint\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h2>Add Test Details !!!!</h2>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/Statement.js",["302"],"/home/sherlock/Workdev/Finished Product/lims-frontend/src/Components/PrintStatement.js",["303"],{"ruleId":"304","replacedBy":"305"},{"ruleId":"306","replacedBy":"307"},{"ruleId":"308","severity":1,"message":"309","line":24,"column":35,"nodeType":"310","messageId":"311","endLine":24,"endColumn":40},{"ruleId":"308","severity":1,"message":"312","line":26,"column":23,"nodeType":"310","messageId":"311","endLine":26,"endColumn":34},{"ruleId":"308","severity":1,"message":"313","line":12,"column":10,"nodeType":"310","messageId":"311","endLine":12,"endColumn":18},{"ruleId":"308","severity":1,"message":"314","line":31,"column":25,"nodeType":"310","messageId":"311","endLine":31,"endColumn":37},{"ruleId":"308","severity":1,"message":"315","line":102,"column":16,"nodeType":"310","messageId":"311","endLine":102,"endColumn":24},{"ruleId":"316","severity":1,"message":"317","line":127,"column":5,"nodeType":"318","endLine":127,"endColumn":12,"suggestions":"319"},{"ruleId":"308","severity":1,"message":"320","line":317,"column":18,"nodeType":"310","messageId":"311","endLine":317,"endColumn":21},{"ruleId":"308","severity":1,"message":"321","line":3,"column":21,"nodeType":"310","messageId":"311","endLine":3,"endColumn":26},{"ruleId":"316","severity":1,"message":"322","line":57,"column":5,"nodeType":"318","endLine":57,"endColumn":17,"suggestions":"323"},{"ruleId":"308","severity":1,"message":"321","line":9,"column":8,"nodeType":"310","messageId":"311","endLine":9,"endColumn":13},{"ruleId":"308","severity":1,"message":"324","line":13,"column":8,"nodeType":"310","messageId":"311","endLine":13,"endColumn":17},{"ruleId":"325","severity":1,"message":"326","line":25,"column":17,"nodeType":"318","messageId":"327","endLine":84,"endColumn":2},{"ruleId":"308","severity":1,"message":"328","line":103,"column":8,"nodeType":"310","messageId":"311","endLine":103,"endColumn":13},{"ruleId":"316","severity":1,"message":"329","line":107,"column":5,"nodeType":"318","endLine":107,"endColumn":18,"suggestions":"330"},{"ruleId":"308","severity":1,"message":"331","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"315","line":64,"column":16,"nodeType":"310","messageId":"311","endLine":64,"endColumn":24},{"ruleId":"316","severity":1,"message":"317","line":85,"column":5,"nodeType":"318","endLine":85,"endColumn":12,"suggestions":"332"},{"ruleId":"333","severity":1,"message":"334","line":143,"column":6,"nodeType":"335","endLine":143,"endColumn":32},{"ruleId":"333","severity":1,"message":"334","line":192,"column":6,"nodeType":"335","endLine":196,"endColumn":8},{"ruleId":"308","severity":1,"message":"320","line":219,"column":16,"nodeType":"310","messageId":"311","endLine":219,"endColumn":19},{"ruleId":"308","severity":1,"message":"336","line":110,"column":18,"nodeType":"310","messageId":"311","endLine":110,"endColumn":28},{"ruleId":"308","severity":1,"message":"337","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":36},{"ruleId":"316","severity":1,"message":"338","line":131,"column":5,"nodeType":"318","endLine":131,"endColumn":18,"suggestions":"339"},{"ruleId":"316","severity":1,"message":"340","line":139,"column":5,"nodeType":"318","endLine":139,"endColumn":17,"suggestions":"341"},{"ruleId":"316","severity":1,"message":"342","line":147,"column":5,"nodeType":"318","endLine":147,"endColumn":20,"suggestions":"343"},{"ruleId":"344","severity":1,"message":"345","line":400,"column":34,"nodeType":"346","messageId":"347","endLine":400,"endColumn":36},{"ruleId":"348","severity":1,"message":"349","line":401,"column":27,"nodeType":"350","messageId":"351","endLine":401,"endColumn":29},{"ruleId":"348","severity":1,"message":"349","line":401,"column":52,"nodeType":"350","messageId":"351","endLine":401,"endColumn":54},{"ruleId":"308","severity":1,"message":"321","line":11,"column":8,"nodeType":"310","messageId":"311","endLine":11,"endColumn":13},{"ruleId":"308","severity":1,"message":"324","line":15,"column":8,"nodeType":"310","messageId":"311","endLine":15,"endColumn":17},{"ruleId":"308","severity":1,"message":"352","line":53,"column":9,"nodeType":"310","messageId":"311","endLine":53,"endColumn":14},{"ruleId":"308","severity":1,"message":"336","line":55,"column":18,"nodeType":"310","messageId":"311","endLine":55,"endColumn":28},{"ruleId":"316","severity":1,"message":"322","line":82,"column":5,"nodeType":"318","endLine":82,"endColumn":17,"suggestions":"353"},{"ruleId":"316","severity":1,"message":"329","line":86,"column":5,"nodeType":"318","endLine":86,"endColumn":18,"suggestions":"354"},{"ruleId":"308","severity":1,"message":"321","line":3,"column":21,"nodeType":"310","messageId":"311","endLine":3,"endColumn":26},{"ruleId":"308","severity":1,"message":"355","line":105,"column":26,"nodeType":"310","messageId":"311","endLine":105,"endColumn":44},{"ruleId":"308","severity":1,"message":"356","line":115,"column":16,"nodeType":"310","messageId":"311","endLine":115,"endColumn":24},{"ruleId":"316","severity":1,"message":"357","line":140,"column":5,"nodeType":"318","endLine":140,"endColumn":7,"suggestions":"358"},{"ruleId":"316","severity":1,"message":"322","line":148,"column":5,"nodeType":"318","endLine":148,"endColumn":17,"suggestions":"359"},{"ruleId":"344","severity":1,"message":"360","line":152,"column":26,"nodeType":"346","messageId":"361","endLine":152,"endColumn":28},{"ruleId":"308","severity":1,"message":"362","line":231,"column":12,"nodeType":"310","messageId":"311","endLine":231,"endColumn":19},{"ruleId":"344","severity":1,"message":"360","line":345,"column":61,"nodeType":"346","messageId":"361","endLine":345,"endColumn":63},{"ruleId":"308","severity":1,"message":"363","line":442,"column":19,"nodeType":"310","messageId":"311","endLine":442,"endColumn":22},{"ruleId":"308","severity":1,"message":"364","line":445,"column":19,"nodeType":"310","messageId":"311","endLine":445,"endColumn":22},{"ruleId":"308","severity":1,"message":"331","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"365","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":33},{"ruleId":"308","severity":1,"message":"366","line":139,"column":24,"nodeType":"310","messageId":"311","endLine":139,"endColumn":40},{"ruleId":"308","severity":1,"message":"367","line":145,"column":15,"nodeType":"310","messageId":"311","endLine":145,"endColumn":22},{"ruleId":"316","severity":1,"message":"368","line":161,"column":5,"nodeType":"318","endLine":161,"endColumn":7,"suggestions":"369"},{"ruleId":"344","severity":1,"message":"360","line":169,"column":20,"nodeType":"346","messageId":"361","endLine":169,"endColumn":22},{"ruleId":"344","severity":1,"message":"360","line":174,"column":61,"nodeType":"346","messageId":"361","endLine":174,"endColumn":63},{"ruleId":"308","severity":1,"message":"370","line":232,"column":11,"nodeType":"310","messageId":"311","endLine":232,"endColumn":21},{"ruleId":"344","severity":1,"message":"360","line":266,"column":26,"nodeType":"346","messageId":"361","endLine":266,"endColumn":28},{"ruleId":"308","severity":1,"message":"371","line":275,"column":10,"nodeType":"310","messageId":"311","endLine":275,"endColumn":16},{"ruleId":"308","severity":1,"message":"336","line":113,"column":18,"nodeType":"310","messageId":"311","endLine":113,"endColumn":28},{"ruleId":"308","severity":1,"message":"336","line":106,"column":18,"nodeType":"310","messageId":"311","endLine":106,"endColumn":28},{"ruleId":"308","severity":1,"message":"315","line":170,"column":16,"nodeType":"310","messageId":"311","endLine":170,"endColumn":24},{"ruleId":"308","severity":1,"message":"372","line":175,"column":19,"nodeType":"310","messageId":"311","endLine":175,"endColumn":30},{"ruleId":"316","severity":1,"message":"373","line":189,"column":5,"nodeType":"318","endLine":189,"endColumn":19,"suggestions":"374"},{"ruleId":"316","severity":1,"message":"322","line":201,"column":5,"nodeType":"318","endLine":201,"endColumn":17,"suggestions":"375"},{"ruleId":"348","severity":1,"message":"349","line":432,"column":44,"nodeType":"350","messageId":"351","endLine":432,"endColumn":46},{"ruleId":"333","severity":1,"message":"334","line":461,"column":7,"nodeType":"335","endLine":461,"endColumn":32},{"ruleId":"308","severity":1,"message":"320","line":507,"column":18,"nodeType":"310","messageId":"311","endLine":507,"endColumn":21},{"ruleId":"308","severity":1,"message":"321","line":11,"column":8,"nodeType":"310","messageId":"311","endLine":11,"endColumn":13},{"ruleId":"308","severity":1,"message":"324","line":15,"column":8,"nodeType":"310","messageId":"311","endLine":15,"endColumn":17},{"ruleId":"308","severity":1,"message":"352","line":53,"column":9,"nodeType":"310","messageId":"311","endLine":53,"endColumn":14},{"ruleId":"308","severity":1,"message":"336","line":55,"column":18,"nodeType":"310","messageId":"311","endLine":55,"endColumn":28},{"ruleId":"316","severity":1,"message":"322","line":82,"column":5,"nodeType":"318","endLine":82,"endColumn":17,"suggestions":"376"},{"ruleId":"316","severity":1,"message":"329","line":86,"column":5,"nodeType":"318","endLine":86,"endColumn":18,"suggestions":"377"},{"ruleId":"308","severity":1,"message":"321","line":3,"column":21,"nodeType":"310","messageId":"311","endLine":3,"endColumn":26},{"ruleId":"316","severity":1,"message":"322","line":58,"column":5,"nodeType":"318","endLine":58,"endColumn":17,"suggestions":"378"},{"ruleId":"308","severity":1,"message":"331","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"315","line":64,"column":16,"nodeType":"310","messageId":"311","endLine":64,"endColumn":24},{"ruleId":"316","severity":1,"message":"317","line":85,"column":5,"nodeType":"318","endLine":85,"endColumn":12,"suggestions":"379"},{"ruleId":"333","severity":1,"message":"334","line":143,"column":6,"nodeType":"335","endLine":143,"endColumn":32},{"ruleId":"308","severity":1,"message":"320","line":212,"column":16,"nodeType":"310","messageId":"311","endLine":212,"endColumn":19},{"ruleId":"308","severity":1,"message":"321","line":11,"column":8,"nodeType":"310","messageId":"311","endLine":11,"endColumn":13},{"ruleId":"316","severity":1,"message":"322","line":167,"column":5,"nodeType":"318","endLine":167,"endColumn":17,"suggestions":"380"},{"ruleId":"316","severity":1,"message":"329","line":171,"column":5,"nodeType":"318","endLine":171,"endColumn":18,"suggestions":"381"},{"ruleId":"316","severity":1,"message":"382","line":183,"column":5,"nodeType":"318","endLine":183,"endColumn":7,"suggestions":"383"},{"ruleId":"308","severity":1,"message":"320","line":243,"column":10,"nodeType":"310","messageId":"311","endLine":243,"endColumn":13},{"ruleId":"308","severity":1,"message":"321","line":4,"column":2,"nodeType":"310","messageId":"311","endLine":4,"endColumn":7},{"ruleId":"308","severity":1,"message":"384","line":11,"column":2,"nodeType":"310","messageId":"311","endLine":11,"endColumn":16},{"ruleId":"308","severity":1,"message":"385","line":12,"column":2,"nodeType":"310","messageId":"311","endLine":12,"endColumn":7},{"ruleId":"308","severity":1,"message":"324","line":13,"column":2,"nodeType":"310","messageId":"311","endLine":13,"endColumn":11},{"ruleId":"308","severity":1,"message":"386","line":14,"column":2,"nodeType":"310","messageId":"311","endLine":14,"endColumn":10},{"ruleId":"308","severity":1,"message":"387","line":15,"column":2,"nodeType":"310","messageId":"311","endLine":15,"endColumn":11},{"ruleId":"308","severity":1,"message":"388","line":16,"column":2,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"308","severity":1,"message":"336","line":106,"column":18,"nodeType":"310","messageId":"311","endLine":106,"endColumn":28},{"ruleId":"333","severity":1,"message":"334","line":238,"column":6,"nodeType":"335","endLine":238,"endColumn":31},{"ruleId":"308","severity":1,"message":"320","line":265,"column":17,"nodeType":"310","messageId":"311","endLine":265,"endColumn":20},{"ruleId":"304","replacedBy":"389"},{"ruleId":"306","replacedBy":"390"},{"ruleId":"308","severity":1,"message":"352","line":86,"column":32,"nodeType":"310","messageId":"311","endLine":86,"endColumn":37},{"ruleId":"308","severity":1,"message":"320","line":92,"column":10,"nodeType":"310","messageId":"311","endLine":92,"endColumn":13},{"ruleId":"308","severity":1,"message":"391","line":193,"column":9,"nodeType":"310","messageId":"311","endLine":193,"endColumn":13},{"ruleId":"316","severity":1,"message":"340","line":225,"column":5,"nodeType":"318","endLine":225,"endColumn":17,"suggestions":"392"},{"ruleId":"308","severity":1,"message":"320","line":265,"column":11,"nodeType":"310","messageId":"311","endLine":265,"endColumn":14},{"ruleId":"316","severity":1,"message":"393","line":107,"column":5,"nodeType":"318","endLine":107,"endColumn":15,"suggestions":"394"},{"ruleId":"316","severity":1,"message":"373","line":115,"column":5,"nodeType":"318","endLine":115,"endColumn":19,"suggestions":"395"},{"ruleId":"316","severity":1,"message":"396","line":121,"column":5,"nodeType":"318","endLine":121,"endColumn":24,"suggestions":"397"},{"ruleId":"308","severity":1,"message":"398","line":195,"column":11,"nodeType":"310","messageId":"311","endLine":195,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":315,"column":44,"nodeType":"350","messageId":"351","endLine":315,"endColumn":46},{"ruleId":"308","severity":1,"message":"365","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":33},{"ruleId":"308","severity":1,"message":"337","line":1,"column":35,"nodeType":"310","messageId":"311","endLine":1,"endColumn":44},{"ruleId":"316","severity":1,"message":"399","line":98,"column":5,"nodeType":"318","endLine":98,"endColumn":7,"suggestions":"400"},{"ruleId":"344","severity":1,"message":"360","line":103,"column":27,"nodeType":"346","messageId":"361","endLine":103,"endColumn":29},{"ruleId":"344","severity":1,"message":"360","line":105,"column":32,"nodeType":"346","messageId":"361","endLine":105,"endColumn":34},{"ruleId":"344","severity":1,"message":"360","line":112,"column":28,"nodeType":"346","messageId":"361","endLine":112,"endColumn":30},{"ruleId":"344","severity":1,"message":"360","line":114,"column":32,"nodeType":"346","messageId":"361","endLine":114,"endColumn":34},{"ruleId":"344","severity":1,"message":"360","line":329,"column":25,"nodeType":"346","messageId":"361","endLine":329,"endColumn":27},{"ruleId":"344","severity":1,"message":"360","line":387,"column":61,"nodeType":"346","messageId":"361","endLine":387,"endColumn":63},{"ruleId":"344","severity":1,"message":"360","line":421,"column":62,"nodeType":"346","messageId":"361","endLine":421,"endColumn":64},{"ruleId":"344","severity":1,"message":"360","line":466,"column":62,"nodeType":"346","messageId":"361","endLine":466,"endColumn":64},{"ruleId":"333","severity":1,"message":"334","line":534,"column":5,"nodeType":"335","endLine":534,"endColumn":31},{"ruleId":"308","severity":1,"message":"331","line":1,"column":17,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"365","line":1,"column":27,"nodeType":"310","messageId":"311","endLine":1,"endColumn":33},{"ruleId":"308","severity":1,"message":"401","line":7,"column":2,"nodeType":"310","messageId":"311","endLine":7,"endColumn":18},{"ruleId":"308","severity":1,"message":"402","line":8,"column":2,"nodeType":"310","messageId":"311","endLine":8,"endColumn":10},{"ruleId":"308","severity":1,"message":"403","line":9,"column":2,"nodeType":"310","messageId":"311","endLine":9,"endColumn":18},{"ruleId":"308","severity":1,"message":"404","line":18,"column":8,"nodeType":"310","messageId":"311","endLine":18,"endColumn":16},{"ruleId":"308","severity":1,"message":"367","line":59,"column":15,"nodeType":"310","messageId":"311","endLine":59,"endColumn":22},{"ruleId":"316","severity":1,"message":"405","line":67,"column":5,"nodeType":"318","endLine":67,"endColumn":7,"suggestions":"406"},{"ruleId":"344","severity":1,"message":"360","line":76,"column":32,"nodeType":"346","messageId":"361","endLine":76,"endColumn":34},{"ruleId":"344","severity":1,"message":"360","line":100,"column":26,"nodeType":"346","messageId":"361","endLine":100,"endColumn":28},{"ruleId":"316","severity":1,"message":"407","line":88,"column":5,"nodeType":"318","endLine":88,"endColumn":25,"suggestions":"408"},{"ruleId":"308","severity":1,"message":"409","line":2,"column":10,"nodeType":"310","messageId":"311","endLine":2,"endColumn":19},"no-native-reassign",["410"],"no-negated-in-lhs",["411"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'Redirect' is defined but never used.","'MTableHeader' is defined but never used.","'setReset' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'runSearch'. Either include it or remove the dependency array.","ArrayExpression",["412"],"'res' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["413"],"'TableHead' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'token' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'hadleFirstLoad'. Either include it or remove the dependency array.",["414"],"'useState' is defined but never used.",["415"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setColumns' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook React.useEffect has a missing dependency: 'handleFirstload'. Either include it or remove the dependency array.",["416"],"React Hook React.useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["417"],"React Hook React.useEffect has a missing dependency: 'fetchSearchPetResult'. Either include it or remove the dependency array.",["418"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'value' is assigned a value but never used.",["419"],["420"],"'SetCustomerDetails' is assigned a value but never used.","'setTests' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchTestName' and 'fetchUsedReagent'. Either include them or remove the dependency array.",["421"],["422"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","'respose' is assigned a value but never used.","'del' is assigned a value but never used.","'inc' is assigned a value but never used.","'useRef' is defined but never used.","'setSampleDetails' is assigned a value but never used.","'setDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCustomerDetails', 'fetchReport', and 'fetchTestDetails'. Either include them or remove the dependency array.",["423"],"'saveReport' is assigned a value but never used.","'status' is assigned a value but never used.","'setTestName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchCategorySearchResult'. Either include it or remove the dependency array.",["424"],["425"],["426"],["427"],["428"],["429"],["430"],["431"],"React Hook React.useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.",["432"],"'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.",["410"],["411"],"'data' is assigned a value but never used.",["433"],"React Hook useEffect has a missing dependency: 'fetchTestSearchResult'. Either include it or remove the dependency array.",["434"],["435"],"React Hook useEffect has a missing dependency: 'fetchReference'. Either include it or remove the dependency array.",["436"],"'saveReference' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'handlePreviousPayment' and 'handleReferenceRange'. Either include them or remove the dependency array.",["437"],"'TextareaAutosize' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'SnackBar' is defined but never used.","React Hook useEffect has missing dependencies: 'handleFirstLoad' and 'handlePaymentInfo'. Either include them or remove the dependency array.",["438"],"React Hook useEffect has a missing dependency: 'fetchCustomerSearchResult'. Either include it or remove the dependency array.",["439"],"'TextField' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"440","fix":"446"},{"desc":"447","fix":"448"},{"desc":"442","fix":"449"},{"desc":"450","fix":"451"},{"desc":"442","fix":"452"},{"desc":"444","fix":"453"},{"desc":"454","fix":"455"},{"desc":"442","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"442","fix":"461"},{"desc":"442","fix":"462"},{"desc":"444","fix":"463"},{"desc":"442","fix":"464"},{"desc":"440","fix":"465"},{"desc":"442","fix":"466"},{"desc":"444","fix":"467"},{"desc":"468","fix":"469"},{"desc":"442","fix":"470"},{"desc":"471","fix":"472"},{"desc":"459","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},"Update the dependencies array to be: [query, runSearch]",{"range":"482","text":"483"},"Update the dependencies array to be: [fetchSearchResult, inputValue]",{"range":"484","text":"485"},"Update the dependencies array to be: [hadleFirstLoad, rowsPerPage]",{"range":"486","text":"487"},{"range":"488","text":"483"},"Update the dependencies array to be: [handleFirstload, rowsPerPage]",{"range":"489","text":"490"},{"range":"491","text":"485"},"Update the dependencies array to be: [fetchSearchPetResult, petInputValue]",{"range":"492","text":"493"},{"range":"494","text":"485"},{"range":"495","text":"487"},"Update the dependencies array to be: [fetchTestName, fetchUsedReagent]",{"range":"496","text":"497"},{"range":"498","text":"485"},"Update the dependencies array to be: [fetchCustomerDetails, fetchReport, fetchTestDetails]",{"range":"499","text":"500"},"Update the dependencies array to be: [categoryName, fetchCategorySearchResult]",{"range":"501","text":"502"},{"range":"503","text":"485"},{"range":"504","text":"485"},{"range":"505","text":"487"},{"range":"506","text":"485"},{"range":"507","text":"483"},{"range":"508","text":"485"},{"range":"509","text":"487"},"Update the dependencies array to be: [props.location]",{"range":"510","text":"511"},{"range":"512","text":"485"},"Update the dependencies array to be: [fetchTestSearchResult, testName]",{"range":"513","text":"514"},{"range":"515","text":"502"},"Update the dependencies array to be: [testValue, animal, fetchReference]",{"range":"516","text":"517"},"Update the dependencies array to be: [handlePreviousPayment, handleReferenceRange]",{"range":"518","text":"519"},"Update the dependencies array to be: [handleFirstLoad, handlePaymentInfo]",{"range":"520","text":"521"},"Update the dependencies array to be: [customerInputValue, fetchCustomerSearchResult]",{"range":"522","text":"523"},[4067,4074],"[query, runSearch]",[1388,1400],"[fetchSearchResult, inputValue]",[2586,2599],"[hadleFirstLoad, rowsPerPage]",[3367,3374],[2866,2879],"[handleFirstload, rowsPerPage]",[2990,3002],[3122,3137],"[fetchSearchPetResult, petInputValue]",[2272,2284],[2337,2350],[4853,4855],"[fetchTestName, fetchUsedReagent]",[4960,4972],[4949,4951],"[fetchCustomerDetails, fetchReport, fetchTestDetails]",[5914,5928],"[categoryName, fetchCategorySearchResult]",[6123,6135],[2294,2306],[2359,2372],[1444,1456],[3389,3396],[4743,4755],[4808,4821],[5037,5039],"[props.location]",[5228,5240],[4102,4112],"[fetchTestSearchResult, testName]",[4235,4249],[4330,4349],"[testValue, animal, fetchReference]",[2400,2402],"[handlePreviousPayment, handleReferenceRange]",[1296,1298],"[handleFirstLoad, handlePaymentInfo]",[2297,2317],"[customerInputValue, fetchCustomerSearchResult]"]