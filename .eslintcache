[{"D:\\proj\\lims-frontend\\src\\index.js":"1","D:\\proj\\lims-frontend\\src\\App.js":"2","D:\\proj\\lims-frontend\\src\\reducers\\index.js":"3","D:\\proj\\lims-frontend\\src\\reducers\\authReducer.js":"4","D:\\proj\\lims-frontend\\src\\Components\\appBar.js":"5","D:\\proj\\lims-frontend\\src\\Components\\AddTest.js":"6","D:\\proj\\lims-frontend\\src\\Components\\PendingSample.js":"7","D:\\proj\\lims-frontend\\src\\action\\setUser.js":"8","D:\\proj\\lims-frontend\\src\\Components\\ImportReagent.js":"9","D:\\proj\\lims-frontend\\src\\Components\\register.js":"10","D:\\proj\\lims-frontend\\src\\Components\\AddReagent.js":"11","D:\\proj\\lims-frontend\\src\\Components\\login.js":"12","D:\\proj\\lims-frontend\\src\\Components\\AllReagent.js":"13","D:\\proj\\lims-frontend\\src\\Components\\AddCutomer.js":"14","D:\\proj\\lims-frontend\\src\\Components\\AddSample.js":"15","D:\\proj\\lims-frontend\\src\\Components\\AllSample.js":"16","D:\\proj\\lims-frontend\\src\\validation\\validator.js":"17","D:\\proj\\lims-frontend\\src\\Components\\SnackBar.js":"18","D:\\proj\\lims-frontend\\src\\api\\index.js":"19","D:\\proj\\lims-frontend\\src\\Components\\AllTest.js":"20","D:\\proj\\lims-frontend\\src\\Components\\EditTest.js":"21","D:\\proj\\lims-frontend\\src\\Components\\ProtectedRoute.js":"22"},{"size":585,"mtime":1615879392673,"results":"23","hashOfConfig":"24"},{"size":2299,"mtime":1617014495033,"results":"25","hashOfConfig":"24"},{"size":175,"mtime":1615879392675,"results":"26","hashOfConfig":"24"},{"size":188,"mtime":1615879392674,"results":"27","hashOfConfig":"24"},{"size":5595,"mtime":1616911590229,"results":"28","hashOfConfig":"24"},{"size":10450,"mtime":1616311719684,"results":"29","hashOfConfig":"24"},{"size":6232,"mtime":1616486827401,"results":"30","hashOfConfig":"24"},{"size":106,"mtime":1615879392669,"results":"31","hashOfConfig":"24"},{"size":6038,"mtime":1616772856513,"results":"32","hashOfConfig":"24"},{"size":8842,"mtime":1617028870345,"results":"33","hashOfConfig":"24"},{"size":8170,"mtime":1616773634132,"results":"34","hashOfConfig":"24"},{"size":3574,"mtime":1615882075438,"results":"35","hashOfConfig":"24"},{"size":7490,"mtime":1616689317241,"results":"36","hashOfConfig":"24"},{"size":6163,"mtime":1616743125903,"results":"37","hashOfConfig":"24"},{"size":11454,"mtime":1617019337569,"results":"38","hashOfConfig":"24"},{"size":10875,"mtime":1616743125934,"results":"39","hashOfConfig":"24"},{"size":2248,"mtime":1617015501179,"results":"40","hashOfConfig":"24"},{"size":563,"mtime":1615964935018,"results":"41","hashOfConfig":"24"},{"size":187,"mtime":1615964988270,"results":"42","hashOfConfig":"24"},{"size":11707,"mtime":1617000306760,"results":"43","hashOfConfig":"24"},{"size":11025,"mtime":1616999794369,"results":"44","hashOfConfig":"24"},{"size":727,"mtime":1617013763516,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1t17olv",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\proj\\lims-frontend\\src\\index.js",[],["99","100"],"D:\\proj\\lims-frontend\\src\\App.js",["101","102"],"D:\\proj\\lims-frontend\\src\\reducers\\index.js",[],"D:\\proj\\lims-frontend\\src\\reducers\\authReducer.js",[],"D:\\proj\\lims-frontend\\src\\Components\\appBar.js",[],"D:\\proj\\lims-frontend\\src\\Components\\AddTest.js",["103"],"import React from \"react\";\r\nimport \"./myStyle.css\";\r\nimport { makeStyles, Button, TextField, Chip } from \"@material-ui/core\";\r\nimport { forwardRef } from \"react\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport {\r\n  addTestValidator,\r\n  addParameterValidator,\r\n} from \"../validation/validator\";\r\nimport axios from \"../api\";\r\nimport SnackBar from \"./SnackBar\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"1em 2em 2em 2em\",\r\n    margin: \"4em 2em 2em 2em\",\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  position: {\r\n    marginLeft: theme.spacing(8),\r\n    flex: \"1 auto\",\r\n  },\r\n  buttons: {\r\n    marginTop: theme.spacing(6),\r\n    marginLeft: theme.spacing(120),\r\n  },\r\n  button: {\r\n    marginLeft: theme.spacing(6),\r\n    width: \"200px\",\r\n    paddingLeft: \"20px\",\r\n    height: \"3.3em\",\r\n  },\r\n  table: {\r\n    marginTop: \"7%\",\r\n    marginLeft: \"10%\",\r\n    marginRight: \"10%\",\r\n  },\r\n  saveButton: {\r\n    marginLeft: \"90%\",\r\n    marginTop: \"5%\",\r\n    width: \"200px\",\r\n    paddingLeft: \"20px\",\r\n    height: \"3.3em\",\r\n    background: \"#28B463\",\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nconst AddTest = () => {\r\n  const classes = useStyles();\r\n  const [addTest, setAddTest] = React.useState({\r\n    testName: \"\",\r\n    testAmount: \"\",\r\n  });\r\n  const [addParameter, setAddparameter] = React.useState({\r\n    parameters: \"\",\r\n    units: \"\",\r\n    referenceRange: \"\",\r\n  });\r\n  const [parameter, setParameter] = React.useState([]);\r\n\r\n  const [columns, setColumns] = React.useState([\r\n    { title: \"Parameters\", field: \"parameters\" },\r\n    { title: \"Units\", field: \"units\" },\r\n    { title: \"Reference Range\", field: \"referenceRange\" },\r\n  ]);\r\n  const [message, setMessage] = React.useState();\r\n  const [status, setStatus] = React.useState();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (input) => (event) => {\r\n    setAddTest({ ...addTest, [input]: event.target.value });\r\n  };\r\n\r\n  const handleParameters = (input) => (event) => {\r\n    setAddparameter({ ...addParameter, [input]: event.target.value });\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const testError = addTestValidator(addTest);\r\n    const parameterError = addParameterValidator(addParameter);\r\n    if (testError.error) {\r\n      setMessage(testError.error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (parameterError.error) {\r\n      setMessage(parameterError.error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (!testError.error && !parameterError.error) {\r\n      setParameter([...parameter, addParameter]);\r\n      setAddparameter({ parameters: \"\", units: \"\", referenceRange: \"\" });\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const test = {\r\n        name: addTest.testName,\r\n        amount: addTest.testAmount,\r\n        parameter: parameter,\r\n      };\r\n      console.log(test);\r\n      const res = await axios.post(\"/test/add\", test);\r\n      console.log(res.data);\r\n      setMessage(res.data);\r\n      setStatus(\"success\");\r\n      handleClick();\r\n      setAddTest({\r\n        testName: \"\",\r\n        testAmount: \"\",\r\n      });\r\n      setParameter([]);\r\n    } catch (e) {\r\n      setMessage(e.Error);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <React.Fragment>\r\n        <h4>Test Details</h4>\r\n        <div className={classes.root}>\r\n          <TextField\r\n            label=\"Test Name\"\r\n            variant=\"outlined\"\r\n            value={addTest.testName}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleChange(\"testName\")}\r\n          />\r\n          <TextField\r\n            label=\"Test Amount\"\r\n            variant=\"outlined\"\r\n            value={addTest.testAmount}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"number\"\r\n            onChange={handleChange(\"testAmount\")}\r\n          />\r\n        </div>\r\n        <h4>Bio-Chemical Parameters</h4>\r\n        <div className={classes.root}>\r\n          <TextField\r\n            label=\"Parameter\"\r\n            variant=\"outlined\"\r\n            value={addParameter.parameters}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"parameters\")}\r\n          />\r\n          <TextField\r\n            label=\"unit\"\r\n            variant=\"outlined\"\r\n            value={addParameter.units}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"units\")}\r\n          />\r\n          <TextField\r\n            label=\"Reference Range\"\r\n            variant=\"outlined\"\r\n            value={addParameter.referenceRange}\r\n            style={{ width: 80 }}\r\n            className={classes.position}\r\n            type=\"string\"\r\n            onChange={handleParameters(\"referenceRange\")}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={handleAdd}\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n        <div className={classes.table}>\r\n          {parameter.length ? (\r\n            <div>\r\n              <MaterialTable\r\n                showEmptyDataSourceMessage={false}\r\n                title=\"Add tests\"\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                data={parameter}\r\n                options={{\r\n                  search: false,\r\n                }}\r\n                components={{\r\n                  Toolbar: (props) => (\r\n                    <div>\r\n                      <MTableToolbar {...props} />\r\n                      <div style={{ padding: \"0px 10px\" }}>\r\n                        <Chip\r\n                          label=\"Test Name\"\r\n                          color=\"primary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                        <Chip\r\n                          label={addTest.testName}\r\n                          color=\"secondary\"\r\n                          style={{ marginRight: 50 }}\r\n                        />\r\n                        <Chip\r\n                          label=\"Test Amount\"\r\n                          color=\"primary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                        <Chip\r\n                          label={addTest.testAmount}\r\n                          color=\"secondary\"\r\n                          style={{ marginRight: 5 }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ),\r\n                }}\r\n                editable={{\r\n                  onRowDelete: (oldData) =>\r\n                    new Promise((resolve, reject) => {\r\n                      try {\r\n                        const name = oldData.parameters;\r\n                        const filterdParameter = parameter.filter(\r\n                          (item) => item.parameters !== name\r\n                        );\r\n                        setParameter([...filterdParameter]);\r\n                        resolve();\r\n                      } catch (e) {\r\n                        console.log(e);\r\n                        reject();\r\n                      }\r\n                    }),\r\n                }}\r\n              />\r\n              <div>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.saveButton}\r\n                  onClick={handleSave}\r\n                >\r\n                  save\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div>\r\n          <SnackBar\r\n            messege={message}\r\n            open={open}\r\n            handleClose={handleClose}\r\n            status={status}\r\n          />\r\n        </div>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTest;\r\n","D:\\proj\\lims-frontend\\src\\Components\\PendingSample.js",["104"],"import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport axios from \"../api\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nconst columns = [\r\n  { id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\r\n  {\r\n    id: \"customerName\",\r\n    label: \"Customer Name\",\r\n  },\r\n  { id: \"testName\", label: \"Test Name\", minWidth: 100 },\r\n  {\r\n    id: \"dueDate\",\r\n    label: \"Due Date\",\r\n    // minWidth: 170,\r\n    // align: 'right',\r\n    format: (value) => {\r\n      return value.substring(0, 10);\r\n    },\r\n  },\r\n  {\r\n    id: \"paymentStatus\",\r\n    label: \"Payment\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: \"collectedBy\",\r\n    label: \"Collected By\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    minWidth: 100,\r\n    format: (value) =>\r\n      value ? (\r\n        <Chip color=\"primary\" label=\"done\" />\r\n      ) : (\r\n        <Chip color=\"secondary\" label=\"pending\" />\r\n      ),\r\n  },\r\n  {\r\n    id: \"action\",\r\n    label: \"\",\r\n    format: () => (\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        Generate Report\r\n      </Button>\r\n    ),\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: \"7%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n});\r\n\r\nexport default function PendingSample() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = React.useState([]);\r\n  const [total, setTotal] = React.useState(0);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  React.useEffect(() => {\r\n    hadleFirstLoad();\r\n  }, [rowsPerPage]);\r\n\r\n  function TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n\r\n    const handleBackButtonClick = (event) => {\r\n      handleChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = async (event) => {\r\n      if (rows.length !== total) {\r\n        try {\r\n          const { data } = await axios.get(\"/sample/paginate\", {\r\n            params: { page: page + 1, limit: rowsPerPage },\r\n          });\r\n          setRows([...rows, ...data.rows]);\r\n\r\n          console.log(rows);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      handleChangePage(event, page + 1);\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <IconButton\r\n          onClick={handleBackButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"previous page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowRight />\r\n          ) : (\r\n            <KeyboardArrowLeft />\r\n          )}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleNextButtonClick}\r\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\r\n          aria-label=\"next page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowLeft />\r\n          ) : (\r\n            <KeyboardArrowRight />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const hadleFirstLoad = async () => {\r\n    try {\r\n      const { data } = await axios.get(\"/sample/paginate\", {\r\n        params: { page: page, limit: rowsPerPage },\r\n      });\r\n      setRows([...data.rows]);\r\n      console.log(data.total);\r\n      setTotal(data.total);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format ? column.format(value) : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 100]}\r\n        component=\"div\"\r\n        count={total}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        ActionsComponent={TablePaginationActions}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","D:\\proj\\lims-frontend\\src\\action\\setUser.js",[],"D:\\proj\\lims-frontend\\src\\Components\\ImportReagent.js",["105"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./myStyle.css\";\r\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport axiosi from \"../api\";\r\n\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { importReagentValidator } from \"../validation/validator\";\r\nimport SnackBar from \"./SnackBar\";\r\nconst styles = makeStyles({\r\n  paper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    margin: \"30\",\r\n    padding: \"5\",\r\n    backgroundColor: \"#f7f7f7\",\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  items: {\r\n    height: \"80%\",\r\n  },\r\n  button: {\r\n    marginTop: \"2rem\",\r\n  },\r\n  space: {\r\n    marginTop: \"2rem\",\r\n  },\r\n});\r\n\r\nconst ImportReagent = () => {\r\n  const classes = styles();\r\n  let cancelToken = useRef(\"\");\r\n  const autoC = useRef(null);\r\n\r\n  const [volume, setVolume] = useState(0);\r\n  const [unit, setUnit] = useState(\"Select Reagent\");\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [open, setOpen] = React.useState(false);\r\n  const [options, setOptions] = useState([]);\r\n  const [value, setValue] = useState({});\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [status, setStatus] = React.useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (inputValue) {\r\n      fetchSearchResult();\r\n    } else {\r\n      setOptions([]);\r\n    }\r\n  }, [inputValue]);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    autoC.current\r\n      .getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\r\n      .click();\r\n    setUnit(\"Select Reagent\");\r\n    setVolume(0);\r\n  };\r\n\r\n  const fetchSearchResult = async () => {\r\n    if (cancelToken.current) {\r\n      cancelToken.current.cancel();\r\n    }\r\n    cancelToken.current = axios.CancelToken.source();\r\n    try {\r\n      const { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\r\n        cancelToken: cancelToken.current.token,\r\n      });\r\n      console.log(\"search complete\");\r\n      setOptions(data);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const handleSubmit = async () => {\r\n    const { error } = importReagentValidator({\r\n      reagentName: value,\r\n      volume: volume,\r\n    });\r\n    if (error) {\r\n      setMessage(error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (!error) {\r\n      if (value.volume - volume > 0) {\r\n        try {\r\n          const { data } = await axiosi.put(`/reagent/import/${value._id}`, {\r\n            volume: volume,\r\n          });\r\n          setMessage(data);\r\n          setStatus(\"success\");\r\n          handleClick();\r\n          handleReset();\r\n        } catch (e) {\r\n          setMessage(e.response);\r\n          setStatus(\"error\");\r\n          handleClick();\r\n          handleReset();\r\n        }\r\n      } else {\r\n        setMessage(\"Maximum import volume exceeded!!!\");\r\n        setStatus(\"error\");\r\n        handleClick();\r\n      }\r\n    }\r\n  };\r\n  // const handleChange = (event) => {\r\n  //     setRole(event.target.value);\r\n  //   };\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <Paper style={{ height: \"100vh\" }}>\r\n          <div className={classes.paper}>\r\n            <div className={classes.input}>\r\n              <Autocomplete\r\n                ref={autoC}\r\n                id=\"combo-box-demo\"\r\n                getOptionLabel={(option) => option.reagentName}\r\n                getOptionSelected={(option, value) => option._id === value._id}\r\n                inputValue={inputValue}\r\n                onChange={(event, newValue) => {\r\n                  setValue(newValue);\r\n                  if (newValue) {\r\n                    setUnit(newValue.unit);\r\n                  } else {\r\n                    setUnit(\"Select Reagent\");\r\n                  }\r\n                  //   if (!newValue) {\r\n                  //     setData([]);\r\n                  //   }\r\n                  //   setValue(newValue);\r\n                  //   fetchAllSample(newValue);\r\n                }}\r\n                onInputChange={(event, newInputValue) => {\r\n                  setInputValue(newInputValue);\r\n                }}\r\n                options={options}\r\n                style={{ width: 300 }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Reagent Name\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n              <TextField\r\n                className={classes.space}\r\n                id=\"filled-read-only-input\"\r\n                value={unit}\r\n                label=\"Unit\"\r\n                defaultValue=\"Select Reagent\"\r\n                InputProps={{\r\n                  readOnly: true,\r\n                }}\r\n                variant=\"outlined\"\r\n              />\r\n              <TextField\r\n                className={classes.space}\r\n                value={volume}\r\n                id=\"outlined-number\"\r\n                label=\"Volume\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                onChange={(event) => setVolume(event.target.value)}\r\n              />\r\n\r\n              <Button\r\n                onClick={handleSubmit}\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Paper>\r\n      </React.Fragment>\r\n      <SnackBar\r\n        messege={message}\r\n        open={open}\r\n        handleClose={handleClose}\r\n        status={status}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportReagent;\r\n","D:\\proj\\lims-frontend\\src\\Components\\register.js",["106","107","108","109","110","111","112","113","114","115"],"D:\\proj\\lims-frontend\\src\\Components\\AddReagent.js",["116","117","118","119","120"],"import React, { useState, forwardRef } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { TextField, Button, CssBaseline } from \"@material-ui/core\";\r\nimport axios from \"../api\";\r\nimport { addReagentValidator } from \"../validation/validator.js\";\r\nimport SnackBar from \"./SnackBar\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst columns = [\r\n  { title: \"Reagent\", field: \"reagentName\" },\r\n  {\r\n    title: \"Unit\",\r\n    field: \"unit\",\r\n  },\r\n  { title: \"In Stock\", field: \"volume\", type: \"numeric\" },\r\n];\r\nconst AddReagent = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [status, setStatus] = React.useState(\"\");\r\n  const [reagent, setReagent] = React.useState({\r\n    reagentName: \"\",\r\n    unit: \"\",\r\n    volume: \"\",\r\n  });\r\n  const [reset, setReset] = React.useState(Object.assign({}, reagent));\r\n  const [query, setQuery] = React.useState(\"\");\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [rows, setRows] = React.useState([]);\r\n\r\n  const runSearch = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.get(`/reagent/search/${query}`);\r\n      setRows([...data]);\r\n      setLoading(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    if (query) {\r\n      runSearch();\r\n    } else {\r\n      setRows([]);\r\n    }\r\n  }, [query]);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n  const handleReset = () => {\r\n    setReagent({ ...reset });\r\n  };\r\n\r\n  const handleChange = (input) => (event) => {\r\n    setReagent({ ...reagent, [input]: event.target.value });\r\n  };\r\n  const handleSubmit = async () => {\r\n    const { error } = addReagentValidator(reagent);\r\n    if (error) {\r\n      setMessage(error.details[0].message);\r\n      setStatus(\"error\");\r\n      handleClick();\r\n    }\r\n    if (!error) {\r\n      try {\r\n        const res = await axios.post(\"/reagent/add\", { ...reagent });\r\n\r\n        if (query) {\r\n          setRows([res.data.data]);\r\n        } else {\r\n          setRows([{ ...res.data.data }, ...rows]);\r\n        }\r\n        setMessage(res.data.message);\r\n        setStatus(\"success\");\r\n        handleClick();\r\n        handleReset();\r\n      } catch (e) {\r\n        console.log(e.response);\r\n        setMessage(e.response);\r\n        setStatus(\"error\");\r\n        handleClick();\r\n        handleReset();\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <CssBaseline>\r\n      <div style={Styles.inputfiled}>\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          id=\"reagentName\"\r\n          label=\"Name Of Reagent\"\r\n          type=\"string\"\r\n          variant=\"outlined\"\r\n          style={Styles.inputfileds}\r\n          value={reagent.reagentName}\r\n          onChange={handleChange(\"reagentName\")}\r\n        />\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          label=\"Unit Of Reagent\"\r\n          variant=\"outlined\"\r\n          value={reagent.unit}\r\n          onChange={handleChange(\"unit\")}\r\n        />\r\n        <TextField\r\n          style={Styles.inputfileds}\r\n          label=\"Volume\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          value={reagent.volume}\r\n          onChange={handleChange(\"volume\")}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n          style={Styles.button}\r\n        >\r\n          Add\r\n        </Button>\r\n      </div>\r\n      <div style={Styles.table}>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"Reagents\"\r\n          data={rows}\r\n          columns={columns}\r\n          onSearchChange={setQuery}\r\n          options={{\r\n            debounceInterval: 500,\r\n            paging: false,\r\n            // searchAutoFocus: true\r\n          }}\r\n          editable={{\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise(async (resolve, reject) => {\r\n                try {\r\n                  let { _id, ...req } = newData;\r\n                  const res = await axios.put(\r\n                    `/reagent/update/${oldData._id}`,\r\n                    req\r\n                  );\r\n                  const dataUpdate = [...rows];\r\n                  const index = oldData.tableData.id;\r\n                  dataUpdate[index] = res.data;\r\n                  setRows([...dataUpdate]);\r\n                  resolve();\r\n                } catch (e) {\r\n                  console.log(e);\r\n                  reject();\r\n                }\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise(async (resolve, reject) => {\r\n                try {\r\n                  const res = await axios.delete(\r\n                    `/reagent/delete/${oldData._id}`\r\n                  );\r\n                  const dataDelete = [...rows];\r\n                  const index = oldData.tableData.id;\r\n                  dataDelete.splice(index, 1);\r\n                  setRows([...dataDelete]);\r\n                  resolve();\r\n                } catch (e) {\r\n                  console.log(e);\r\n                  reject();\r\n                }\r\n              }),\r\n          }}\r\n          localization={{\r\n            toolbar: {\r\n              searchPlaceholder: \"Search Reagent\",\r\n            },\r\n          }}\r\n          isLoading={loading}\r\n        />\r\n      </div>\r\n      <SnackBar\r\n        messege={message}\r\n        open={open}\r\n        handleClose={handleClose}\r\n        status={status}\r\n      />\r\n    </CssBaseline>\r\n  );\r\n};\r\n\r\nconst Styles = {\r\n  inputfiled: {\r\n    marginTop: \"6%\",\r\n    marginLeft: \"5%\",\r\n    display: \"flex\",\r\n  },\r\n  inputfileds: {\r\n    marginTop: \"3%\",\r\n    marginLeft: \"3%\",\r\n  },\r\n  button: {\r\n    marginTop: \"3%\",\r\n    marginLeft: \"5%\",\r\n    height: 50,\r\n  },\r\n  tables: {\r\n    height: \"380px\",\r\n  },\r\n  table: {\r\n    marginTop: \"5%\",\r\n    marginButton: \"20%\",\r\n    marginLeft: \"10%\",\r\n    marginRight: \"10%\",\r\n  },\r\n};\r\n\r\nexport default AddReagent;\r\n","D:\\proj\\lims-frontend\\src\\Components\\login.js",["121"],"import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Paper,\r\n  makeStyles,\r\n  Typography,\r\n  Button,\r\n  FormControl,\r\n} from \"@material-ui/core\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nimport axios from \"../api\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUser } from \"../action/setUser\";\r\nimport { Redirect } from \"react-router\";\r\nconst styles = makeStyles({\r\n  paper: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"column\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    margin: \"0\",\r\n    padding: \"0\",\r\n    backgroundColor: \"#f7f7f7\",\r\n  },\r\n  input: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  button: {\r\n    marginTop: \"2rem\",\r\n  },\r\n});\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst Login = ({ isLogin, setLogin }) => {\r\n  const dispatch = useDispatch();\r\n  const classes = styles();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // //SnackBar operations\r\n  const [messege, setMessege] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const { data } = await axios.post(\"/login\", {\r\n        userName: username,\r\n        password,\r\n      });\r\n      const { id, role } = jwt_decode(data.token);\r\n      localStorage.setItem(\"token\", data.token);\r\n      window.axios.defaults.headers.common[\"Authorization\"] =\r\n        \"Bearer \" + localStorage.getItem(\"token\");\r\n      dispatch(setUser(id, role));\r\n      setLogin(true);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setMessege(e.response.data);\r\n      handleOpen();\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper style={{ height: \"100vh\" }}>\r\n        <div className={classes.paper}>\r\n          <Typography\r\n            variant=\"h4\"\r\n            style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}\r\n          >\r\n            Laboratory Management System\r\n          </Typography>\r\n          <FormControl>\r\n            <div className={classes.input}>\r\n              <TextField\r\n                name=\"Username\"\r\n                required\r\n                label=\"Username\"\r\n                value={username}\r\n                variant=\"filled\"\r\n                onChange={(e) => setUsername(e.target.value)}\r\n              />\r\n              <TextField\r\n                required\r\n                type=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                value={password}\r\n                variant=\"filled\"\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button\r\n                className={classes.button}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSubmit}\r\n              >\r\n                LOGIN\r\n              </Button>\r\n            </div>\r\n          </FormControl>\r\n        </div>\r\n      </Paper>\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {messege}\r\n        </Alert>\r\n      </Snackbar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\proj\\lims-frontend\\src\\Components\\AllReagent.js",["122","123","124","125","126"],"import React, { useRef, useEffect } from \"react\";\r\nimport axiosi from \"../api\";\r\nimport axios from \"axios\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n\r\n  container: {\r\n    marginTop: \"20%\",\r\n  },\r\n}));\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: \"7%\",\r\n  },\r\n  container: {\r\n    maxHeight: 440,\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    marginTop: \"7%\",\r\n    marginLeft: \"5%\",\r\n  },\r\n  table: { marginTop: \"1%\" },\r\n});\r\n\r\nexport default function AllReagent() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = React.useState([]);\r\n  const [total, setTotal] = React.useState(0);\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [inputValue, setInputValue] = React.useState(\"\");\r\n  const [value, setValue] = React.useState(\"\");\r\n  const [options, setOptions] = React.useState([]);\r\n  const [columns, setColumns] = React.useState([\r\n    { id: \"reagentName\", label: \"Reagent Name\", minWidth: 170 },\r\n    {\r\n      id: \"unit\",\r\n      label: \"Unit\",\r\n    },\r\n    { id: \"volume\", label: \"Volume\", minWidth: 100 },\r\n  ]);\r\n  let cancelToken = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    if (inputValue) {\r\n      fetchSearchResult();\r\n    } else {\r\n      setOptions([]);\r\n    }\r\n  }, [inputValue]);\r\n\r\n  React.useEffect(() => {\r\n    hadleFirstLoad();\r\n  }, [rowsPerPage]);\r\n\r\n  const fetchSearchResult = async () => {\r\n    if (cancelToken.current) {\r\n      cancelToken.current.cancel();\r\n    }\r\n    cancelToken.current = axios.CancelToken.source();\r\n    try {\r\n      const { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\r\n        cancelToken: cancelToken.current.token,\r\n      });\r\n      console.log(\"search complete\");\r\n      setOptions(data);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  function TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n\r\n    const handleBackButtonClick = (event) => {\r\n      handleChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = async (event) => {\r\n      if (rows.length !== total) {\r\n        try {\r\n          const { data } = await axiosi.get(\"/reagent\", {\r\n            params: { page: page + 1, limit: rowsPerPage },\r\n          });\r\n          setRows([...rows, ...data.rows]);\r\n\r\n          console.log(rows);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      handleChangePage(event, page + 1);\r\n    };\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <IconButton\r\n          onClick={handleBackButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"previous page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowRight />\r\n          ) : (\r\n            <KeyboardArrowLeft />\r\n          )}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleNextButtonClick}\r\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\r\n          aria-label=\"next page\"\r\n        >\r\n          {theme.direction === \"rtl\" ? (\r\n            <KeyboardArrowLeft />\r\n          ) : (\r\n            <KeyboardArrowRight />\r\n          )}\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const hadleFirstLoad = async () => {\r\n    try {\r\n      const { data } = await axiosi.get(\"/reagent\", {\r\n        params: { page: page, limit: rowsPerPage },\r\n      });\r\n      setRows([...data.rows]);\r\n      console.log(data.total);\r\n      setTotal(data.total);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.paper}>\r\n        <Autocomplete\r\n          id=\"combo-box-demo\"\r\n          getOptionLabel={(option) => option.reagentName}\r\n          getOptionSelected={(option, value) => option._id === value._id}\r\n          inputValue={inputValue}\r\n          onChange={(event, newValue) => {\r\n            if (!newValue) {\r\n              setPage(0);\r\n              hadleFirstLoad();\r\n              return;\r\n            }\r\n            setTotal(1);\r\n            setRows([newValue]);\r\n            setValue(newValue);\r\n          }}\r\n          onInputChange={(event, newInputValue) => {\r\n            setInputValue(newInputValue);\r\n          }}\r\n          options={options}\r\n          style={{ width: 300 }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Reagent Name\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </div>\r\n      <div className={classes.table}>\r\n        <TableContainer>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    align={column.align}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    {column.label}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.length\r\n                ? rows\r\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row._id}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id} align={column.align}>\r\n                                {column.format ? column.format(value) : value}\r\n                              </TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })\r\n                : null}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 10, 100]}\r\n        component=\"div\"\r\n        count={total}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        ActionsComponent={TablePaginationActions}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\proj\\lims-frontend\\src\\Components\\AddCutomer.js",["127"],"import React from \"react\";\r\nimport \"./myStyle.css\";\r\nimport {\r\n    makeStyles,\r\n    Select,\r\n    InputLabel,\r\n    Button,\r\n    FormControl,\r\n    TextField,\r\n    MenuItem,\r\n    Paper,\r\n} from \"@material-ui/core\";\r\nimport {addCustomerValidation} from \"../validation/validator\"\r\nimport axios from \"../api\";\r\nimport SnackBar from \"./SnackBar\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"flex\",\r\n        marginBottom: theme.spacing(7)\r\n        \r\n    },\r\n    position: {\r\n        marginLeft: theme.spacing(8),\r\n        flex : \"1 auto\",\r\n    },\r\n    buttons: {\r\n        marginTop: theme.spacing(6),\r\n        marginLeft: theme.spacing(120)\r\n    },\r\n    button:{\r\n        margin:\"5px 10px 5px 5px\"\r\n    },\r\n    label:{\r\n         marginLeft: theme.spacing(9)\r\n    }\r\n}));\r\n  \r\n\r\nconst AddCutomer = () => {\r\n    const classes = useStyles();\r\n    const [addCustomer,setAddCustomer]=React.useState({\r\n        firstName:\"\",\r\n        lastName:\"\",\r\n        age:0,\r\n        address:\"\",\r\n        gender:\"\",\r\n        contactNumber:0,\r\n    });\r\n    const [reset , setReset]= React.useState(Object.assign({},addCustomer));\r\n    const [open, setOpen] = React.useState(false);\r\n    const [message,setMessage]= React.useState(\"\");\r\n    const [status,setStatus]= React.useState(\"\");\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleChange = input => event =>{\r\n      setAddCustomer({...addCustomer,[input]:event.target.value});\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n    const handleReset =()=>{\r\n        setAddCustomer({...reset});\r\n    }\r\n\r\n    const handleSubmit = async() =>{\r\n        const {error} = addCustomerValidation(addCustomer);\r\n        if(error){\r\n        setMessage(error.details[0].message);\r\n        setStatus(\"error\");\r\n        handleClick();\r\n    }\r\n        if(!error){\r\n            try{\r\n            const res = await axios.post(\"/customer/add\",addCustomer);\r\n            setMessage(res.data);\r\n            setStatus(\"success\");\r\n            handleClick();\r\n            setAddCustomer({...reset});\r\n            }\r\n            catch(e){\r\n                setMessage(e.Error);\r\n                setStatus(\"error\");\r\n                handleClick();\r\n                console.log(e);\r\n            }\r\n        }\r\n    };\r\n\r\n  return (\r\n    <div>\r\n      <React.Fragment>\r\n        <Paper\r\n          style={{\r\n            padding: \"1em 2em 2em 2em\",\r\n            margin: \"8em 2em 2em 2em\",\r\n          }}\r\n          elevation={3}\r\n        >\r\n          <h1 align=\"center\">Customer Registration Page</h1>\r\n          <h4>Customer Details</h4>\r\n          <div className={classes.root}>\r\n            <TextField\r\n              name=\"First Name\"\r\n              label=\"First Name\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.firstName}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"firstName\")}\r\n            />\r\n            <TextField\r\n              label=\"Last Name\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.lastName}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"lastName\")}\r\n            />\r\n            <TextField\r\n              label=\"Age\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.age}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"number\"\r\n              onChange={handleChange(\"age\")}\r\n            />\r\n          </div>\r\n          <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel className={classes.label}>Gender</InputLabel>\r\n              <Select\r\n                labelId=\"demo-controlled-open-select-label\"\r\n                id=\"demo-controlled-open-select\"\r\n                value={addCustomer.gender}\r\n                label=\"Gender\"\r\n                className={classes.position}\r\n                style={{ width: 120 }}\r\n                onChange={handleChange(\"gender\")}\r\n              >\r\n                <MenuItem value=\"male\">Male</MenuItem>\r\n                <MenuItem value=\"female\">Female</MenuItem>\r\n                <MenuItem value=\"others\">Others</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <TextField\r\n              label=\"Location\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.address}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"string\"\r\n              onChange={handleChange(\"address\")}\r\n            />\r\n            <TextField\r\n              label=\"Contact Number\"\r\n              variant=\"outlined\"\r\n              value={addCustomer.contactNumber}\r\n              style={{ width: 80 }}\r\n              className={classes.position}\r\n              type=\"number\"\r\n              onChange={handleChange(\"contactNumber\")}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div className={classes.buttons}>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ width: \"200px\",paddingLeft:\"20px\" }}\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={handleSubmit}\r\n                >\r\n                  Add\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    style={{ width: \"200px\" ,paddingRight:\"20px\"}}\r\n                    color=\"secondary\"\r\n                    className={classes.button}\r\n                    onClick={handleReset}\r\n                >\r\n                    Reset\r\n                </Button>\r\n            </div>\r\n            </div>\r\n            </Paper>\r\n            </React.Fragment>\r\n            <SnackBar\r\n            messege={message}\r\n            open = {open}\r\n            handleClose={handleClose}\r\n            status={status}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCutomer;\r\n","D:\\proj\\lims-frontend\\src\\Components\\AddSample.js",["128","129","130","131","132","133"],"D:\\proj\\lims-frontend\\src\\Components\\AllSample.js",["134","135","136","137","138"],"import React, { useState,useEffect,useRef} from \"react\";\r\nimport {\r\n    TextField,\r\n    makeStyles,\r\n    useTheme,\r\n    Button,\r\n   TableContainer,\r\n   Table,\r\n   TableHead,\r\n   TableRow,\r\n   TableCell,\r\n   TableBody,\r\n   Chip,\r\n   IconButton,\r\n   TablePagination,\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport axiosi from '../api';\r\nimport axios from \"axios\";\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\n\r\nconst styles = makeStyles({\r\n    paper: {\r\n        marginTop: \"7%\",\r\n        marginLeft: \"5%\",\r\n        marginBottom: \"2%\",\r\n        marginRight: \"3%\",\r\n        display: \"flex\",\r\n        justifyContent:\"space-between\"\r\n    },\r\n    items:{\r\n     flex:\"1 1 1 1 auto\",\r\n     width:\"20em\",\r\n    },\r\n    button: {\r\n        margin: \"13px 12px 12px 10px\",\r\n        backgroundColor:\"#27E208\"\r\n    },\r\n    tables: {\r\n        height: \"500px\",\r\n      },\r\n      table: {\r\n        marginTop:\"5%\",\r\n        marginLeft: \"3%\",\r\n      },\r\n});\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n      flexShrink: 0,\r\n      marginLeft: theme.spacing(2.5),\r\n    },\r\n  }));\r\n\r\nconst columns = [\r\n  { id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\r\n  {\r\n    id: \"customerName\",\r\n    label: \"Customer Name\",\r\n  },\r\n  { id: \"testName\", label: \"Test Name\", minWidth: 100 },\r\n  {\r\n    id: \"created_at\",\r\n    label: \"Created At\",\r\n    // minWidth: 170,\r\n    // align: 'right',\r\n    format: (value) => {\r\n      return  value.substring(0, 10);\r\n    },\r\n  },\r\n  {\r\n    id: \"dueDate\",\r\n    label: \"Due Date\",\r\n    // minWidth: 170,\r\n    // align: 'right',\r\n    format: (value) => {\r\n      return  value.substring(0, 10);\r\n    },\r\n  },\r\n  {\r\n    id: \"paymentStatus\",\r\n    label: \"Payment\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: \"collectedBy\",\r\n    label: \"Collected By\",\r\n    minWidth: 170,\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n  {\r\n    id: \"status\",\r\n    label: \"Status\",\r\n    minWidth: 100,\r\n    format: (value) =>\r\n      value ? (\r\n        <Chip color=\"primary\" label=\"done\" />\r\n      ) : (\r\n        <Chip color=\"secondary\" label=\"pending\" />\r\n      ),\r\n  },\r\n  {\r\n    id: \"action\",\r\n    label: \"\",\r\n    format: () => (\r\n      <Button variant=\"contained\" color=\"primary\">\r\n        Generate Report\r\n      </Button>\r\n    ),\r\n    // align: 'right',\r\n    // format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nconst AllSample = () => {\r\n    const classes = styles();\r\n    const [sampleFields,setSampleFields] = React.useState({\r\n        date:\"\",\r\n        sampleId:\"\"\r\n    });\r\n    const [rows, setRows] = React.useState([]);\r\n    const [total, setTotal] = React.useState(0);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const [value, setValue] = React.useState({});\r\n    const [inputValue, setInputValue] = React.useState(\"\");\r\n    const [customer,setCustomer] = React.useState({\r\n      _id:\"\"\r\n    });\r\n    let cancelToken = useRef(\"\");\r\n\r\n    React.useEffect(() => {\r\n      handleFirstload();\r\n  },[rowsPerPage]);\r\n\r\n    React.useEffect(() => {\r\n      if (inputValue) {\r\n        fetchSearchResult();\r\n      } else {\r\n        setOptions([]);\r\n      }\r\n    }, [inputValue]);\r\n\r\n  const handleFirstload = async() =>{\r\n        try{\r\n        const {data} = await axiosi.get(\"/sample/\",{\r\n          params:{page: page, limit: rowsPerPage, sampleId: sampleFields.sampleId , Customer:customer._id , Date :sampleFields.date },\r\n        });\r\n        setRows([...data.rows]);\r\n        setTotal(data.total);\r\n        console.log(\"data\");\r\n        }\r\n\r\n        catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const fetchSearchResult = async () => {\r\n      if (cancelToken.current) {\r\n        cancelToken.current.cancel();\r\n      }\r\n      cancelToken.current = axios.CancelToken.source();\r\n      try {\r\n        const { data } = await axiosi.get(`/customer/search/${inputValue}`, {\r\n          cancelToken: cancelToken.current.token,\r\n        });\r\n        console.log(\"search complete\");\r\n        setOptions(data);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n\r\n    const handleChangeInput=(input)=>(event)=>{\r\n        setSampleFields({...sampleFields,[input]:event.target.value});\r\n    }\r\n\r\n    const handleSearch =async ()=>{\r\n      console.log(customer._id);\r\n        try{\r\n            let {data} = await axiosi.get(\"/sample/\",{\r\n                params:{page: page, limit: rowsPerPage, sampleId: sampleFields.sampleId , Customer:customer._id , Date : sampleFields.date},\r\n            });\r\n        setRows([...data.rows]);\r\n        setTotal(data.total);\r\n        }\r\n        catch(e){\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    function TablePaginationActions (props) {\r\n        const classes = useStyles1();\r\n        const theme = useTheme();\r\n\r\n        const handleBackButtonClick = (event) => {\r\n            handleChangePage(event, page - 1);\r\n          };\r\n\r\n        const handleNextButtonClick = async (event) => {\r\n            if (rows.length !== total) {\r\n              try {\r\n                const { data } = await axiosi.get(\"/sample/\", {\r\n                  params:{page: page+1, limit: rowsPerPage, sampleId: sampleFields.sampleId , Customer:customer._id, Date : sampleFields.date},\r\n                });\r\n                setRows([...rows,...data.rows]);\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n            }\r\n            handleChangePage(event, page + 1)\r\n        };\r\n\r\n          return (\r\n            <div className={classes.root}>\r\n              <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n              >\r\n                {theme.direction === \"rtl\" ? (\r\n                  <KeyboardArrowRight />\r\n                ) : (\r\n                  <KeyboardArrowLeft />\r\n                )}\r\n              </IconButton>\r\n              <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(total / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n              >\r\n                {theme.direction === \"rtl\" ? (\r\n                  <KeyboardArrowLeft />\r\n                ) : (\r\n                  <KeyboardArrowRight />\r\n                )}\r\n              </IconButton>\r\n            </div>\r\n          );\r\n        }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n      };\r\n    \r\n      const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(event.target.value);\r\n        setPage(0);\r\n      };\r\n\r\n    return (\r\n        <React.Fragment>\r\n                <div className={classes.paper}>\r\n                        <Autocomplete\r\n                            id=\"combo-box-demo\"\r\n                            getOptionLabel={(option) =>\r\n                              option.firstName + \" \" + option.lastName\r\n                            }\r\n                            getOptionSelected={(option, value) => option.id === value.id}\r\n                            inputValue={inputValue}\r\n                            onChange={(event, newValue) => {\r\n                             newValue ? setCustomer({_id:newValue._id}): setCustomer({_id:\"\"});\r\n                            }}\r\n                            onInputChange={(event, newInputValue) => {\r\n                              setInputValue(newInputValue);\r\n                            }}\r\n                            options={options}\r\n                            style={{ width: 300 }}\r\n                            renderInput={(params) => (\r\n                              <TextField {...params} label=\"Customer Name\" variant=\"outlined\" />\r\n                            )}\r\n                          />\r\n                        <TextField\r\n                            name=\"Date\"\r\n                            value={sampleFields.date}\r\n                            variant=\"filled\"\r\n                            type=\"date\"\r\n                            className={classes.items}\r\n                            onChange={handleChangeInput(\"date\")}\r\n                        />\r\n                           <TextField\r\n                            name=\"SampleId\"\r\n                            label=\"Sample Id\"\r\n                            value={sampleFields.sampleId}\r\n                            variant=\"filled\" \r\n                            className={classes.items}\r\n                            onChange={handleChangeInput(\"sampleId\")}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.items}\r\n                            onClick={handleSearch}\r\n                        >\r\n                            <SearchIcon/>\r\n                            Search\r\n                        </Button>\r\n                    </div>\r\n                    <div className={classes.table}>\r\n                    <TableContainer className={classes.tables}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n        <TableHead>\r\n          <TableRow>\r\n        {columns.map(item =>\r\n        <TableCell\r\n        key={item.id}\r\n        align={item.align}\r\n        style={{ minWidth: item.minWidth }}\r\n        >\r\n            {item.label}</TableCell>\r\n            )}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {rows\r\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format ? column.format(value) : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n        </TableBody>\r\n        </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n         rowsPerPageOptions={[5,10,100]}\r\n         component=\"div\"\r\n         count={total}\r\n         rowsPerPage={rowsPerPage}\r\n         page={page}\r\n         onChangePage={handleChangePage}\r\n         onChangeRowsPerPage={handleChangeRowsPerPage}\r\n         ActionsComponent={TablePaginationActions}\r\n        />\r\n        </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default AllSample ;\r\n","D:\\proj\\lims-frontend\\src\\validation\\validator.js",[],"D:\\proj\\lims-frontend\\src\\Components\\SnackBar.js",[],"D:\\proj\\lims-frontend\\src\\api\\index.js",[],"D:\\proj\\lims-frontend\\src\\Components\\AllTest.js",["139","140","141","142"],"D:\\proj\\lims-frontend\\src\\Components\\EditTest.js",["143"],"D:\\proj\\lims-frontend\\src\\Components\\ProtectedRoute.js",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":16,"column":3,"nodeType":"150","messageId":"151","endLine":16,"endColumn":11},{"ruleId":"148","severity":1,"message":"152","line":21,"column":23,"nodeType":"150","messageId":"151","endLine":21,"endColumn":34},{"ruleId":"148","severity":1,"message":"153","line":103,"column":19,"nodeType":"150","messageId":"151","endLine":103,"endColumn":29},{"ruleId":"154","severity":1,"message":"155","line":98,"column":6,"nodeType":"156","endLine":98,"endColumn":19,"suggestions":"157"},{"ruleId":"154","severity":1,"message":"158","line":58,"column":6,"nodeType":"156","endLine":58,"endColumn":18,"suggestions":"159"},{"ruleId":"148","severity":1,"message":"160","line":4,"column":3,"nodeType":"150","messageId":"151","endLine":4,"endColumn":8},{"ruleId":"148","severity":1,"message":"161","line":11,"column":3,"nodeType":"150","messageId":"151","endLine":11,"endColumn":17},{"ruleId":"148","severity":1,"message":"162","line":12,"column":3,"nodeType":"150","messageId":"151","endLine":12,"endColumn":8},{"ruleId":"148","severity":1,"message":"163","line":13,"column":3,"nodeType":"150","messageId":"151","endLine":13,"endColumn":12},{"ruleId":"148","severity":1,"message":"164","line":14,"column":3,"nodeType":"150","messageId":"151","endLine":14,"endColumn":11},{"ruleId":"148","severity":1,"message":"165","line":15,"column":3,"nodeType":"150","messageId":"151","endLine":15,"endColumn":12},{"ruleId":"148","severity":1,"message":"166","line":16,"column":3,"nodeType":"150","messageId":"151","endLine":16,"endColumn":12},{"ruleId":"148","severity":1,"message":"153","line":106,"column":19,"nodeType":"150","messageId":"151","endLine":106,"endColumn":29},{"ruleId":"167","severity":1,"message":"168","line":238,"column":11,"nodeType":"169","endLine":238,"endColumn":36},{"ruleId":"148","severity":1,"message":"170","line":259,"column":27,"nodeType":"150","messageId":"151","endLine":259,"endColumn":30},{"ruleId":"148","severity":1,"message":"171","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"172","line":64,"column":17,"nodeType":"150","messageId":"151","endLine":64,"endColumn":25},{"ruleId":"154","severity":1,"message":"173","line":85,"column":6,"nodeType":"156","endLine":85,"endColumn":13,"suggestions":"174"},{"ruleId":"167","severity":1,"message":"168","line":143,"column":11,"nodeType":"169","endLine":143,"endColumn":37},{"ruleId":"148","severity":1,"message":"170","line":206,"column":25,"nodeType":"150","messageId":"151","endLine":206,"endColumn":28},{"ruleId":"148","severity":1,"message":"149","line":18,"column":10,"nodeType":"150","messageId":"151","endLine":18,"endColumn":18},{"ruleId":"148","severity":1,"message":"160","line":11,"column":8,"nodeType":"150","messageId":"151","endLine":11,"endColumn":13},{"ruleId":"148","severity":1,"message":"175","line":53,"column":10,"nodeType":"150","messageId":"151","endLine":53,"endColumn":15},{"ruleId":"148","severity":1,"message":"153","line":55,"column":19,"nodeType":"150","messageId":"151","endLine":55,"endColumn":29},{"ruleId":"154","severity":1,"message":"158","line":71,"column":6,"nodeType":"156","endLine":71,"endColumn":18,"suggestions":"176"},{"ruleId":"154","severity":1,"message":"155","line":75,"column":6,"nodeType":"156","endLine":75,"endColumn":19,"suggestions":"177"},{"ruleId":"148","severity":1,"message":"172","line":50,"column":20,"nodeType":"150","messageId":"151","endLine":50,"endColumn":28},{"ruleId":"148","severity":1,"message":"178","line":23,"column":10,"nodeType":"150","messageId":"151","endLine":23,"endColumn":23},{"ruleId":"148","severity":1,"message":"153","line":94,"column":19,"nodeType":"150","messageId":"151","endLine":94,"endColumn":29},{"ruleId":"148","severity":1,"message":"172","line":124,"column":17,"nodeType":"150","messageId":"151","endLine":124,"endColumn":25},{"ruleId":"154","severity":1,"message":"158","line":135,"column":6,"nodeType":"156","endLine":135,"endColumn":18,"suggestions":"179"},{"ruleId":"167","severity":1,"message":"168","line":290,"column":13,"nodeType":"169","endLine":290,"endColumn":38},{"ruleId":"148","severity":1,"message":"170","line":329,"column":29,"nodeType":"150","messageId":"151","endLine":329,"endColumn":32},{"ruleId":"148","severity":1,"message":"180","line":1,"column":26,"nodeType":"150","messageId":"151","endLine":1,"endColumn":35},{"ruleId":"148","severity":1,"message":"175","line":132,"column":12,"nodeType":"150","messageId":"151","endLine":132,"endColumn":17},{"ruleId":"148","severity":1,"message":"181","line":132,"column":19,"nodeType":"150","messageId":"151","endLine":132,"endColumn":27},{"ruleId":"154","severity":1,"message":"182","line":141,"column":5,"nodeType":"156","endLine":141,"endColumn":18,"suggestions":"183"},{"ruleId":"154","severity":1,"message":"184","line":149,"column":8,"nodeType":"156","endLine":149,"endColumn":20,"suggestions":"185"},{"ruleId":"154","severity":1,"message":"158","line":170,"column":6,"nodeType":"156","endLine":170,"endColumn":18,"suggestions":"186"},{"ruleId":"154","severity":1,"message":"155","line":174,"column":6,"nodeType":"156","endLine":174,"endColumn":19,"suggestions":"187"},{"ruleId":"154","severity":1,"message":"188","line":186,"column":6,"nodeType":"156","endLine":186,"endColumn":8,"suggestions":"189"},{"ruleId":"148","severity":1,"message":"170","line":235,"column":13,"nodeType":"150","messageId":"151","endLine":235,"endColumn":16},{"ruleId":"148","severity":1,"message":"153","line":104,"column":19,"nodeType":"150","messageId":"151","endLine":104,"endColumn":29},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'setColumns' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'hadleFirstLoad'. Either include it or remove the dependency array.","ArrayExpression",["192"],"React Hook useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["193"],"'Paper' is defined but never used.","'TableContainer' is defined but never used.","'Table' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'res' is assigned a value but never used.","'useState' is defined but never used.","'setReset' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'runSearch'. Either include it or remove the dependency array.",["194"],"'value' is assigned a value but never used.",["195"],["196"],"'MTableBodyRow' is defined but never used.",["197"],"'useEffect' is defined but never used.","'setValue' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'handleFirstload'. Either include it or remove the dependency array.",["198"],"React Hook React.useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["199"],["200"],["201"],"React Hook React.useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"205","fix":"209"},{"desc":"203","fix":"210"},{"desc":"205","fix":"211"},{"desc":"212","fix":"213"},{"desc":"205","fix":"214"},{"desc":"205","fix":"215"},{"desc":"203","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [hadleFirstLoad, rowsPerPage]",{"range":"219","text":"220"},"Update the dependencies array to be: [fetchSearchResult, inputValue]",{"range":"221","text":"222"},"Update the dependencies array to be: [query, runSearch]",{"range":"223","text":"224"},{"range":"225","text":"222"},{"range":"226","text":"220"},{"range":"227","text":"222"},"Update the dependencies array to be: [handleFirstload, rowsPerPage]",{"range":"228","text":"229"},{"range":"230","text":"222"},{"range":"231","text":"222"},{"range":"232","text":"220"},"Update the dependencies array to be: [props.location]",{"range":"233","text":"234"},[2625,2638],"[hadleFirstLoad, rowsPerPage]",[1540,1552],"[fetchSearchResult, inputValue]",[3515,3522],"[query, runSearch]",[2175,2187],[2248,2261],[4801,4813],[3340,3353],"[handleFirstload, rowsPerPage]",[3500,3512],[5557,5569],[5630,5643],[5890,5892],"[props.location]"]