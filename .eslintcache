[{"/home/sherlock/Workdev/lims-frontend/src/index.js":"1","/home/sherlock/Workdev/lims-frontend/src/App.js":"2","/home/sherlock/Workdev/lims-frontend/src/reducers/index.js":"3","/home/sherlock/Workdev/lims-frontend/src/reducers/authReducer.js":"4","/home/sherlock/Workdev/lims-frontend/src/Components/AddReagent.js":"5","/home/sherlock/Workdev/lims-frontend/src/Components/appBar.js":"6","/home/sherlock/Workdev/lims-frontend/src/Components/AddCutomer.js":"7","/home/sherlock/Workdev/lims-frontend/src/Components/ImportReagent.js":"8","/home/sherlock/Workdev/lims-frontend/src/Components/PendingSample.js":"9","/home/sherlock/Workdev/lims-frontend/src/Components/AllSample.js":"10","/home/sherlock/Workdev/lims-frontend/src/Components/login.js":"11","/home/sherlock/Workdev/lims-frontend/src/Components/AddSample.js":"12","/home/sherlock/Workdev/lims-frontend/src/Components/register.js":"13","/home/sherlock/Workdev/lims-frontend/src/action/setUser.js":"14","/home/sherlock/Workdev/lims-frontend/src/Components/AllReagent.js":"15","/home/sherlock/Workdev/lims-frontend/src/Components/AddTest.js":"16","/home/sherlock/Workdev/lims-frontend/src/Components/SnackBar.js":"17","/home/sherlock/Workdev/lims-frontend/src/validation/validator.js":"18","/home/sherlock/Workdev/lims-frontend/src/api/index.js":"19","/home/sherlock/Workdev/lims-frontend/src/Components/GenerateReport.js":"20","/home/sherlock/Workdev/lims-frontend/src/Components/ProtectedRoute.js":"21","/home/sherlock/Workdev/lims-frontend/src/Components/AllTest.js":"22","/home/sherlock/Workdev/lims-frontend/src/Components/EditTest.js":"23","/home/sherlock/Workdev/lims-frontend/src/Components/report.js":"24"},{"size":562,"mtime":1613919733576,"results":"25","hashOfConfig":"26"},{"size":2379,"mtime":1617178833588,"results":"27","hashOfConfig":"26"},{"size":168,"mtime":1615964985100,"results":"28","hashOfConfig":"26"},{"size":181,"mtime":1615964985097,"results":"29","hashOfConfig":"26"},{"size":7939,"mtime":1616824858586,"results":"30","hashOfConfig":"26"},{"size":5611,"mtime":1617257859357,"results":"31","hashOfConfig":"26"},{"size":10971,"mtime":1617169885637,"results":"32","hashOfConfig":"26"},{"size":4829,"mtime":1617095315938,"results":"33","hashOfConfig":"26"},{"size":6875,"mtime":1617169885641,"results":"34","hashOfConfig":"26"},{"size":8715,"mtime":1617083286814,"results":"35","hashOfConfig":"26"},{"size":3737,"mtime":1617169885641,"results":"36","hashOfConfig":"26"},{"size":11974,"mtime":1617169885641,"results":"37","hashOfConfig":"26"},{"size":8556,"mtime":1617169885641,"results":"38","hashOfConfig":"26"},{"size":99,"mtime":1615964985097,"results":"39","hashOfConfig":"26"},{"size":7554,"mtime":1616826249391,"results":"40","hashOfConfig":"26"},{"size":10127,"mtime":1616399073532,"results":"41","hashOfConfig":"26"},{"size":543,"mtime":1615964985094,"results":"42","hashOfConfig":"26"},{"size":2375,"mtime":1617169885661,"results":"43","hashOfConfig":"26"},{"size":178,"mtime":1617169885661,"results":"44","hashOfConfig":"26"},{"size":10560,"mtime":1617266580128,"results":"45","hashOfConfig":"26"},{"size":701,"mtime":1617169885641,"results":"46","hashOfConfig":"26"},{"size":11310,"mtime":1617169885641,"results":"47","hashOfConfig":"26"},{"size":10815,"mtime":1617169885641,"results":"48","hashOfConfig":"26"},{"size":10297,"mtime":1617266928464,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"sxmzb6",{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"52"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sherlock/Workdev/lims-frontend/src/index.js",[],["113","114"],"/home/sherlock/Workdev/lims-frontend/src/App.js",["115","116"],"import AppBar from \"./Components/appBar\";\nimport AddCustomer from \"./Components/AddCutomer\";\nimport AddReagent from \"./Components/AddReagent\";\nimport AddTest from \"./Components/AddTest\";\nimport ImportReagent from \"./Components/ImportReagent\";\nimport PendingSample from \"./Components/PendingSample\";\nimport AllSample from \"./Components/AllSample\";\nimport AllReagent from \"./Components/AllReagent\";\nimport AddSample from \"./Components/AddSample\";\nimport GenerateReport from \"./Components/GenerateReport\";\nimport Report from \"./Components/report\";\nimport AllTest from \"./Components/AllTest\";\nimport EditTest from \"./Components/EditTest\";\nimport ProtectedRoute from \"./Components/ProtectedRoute\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport Login from \"./Components/login\";\nimport Register from \"./Components/register\";\nimport { setUser } from \"./action/setUser\";\n\nfunction App() {\n\tconst dispatch = useDispatch();\n\tconst token = localStorage.getItem(\"token\");\n\tconst [isLogin, setLogin] = useState(token ? true : false);\n\n\tif (token) {\n\t\ttry {\n\t\t\tconst decoded = jwt_decode(token);\n\t\t\tdispatch(setUser(decoded.id, decoded.role));\n\t\t} catch (e) {\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\tsetLogin(false);\n\t\t}\n\t}\n\n\treturn isLogin ? (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<AppBar />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/\" exact component={PendingSample} />\n\t\t\t\t\t<Route path=\"/addCustomer\" component={AddCustomer} />\n\t\t\t\t\t<Route path=\"/addReagent\" component={AddReagent} />\n\t\t\t\t\t<Route path=\"/addTest\" component={AddTest} />\n\t\t\t\t\t<Route path=\"/importReagent\" component={ImportReagent} />\n\t\t\t\t\t<Route path=\"/allSample\" component={AllSample} />\n\t\t\t\t\t<Route path=\"/allReagent\" component={AllReagent} />\n\t\t\t\t\t<Route path=\"/allTest\" component={AllTest} />\n\t\t\t\t\t<Route path=\"/addSample\" component={AddSample} />\n\t\t\t\t\t<Route path=\"/register\" exact component={Register} />\n\t\t\t\t\t<Route path=\"/login\" exact component={Login} />\n\t\t\t\t\t<Route path=\"/generateReport\" exact component={GenerateReport} />\n\t\t\t\t\t<Route path=\"/editTest\" exact component={EditTest} />\n\t\t\t\t\t<Route path=\"/report\" exact component={Report} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t) : (\n\t\t<Login isLogin={isLogin} setLogin={setLogin} />\n\t);\n}\n\nexport default App;\n","/home/sherlock/Workdev/lims-frontend/src/reducers/index.js",[],"/home/sherlock/Workdev/lims-frontend/src/reducers/authReducer.js",[],"/home/sherlock/Workdev/lims-frontend/src/Components/AddReagent.js",["117","118","119","120","121"],"import React, { useState, forwardRef } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { TextField, Button, CssBaseline } from \"@material-ui/core\";\nimport axios from \"../api\";\nimport { addReagentValidator } from \"../validation/validator.js\";\nimport SnackBar from \"./SnackBar\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst columns = [\n  { title: \"Reagent\", field: \"reagentName\" },\n  {\n    title: \"Unit\",\n    field: \"unit\",\n  },\n  { title: \"In Stock\", field: \"volume\", type: \"numeric\" },\n];\nconst AddReagent = () => {\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState(\"\");\n  const [status, setStatus] = React.useState(\"\");\n  const [reagent, setReagent] = React.useState({\n    reagentName: \"\",\n    unit: \"\",\n    volume: \"\",\n  });\n  const [reset, setReset] = React.useState(Object.assign({}, reagent));\n  const [query, setQuery] = React.useState(\"\");\n  const [loading, setLoading] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n\n  const runSearch = async () => {\n    try {\n      setLoading(true);\n      const { data } = await axios.get(`/reagent/search/${query}`);\n      setRows([...data]);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  React.useEffect(() => {\n    if (query) {\n      runSearch();\n    } else {\n      setRows([]);\n    }\n  }, [query]);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n  const handleReset = () => {\n    setReagent({ ...reset });\n  };\n\n  const handleChange = (input) => (event) => {\n    setReagent({ ...reagent, [input]: event.target.value });\n  };\n  const handleSubmit = async () => {\n    const { error } = addReagentValidator(reagent);\n    if (error) {\n      setMessage(error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!error) {\n      try {\n        const res = await axios.post(\"/reagent/add\", { ...reagent });\n        if (query) {\n          setRows([res.data.data]);\n        } else {\n          setRows([{ ...res.data.data }, ...rows]);\n        }\n        console.log(rows);\n        setMessage(res.data.message);\n        setStatus(\"success\");\n        handleClick();\n        handleReset();\n      } catch (e) {\n        console.log(e.response);\n        setMessage(e.response.data);\n        setStatus(\"error\");\n        handleClick();\n        handleReset();\n      }\n    }\n  };\n  return (\n    <CssBaseline>\n      <div style={Styles.inputfiled}>\n        <TextField\n          style={Styles.inputfileds}\n          id=\"reagentName\"\n          label=\"Name Of Reagent\"\n          type=\"string\"\n          variant=\"outlined\"\n          style={Styles.inputfileds}\n          value={reagent.reagentName}\n          onChange={handleChange(\"reagentName\")}\n        />\n        <TextField\n          style={Styles.inputfileds}\n          label=\"Unit Of Reagent\"\n          variant=\"outlined\"\n          value={reagent.unit}\n          onChange={handleChange(\"unit\")}\n        />\n        <TextField\n          style={Styles.inputfileds}\n          label=\"Volume\"\n          variant=\"outlined\"\n          type=\"number\"\n          value={reagent.volume}\n          onChange={handleChange(\"volume\")}\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmit}\n          style={Styles.button}\n        >\n          Add\n        </Button>\n      </div>\n      <div style={Styles.table}>\n        <MaterialTable\n          icons={tableIcons}\n          title=\"Reagents\"\n          data={rows}\n          columns={columns}\n          onSearchChange={setQuery}\n          options={{\n            debounceInterval: 500,\n            paging: false,\n            // searchAutoFocus: true\n          }}\n          editable={{\n            onRowUpdate: (newData, oldData) =>\n              new Promise(async (resolve, reject) => {\n                try {\n                  let { _id, ...req } = newData;\n                  const res = await axios.put(\n                    `/reagent/update/${oldData._id}`,\n                    req\n                  );\n                  const dataUpdate = [...rows];\n                  const index = oldData.tableData.id;\n                  dataUpdate[index] = res.data;\n                  setRows([...dataUpdate]);\n                  resolve();\n                } catch (e) {\n                  console.log(e);\n                  reject();\n                }\n              }),\n            onRowDelete: (oldData) =>\n              new Promise(async (resolve, reject) => {\n                try {\n                  const res = await axios.delete(\n                    `/reagent/delete/${oldData._id}`\n                  );\n                  const dataDelete = [...rows];\n                  const index = oldData.tableData.id;\n                  dataDelete.splice(index, 1);\n                  setRows([...dataDelete]);\n                  resolve();\n                } catch (e) {\n                  console.log(e);\n                  reject();\n                }\n              }),\n          }}\n          localization={{\n            toolbar: {\n              searchPlaceholder: \"Search Reagent\",\n            },\n          }}\n          isLoading={loading}\n        />\n      </div>\n      <SnackBar\n        messege={message}\n        open={open}\n        handleClose={handleClose}\n        status={status}\n      />\n    </CssBaseline>\n  );\n};\n\nconst Styles = {\n  inputfiled: {\n    marginTop: \"6%\",\n    marginLeft: \"5%\",\n    display: \"flex\",\n  },\n  inputfileds: {\n    marginTop: \"3%\",\n    marginLeft: \"3%\",\n  },\n  button: {\n    marginTop: \"3%\",\n    marginLeft: \"5%\",\n    height: 50,\n  },\n  tables: {\n    height: \"380px\",\n  },\n  table: {\n    marginTop: \"5%\",\n    marginButton: \"20%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n};\n\nexport default AddReagent;\n \n","/home/sherlock/Workdev/lims-frontend/src/Components/appBar.js",["122"],"/home/sherlock/Workdev/lims-frontend/src/Components/AddCutomer.js",["123"],"import React from \"react\";\nimport \"./myStyle.css\";\nimport {\n    makeStyles,\n    Select,\n    InputLabel,\n    Button,\n    FormControl,\n    TextField,\n    MenuItem,\n    Paper,\n} from \"@material-ui/core\";\nimport {addCustomerValidation} from \"../validation/validator\"\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: \"flex\",\n        marginBottom: theme.spacing(7)\n        \n    },\n    position: {\n        marginLeft: theme.spacing(8),\n        flex : \"1 auto\",\n    },\n    buttons: {\n        marginTop: theme.spacing(6),\n        marginLeft: theme.spacing(120)\n    },\n    button:{\n        margin:\"5px 10px 5px 5px\"\n    },\n    label:{\n         marginLeft: theme.spacing(9)\n    }\n}));\n  \n\nconst AddCutomer = () => {\n    const classes = useStyles();\n    const [addCustomer,setAddCustomer]=React.useState({\n        firstName:\"\",\n        lastName:\"\",\n        age:0,\n        address:\"\",\n        gender:\"\",\n        contactNumber:0,\n    });\n    const [reset , setReset]= React.useState(Object.assign({},addCustomer));\n    const [open, setOpen] = React.useState(false);\n    const [message,setMessage]= React.useState(\"\");\n    const [status,setStatus]= React.useState(\"\");\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleChange = input => event =>{\n      setAddCustomer({...addCustomer,[input]:event.target.value});\n  }\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n    const handleReset =()=>{\n        setAddCustomer({...reset});\n    }\n\n    const handleSubmit = async() =>{\n        const {error} = addCustomerValidation(addCustomer);\n        if(error){\n        setMessage(error.details[0].message);\n        setStatus(\"error\");\n        handleClick();\n    }\n        if(!error){\n            try{\n            const res = await axios.post(\"/customer/add\",addCustomer);\n            setMessage(res.data);\n            setStatus(\"success\");\n            handleClick();\n            setAddCustomer({...reset});\n            }\n            catch(e){\n                setMessage(e.Error);\n                setStatus(\"error\");\n                handleClick();\n                console.log(e);\n            }\n        }\n    };\n\n  return (\n    <div>\n      <React.Fragment>\n        <Paper\n          style={{\n            padding: \"1em 2em 2em 2em\",\n            margin: \"8em 2em 2em 2em\",\n          }}\n          elevation={3}\n        >\n          <h1 align=\"center\">Customer Registration Page</h1>\n          <h4>Customer Details</h4>\n          <div className={classes.root}>\n            <TextField\n              name=\"First Name\"\n              label=\"First Name\"\n              variant=\"outlined\"\n              value={addCustomer.firstName}\n              style={{ width: 80 }}\n              className={classes.position}\n              type=\"string\"\n              onChange={handleChange(\"firstName\")}\n            />\n            <TextField\n              label=\"Last Name\"\n              variant=\"outlined\"\n              value={addCustomer.lastName}\n              style={{ width: 80 }}\n              className={classes.position}\n              type=\"string\"\n              onChange={handleChange(\"lastName\")}\n            />\n            <TextField\n              label=\"Age\"\n              variant=\"outlined\"\n              value={addCustomer.age}\n              style={{ width: 80 }}\n              className={classes.position}\n              type=\"number\"\n              onChange={handleChange(\"age\")}\n            />\n          </div>\n          <div className={classes.root}>\n            <FormControl className={classes.formControl}>\n              <InputLabel className={classes.label}>Gender</InputLabel>\n              <Select\n                labelId=\"demo-controlled-open-select-label\"\n                id=\"demo-controlled-open-select\"\n                value={addCustomer.gender}\n                label=\"Gender\"\n                className={classes.position}\n                style={{ width: 120 }}\n                onChange={handleChange(\"gender\")}\n              >\n                <MenuItem value=\"male\">Male</MenuItem>\n                <MenuItem value=\"female\">Female</MenuItem>\n                <MenuItem value=\"others\">Others</MenuItem>\n              </Select>\n            </FormControl>\n            <TextField\n              label=\"Location\"\n              variant=\"outlined\"\n              value={addCustomer.address}\n              style={{ width: 80 }}\n              className={classes.position}\n              type=\"string\"\n              onChange={handleChange(\"address\")}\n            />\n            <TextField\n              label=\"Contact Number\"\n              variant=\"outlined\"\n              value={addCustomer.contactNumber}\n              style={{ width: 80 }}\n              className={classes.position}\n              type=\"number\"\n              onChange={handleChange(\"contactNumber\")}\n            />\n          </div>\n          <div>\n            <div className={classes.buttons}>\n                <Button\n                    variant=\"contained\"\n                    style={{ width: \"200px\",paddingLeft:\"20px\" }}\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick={handleSubmit}\n                >\n                  Add\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    style={{ width: \"200px\" ,paddingRight:\"20px\"}}\n                    color=\"secondary\"\n                    className={classes.button}\n                    onClick={handleReset}\n                >\n                    Reset\n                </Button>\n            </div>\n            </div>\n            </Paper>\n            </React.Fragment>\n            <SnackBar\n            messege={message}\n            open = {open}\n            handleClose={handleClose}\n            status={status}\n            />\n        </div>\n    )\n}\n\nexport default AddCutomer;\n","/home/sherlock/Workdev/lims-frontend/src/Components/ImportReagent.js",["124"],"import React, { useState, useRef, useEffect } from \"react\";\nimport \"./myStyle.css\";\nimport { TextField, Paper, makeStyles, Button } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport axiosi from \"../api\";\n\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { importReagentValidator } from \"../validation/validator\";\nimport SnackBar from \"./SnackBar\";\nconst styles = makeStyles({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"center\",\n\t\talignItems: \"center\",\n\t\tflexDirection: \"column\",\n\t\theight: \"100%\",\n\t\twidth: \"100%\",\n\t\tmargin: \"30\",\n\t\tpadding: \"5\",\n\t\tbackgroundColor: \"#f7f7f7\",\n\t},\n\tinput: {\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\tjustifyContent: \"space-around\",\n\t},\n\titems: {\n\t\theight: \"80%\",\n\t},\n\tbutton: {\n\t\tmarginTop: \"2rem\",\n\t},\n\tspace: {\n\t\tmarginTop: \"2rem\",\n\t},\n});\n\nconst ImportReagent = () => {\n\tconst classes = styles();\n\tlet cancelToken = useRef(\"\");\n\tconst autoC = useRef(null);\n\n\tconst [volume, setVolume] = useState(0);\n\tconst [unit, setUnit] = useState(\"Select Reagent\");\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [open, setOpen] = React.useState(false);\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = useState({});\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\n\tconst handleReset = () => {\n\t\tautoC.current\n\t\t\t.getElementsByClassName(\"MuiAutocomplete-clearIndicator\")[0]\n\t\t\t.click();\n\t\tsetUnit(\"Select Reagent\");\n\t\tsetVolume(0);\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\tconst handleSubmit = async () => {\n\t\tconst { error } = importReagentValidator({\n\t\t\treagentName: value,\n\t\t\tvolume: volume,\n\t\t});\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst { data } = await axiosi.put(`/reagent/import/${value._id}`, {\n\t\t\t\t\tvolume: volume,\n\t\t\t\t});\n\t\t\t\tsetMessage(data);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tsetMessage(e.response);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\t// const handleChange = (event) => {\n\t//     setRole(event.target.value);\n\t//   };\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<Paper style={{ height: \"100vh\" }}>\n\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t<div className={classes.input}>\n\t\t\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\t\t\tref={autoC}\n\t\t\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\t\t\tgetOptionLabel={(option) => option.reagentName}\n\t\t\t\t\t\t\t\tgetOptionSelected={(option, value) => option._id === value._id}\n\t\t\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\t\t\tif (newValue) {\n\t\t\t\t\t\t\t\t\t\tsetUnit(newValue.unit);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsetUnit(\"Select Reagent\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t//   if (!newValue) {\n\t\t\t\t\t\t\t\t\t//     setData([]);\n\t\t\t\t\t\t\t\t\t//   }\n\t\t\t\t\t\t\t\t\t//   setValue(newValue);\n\t\t\t\t\t\t\t\t\t//   fetchAllSample(newValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t{...params}\n\t\t\t\t\t\t\t\t\t\tlabel=\"Reagent Name\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tid=\"filled-read-only-input\"\n\t\t\t\t\t\t\t\tvalue={unit}\n\t\t\t\t\t\t\t\tlabel=\"Unit\"\n\t\t\t\t\t\t\t\t// defaultValue=\"Select Reagent\"\n\t\t\t\t\t\t\t\tInputProps={{\n\t\t\t\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tclassName={classes.space}\n\t\t\t\t\t\t\t\tvalue={volume}\n\t\t\t\t\t\t\t\tid=\"outlined-number\"\n\t\t\t\t\t\t\t\tlabel=\"Volume\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tInputLabelProps={{\n\t\t\t\t\t\t\t\t\tshrink: true,\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\tonChange={(event) => setVolume(event.target.value)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</Paper>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default ImportReagent;\n","/home/sherlock/Workdev/lims-frontend/src/Components/PendingSample.js",["125","126"],"import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport axios from \"../api\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nconst columns = [\n  { id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\n  {\n    id: \"customerName\",\n    label: \"Customer Name\",\n  },\n  { id: \"testName\", label: \"Test Name\", minWidth: 100 },\n  {\n    id: \"dueDate\",\n    label: \"Due Date\",\n    // minWidth: 170,\n    // align: 'right',\n    format: (value) => {\n      return value.substring(0, 10);\n    },\n  },\n  {\n    id: \"paymentStatus\",\n    label: \"Payment\",\n    minWidth: 170,\n    // align: 'right',\n    // format: (value) => value.toLocaleString('en-US'),\n  },\n  {\n    id: \"collectedBy\",\n    label: \"Collected By\",\n    minWidth: 170,\n    // align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n  {\n    id: \"status\",\n    label: \"Status\",\n    minWidth: 100,\n    format: (value) =>\n      value ? (\n        <Chip color=\"primary\" label=\"done\" />\n      ) : (\n        <Chip color=\"secondary\" label=\"pending\" />\n      ),\n  },\n  {\n    id: \"action\",\n    label: \"\",\n    format: () => (\n      <Button variant=\"contained\" color=\"primary\">\n        Generate Report\n      </Button>\n    ),\n    // align: 'right',\n    // format: (value) => value.toFixed(2),\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    marginTop: \"7%\",\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\n\nexport default function PendingSample() {\n  const classes = useStyles();\n  const [rows, setRows] = React.useState([]);\n  const [total, setTotal] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  React.useEffect(() => {\n    hadleFirstLoad();\n  }, [rowsPerPage]);\n\n  function TablePaginationActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n\n    const handleBackButtonClick = (event) => {\n      handleChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = async (event) => {\n      if (rows.length !== total) {\n        try {\n          const { data } = await axios.get(\"/sample/paginate\", {\n            params: { page: page + 1, limit: rowsPerPage },\n          });\n          setRows([...rows, ...data.rows]);\n\n          console.log(rows);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      handleChangePage(event, page + 1);\n    };\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n      </div>\n    );\n  }\n\n  const hadleFirstLoad = async () => {\n    try {\n      const { data } = await axios.get(\"/sample/paginate\", {\n        params: { page: page, limit: rowsPerPage },\n      });\n      setRows([...data.rows]);\n      console.log(data.total);\n      setTotal(data.total);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format ? column.format(value) : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 100]}\n        component=\"div\"\n        count={total}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n    </Paper>\n  );\n}\n","/home/sherlock/Workdev/lims-frontend/src/Components/AllSample.js",["127","128","129","130","131","132","133","134"],"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n\tTextField,\n\tmakeStyles,\n\tuseTheme,\n\tButton,\n\tTableContainer,\n\tTable,\n\tTableHead,\n\tTableRow,\n\tTableCell,\n\tTableBody,\n\tChip,\n\tIconButton,\n\tTablePagination,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport { Link } from \"react-router-dom\";\n\nconst styles = makeStyles({\n\tpaper: {\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"5%\",\n\t\tmarginBottom: \"2%\",\n\t\tmarginRight: \"3%\",\n\t\tdisplay: \"flex\",\n\t\tjustifyContent: \"space-between\",\n\t},\n\titems: {\n\t\tflex: \"1 1 1 1 auto\",\n\t\twidth: \"20em\",\n\t},\n\tbutton: {\n\t\tmargin: \"13px 12px 12px 10px\",\n\t\tbackgroundColor: \"#27E208\",\n\t},\n\ttables: {\n\t\theight: \"500px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"5%\",\n\t\tmarginLeft: \"3%\",\n\t},\n});\n\nconst useStyles1 = makeStyles((theme) => ({\n\troot: {\n\t\tflexShrink: 0,\n\t\tmarginLeft: theme.spacing(2.5),\n\t},\n}));\n\nconst columns = [\n\t{ id: \"sampleNo\", label: \"Sample Number\", minWidth: 170 },\n\t{\n\t\tid: \"customerName\",\n\t\tlabel: \"Customer Name\",\n\t},\n\t{ id: \"testName\", label: \"Test Name\", minWidth: 100 },\n\t{\n\t\tid: \"created_at\",\n\t\tlabel: \"Created At\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{\n\t\tid: \"dueDate\",\n\t\tlabel: \"Due Date\",\n\t\t// minWidth: 170,\n\t\t// align: 'right',\n\t\tformat: (value) => {\n\t\t\treturn value.substring(0, 10);\n\t\t},\n\t},\n\t{\n\t\tid: \"paymentStatus\",\n\t\tlabel: \"Payment\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toLocaleString('en-US'),\n\t},\n\t{\n\t\tid: \"collectedBy\",\n\t\tlabel: \"Collected By\",\n\t\tminWidth: 170,\n\t\t// align: 'right',\n\t\t// format: (value) => value.toFixed(2),\n\t},\n\t{\n\t\tid: \"status\",\n\t\tlabel: \"Status\",\n\t\tminWidth: 100,\n\t\tformat: (value) =>\n\t\t\tvalue ? (\n\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t) : (\n\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t),\n\t},\n\t{ id: \"Action\", label: \"Report\", minWidth: 100 },\n];\n\nconst AllSample = (props) => {\n\tconst classes = styles();\n\tconst [sampleFields, setSampleFields] = React.useState({\n\t\tdate: \"\",\n\t\tsampleId: \"\",\n\t});\n\tconst [rows, setRows] = React.useState([]);\n\tconst [total, setTotal] = React.useState(0);\n\tconst [page, setPage] = React.useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = React.useState({});\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tconst [customer, setCustomer] = React.useState({\n\t\t_id: \"\",\n\t});\n\tlet cancelToken = useRef(\"\");\n\n\tReact.useEffect(() => {\n\t\thandleFirstload();\n\t}, [rowsPerPage]);\n\n\tReact.useEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleFirstload = async () => {\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: page,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tsetTotal(data.total);\n\t\t\tconsole.log(\"data\");\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/customer/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChangeInput = (input) => (event) => {\n\t\tsetSampleFields({ ...sampleFields, [input]: event.target.value });\n\t};\n\n\tconst handleSearch = async () => {\n\t\tconsole.log(customer._id);\n\t\ttry {\n\t\t\tlet { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\tparams: {\n\t\t\t\t\tpage: page,\n\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t},\n\t\t\t});\n\t\t\tsetRows([...data.rows]);\n\t\t\tsetTotal(data.total);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst openReport = (row) => {\n\t\tprops.history.push({ pathname: \"/generateReport\", state: row });\n\t};\n\n\tfunction TablePaginationActions(props) {\n\t\tconst classes = useStyles1();\n\t\tconst theme = useTheme();\n\n\t\tconst handleBackButtonClick = (event) => {\n\t\t\thandleChangePage(event, page - 1);\n\t\t};\n\n\t\tconst handleNextButtonClick = async (event) => {\n\t\t\tif (rows.length !== total) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { data } = await axiosi.get(\"/sample/\", {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tpage: page + 1,\n\t\t\t\t\t\t\tlimit: rowsPerPage,\n\t\t\t\t\t\t\tsampleId: sampleFields.sampleId,\n\t\t\t\t\t\t\tCustomer: customer._id,\n\t\t\t\t\t\t\tDate: sampleFields.date,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\tsetRows([...rows, ...data.rows]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\thandleChangePage(event, page + 1);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={classes.root}>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleBackButtonClick}\n\t\t\t\t\tdisabled={page === 0}\n\t\t\t\t\taria-label=\"previous page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t\t<IconButton\n\t\t\t\t\tonClick={handleNextButtonClick}\n\t\t\t\t\tdisabled={page >= Math.ceil(total / rowsPerPage) - 1}\n\t\t\t\t\taria-label=\"next page\"\n\t\t\t\t>\n\t\t\t\t\t{theme.direction === \"rtl\" ? (\n\t\t\t\t\t\t<KeyboardArrowLeft />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<KeyboardArrowRight />\n\t\t\t\t\t)}\n\t\t\t\t</IconButton>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(event.target.value);\n\t\tsetPage(0);\n\t};\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t<Autocomplete\n\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\tgetOptionLabel={(option) => option.firstName + \" \" + option.lastName}\n\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\tnewValue\n\t\t\t\t\t\t\t? setCustomer({ _id: newValue._id })\n\t\t\t\t\t\t\t: setCustomer({ _id: \"\" });\n\t\t\t\t\t}}\n\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t}}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t<TextField {...params} label=\"Customer Name\" variant=\"outlined\" />\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"Date\"\n\t\t\t\t\tvalue={sampleFields.date}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"date\")}\n\t\t\t\t/>\n\t\t\t\t<TextField\n\t\t\t\t\tname=\"SampleId\"\n\t\t\t\t\tlabel=\"Sample Id\"\n\t\t\t\t\tvalue={sampleFields.sampleId}\n\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonChange={handleChangeInput(\"sampleId\")}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\tonClick={handleSearch}\n\t\t\t\t>\n\t\t\t\t\t<SearchIcon />\n\t\t\t\t\tSearch\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t\t<div className={classes.table}>\n\t\t\t\t<TableContainer className={classes.tables}>\n\t\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t{columns.map((item) => (\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\t\talign={item.align}\n\t\t\t\t\t\t\t\t\t\tstyle={{ minWidth: item.minWidth }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{rows\n\t\t\t\t\t\t\t\t.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n\t\t\t\t\t\t\t\t.map((row) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<TableRow hover role=\"checkbox\" tabIndex={-1} key={row._id}>\n\t\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (column.id != \"Action\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{column.format ? column.format(value) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t<TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => openReport(row)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tGenerate Report\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t\t<TablePagination\n\t\t\t\t\trowsPerPageOptions={[5, 10, 100]}\n\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\tcount={total}\n\t\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\t\tpage={page}\n\t\t\t\t\tonChangePage={handleChangePage}\n\t\t\t\t\tonChangeRowsPerPage={handleChangeRowsPerPage}\n\t\t\t\t\tActionsComponent={TablePaginationActions}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n};\n\nexport default AllSample;\n","/home/sherlock/Workdev/lims-frontend/src/Components/login.js",["135"],"import React, { useState } from \"react\";\nimport {\n  TextField,\n  Paper,\n  makeStyles,\n  Typography,\n  Button,\n  FormControl,\n} from \"@material-ui/core\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport axios from \"../api\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { useDispatch } from \"react-redux\";\nimport { setUser } from \"../action/setUser\";\nimport { Redirect } from \"react-router\";\nconst styles = makeStyles({\n  paper: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    height: \"100%\",\n    width: \"100%\",\n    margin: \"0\",\n    padding: \"0\",\n    backgroundColor: \"#f7f7f7\",\n  },\n  input: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  button: {\n    marginTop: \"2rem\",\n  },\n});\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst Login = ({ isLogin, setLogin }) => {\n  const dispatch = useDispatch();\n  const classes = styles();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // //SnackBar operations\n  const [messege, setMessege] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const { data } = await axios.post(\"/login\", {\n        userName: username,\n        password,\n      });\n      const { id, role } = jwt_decode(data.token);\n      localStorage.setItem(\"token\", data.token);\n      window.axios.defaults.headers.common[\"Authorization\"] =\n        \"Bearer \" + localStorage.getItem(\"token\");\n      dispatch(setUser(id, role));\n      setLogin(true);\n    } catch (e) {\n      console.log(e);\n      setMessege(e.response.data);\n      handleOpen();\n      setUsername(\"\");\n      setPassword(\"\");\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Paper style={{ height: \"100vh\" }}>\n        <div className={classes.paper}>\n          <Typography\n            variant=\"h4\"\n            style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}\n          >\n            Laboratory Management System\n          </Typography>\n          <FormControl>\n            <div className={classes.input}>\n              <TextField\n                name=\"Username\"\n                required\n                label=\"Username\"\n                value={username}\n                variant=\"filled\"\n                onChange={(e) => setUsername(e.target.value)}\n              />\n              <TextField\n                required\n                type=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                value={password}\n                variant=\"filled\"\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <Button\n                className={classes.button}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSubmit}\n              >\n                LOGIN\n              </Button>\n            </div>\n          </FormControl>\n        </div>\n      </Paper>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"error\">\n          {messege}\n        </Alert>\n      </Snackbar>\n    </React.Fragment>\n  );\n};\n\nexport default Login;\n","/home/sherlock/Workdev/lims-frontend/src/Components/AddSample.js",["136","137","138","139","140","141"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { forwardRef } from \"react\";\nimport { TextField, makeStyles, Button } from \"@material-ui/core\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport { MTableBodyRow } from \"material-table\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport SnackBar from \"./SnackBar\";\nimport { addSampleValidaiton } from \"../validation/validator\";\n\nconst tableIcons = {\n\tAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n\tCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n\tClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n\tDetailPanel: forwardRef((props, ref) => (\n\t\t<ChevronRight {...props} ref={ref} />\n\t)),\n\tEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n\tExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n\tFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n\tFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n\tLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n\tNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n\tPreviousPage: forwardRef((props, ref) => (\n\t\t<ChevronLeft {...props} ref={ref} />\n\t)),\n\tResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n\tSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n\tSortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n\tThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n\tViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\nconst styles = makeStyles((theme) => ({\n\tpaper: {\n\t\tdisplay: \"flex\",\n\t\tmarginBottom: theme.spacing(2),\n\t\tpadding: \"1em 2em 2em 2em\",\n\t\tmargin: \"6em 2em 2em 2em\",\n\t},\n\titem: {\n\t\twidth: \"15em\",\n\t},\n\tpapers: {\n\t\tdisplay: \"flex\",\n\t\tmarginBottom: theme.spacing(3),\n\t\tmarginRight: theme.spacing(5),\n\t},\n\titems: {\n\t\tmarginLeft: theme.spacing(8),\n\t\tflex: \"1 auto\",\n\t},\n\tbuttons: {\n\t\tmarginTop: theme.spacing(3),\n\t\tmarginLeft: theme.spacing(120),\n\t},\n\tbutton: {\n\t\tmargin: \"5px 3px 5px 5px\",\n\t},\n\ttables: {\n\t\theight: \"380px\",\n\t},\n\ttable: {\n\t\tmarginTop: \"7%\",\n\t\tmarginLeft: \"10%\",\n\t\tmarginRight: \"10%\",\n\t},\n}));\n\nconst AddSample = () => {\n\tconst classes = styles();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst [message, setMessage] = React.useState(\"\");\n\tconst [status, setStatus] = React.useState(\"\");\n\tconst [columns, setColumns] = useState([\n\t\t{ title: \"Sample Number\", field: \"sampleNo\" },\n\t\t{\n\t\t\ttitle: \"Test Name\",\n\t\t\tfield: \"testName\",\n\t\t},\n\t\t{ title: \"Due Date\", field: \"dueDate\", type: \"date\" },\n\t\t{ title: \"Collected By\", field: \"collectedBy\" },\n\t\t{ title: \"Payment\", field: \"paymentStatus\", type: \"numeric\" },\n\t\t{\n\t\t\ttitle: \"status\",\n\t\t\tfield: \"status\",\n\t\t\teditable: \"never\",\n\t\t\trender: (rowData) =>\n\t\t\t\trowData.status ? (\n\t\t\t\t\t<Chip color=\"primary\" label=\"done\" />\n\t\t\t\t) : (\n\t\t\t\t\t<Chip color=\"secondary\" label=\"pending\" />\n\t\t\t\t),\n\t\t},\n\t]);\n\n\tconst [data, setData] = useState([]);\n\tconst [addSample, setAddSample] = React.useState({\n\t\tsampleNo: \"\",\n\t\tdueDate: new Date(),\n\t\tcollectedBy: \"\",\n\t\tpaymentStatus: 0,\n\t\ttestName: \"\",\n\t});\n\tconst [reset, setReset] = React.useState(Object.assign({}, addSample));\n\tconst [options, setOptions] = useState([]);\n\tconst [value, setValue] = React.useState({});\n\tconst [inputValue, setInputValue] = React.useState(\"\");\n\tlet cancelToken = useRef(\"\");\n\tuseEffect(() => {\n\t\tif (inputValue) {\n\t\t\tfetchSearchResult();\n\t\t} else {\n\t\t\tsetOptions([]);\n\t\t}\n\t}, [inputValue]);\n\n\tconst handleClick = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = (event, reason) => {\n\t\tif (reason === \"clickaway\") {\n\t\t\treturn;\n\t\t}\n\n\t\tsetOpen(false);\n\t};\n\tconst handleReset = () => {\n\t\tsetAddSample({ ...reset });\n\t};\n\n\tconst handleSubmit = async () => {\n\t\tconst { error } = addSampleValidaiton(addSample);\n\t\tif (error) {\n\t\t\tsetMessage(error.details[0].message);\n\t\t\tsetStatus(\"error\");\n\t\t\thandleClick();\n\t\t}\n\t\tif (!error) {\n\t\t\ttry {\n\t\t\t\tconst res = await axiosi.post(\"/sample/add\", {\n\t\t\t\t\t...addSample,\n\t\t\t\t\tcustomerId: value._id,\n\t\t\t\t\tcustomerName: value.firstName + \" \" + value.lastName,\n\t\t\t\t});\n\t\t\t\tsetData([{ ...res.data.data }, ...data]);\n\t\t\t\tsetMessage(res.data.message);\n\t\t\t\tsetStatus(\"success\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(e.response);\n\t\t\t\tsetMessage(e.response.data);\n\t\t\t\tsetStatus(\"error\");\n\t\t\t\thandleClick();\n\t\t\t\thandleReset();\n\t\t\t}\n\t\t}\n\t};\n\n\tconst fetchSearchResult = async () => {\n\t\tif (cancelToken.current) {\n\t\t\tcancelToken.current.cancel();\n\t\t}\n\t\tcancelToken.current = axios.CancelToken.source();\n\t\ttry {\n\t\t\tconst { data } = await axiosi.get(`/customer/search/${inputValue}`, {\n\t\t\t\tcancelToken: cancelToken.current.token,\n\t\t\t});\n\t\t\tconsole.log(\"search complete\");\n\t\t\tsetOptions(data);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst fetchAllSample = async (newValue) => {\n\t\ttry {\n\t\t\tconst res = await axiosi.get(`/sample/find/${newValue._id}`);\n\t\t\tsetData([...data, ...res.data]);\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t};\n\n\tconst handleChange = (input) => (event) => {\n\t\tsetAddSample({ ...addSample, [input]: event.target.value });\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<React.Fragment>\n\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t<Autocomplete\n\t\t\t\t\t\tid=\"combo-box-demo\"\n\t\t\t\t\t\tgetOptionLabel={(option) =>\n\t\t\t\t\t\t\toption.firstName + \" \" + option.lastName\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgetOptionSelected={(option, value) => option.id === value.id}\n\t\t\t\t\t\tinputValue={inputValue}\n\t\t\t\t\t\tonChange={(event, newValue) => {\n\t\t\t\t\t\t\tif (!newValue) {\n\t\t\t\t\t\t\t\tsetData([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetValue(newValue);\n\t\t\t\t\t\t\tfetchAllSample(newValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonInputChange={(event, newInputValue) => {\n\t\t\t\t\t\t\tsetInputValue(newInputValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\toptions={options}\n\t\t\t\t\t\tstyle={{ width: 300 }}\n\t\t\t\t\t\trenderInput={(params) => (\n\t\t\t\t\t\t\t<TextField {...params} label=\"Customer Name\" variant=\"outlined\" />\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.papers}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname=\"sample_no\"\n\t\t\t\t\t\tlabel=\"Sample NO\"\n\t\t\t\t\t\tvalue={addSample.sampleNo}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\tonChange={handleChange(\"sampleNo\")}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname=\"Due_Date\"\n\t\t\t\t\t\tvalue={addSample.dueDate}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\ttype=\"date\"\n\t\t\t\t\t\tonChange={handleChange(\"dueDate\")}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname=\"Collected_By\"\n\t\t\t\t\t\tlabel=\"Collected By\"\n\t\t\t\t\t\tvalue={addSample.collectedBy}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange(\"collectedBy\")}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.papers}>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname=\"payment\"\n\t\t\t\t\t\tlabel=\"Payment\"\n\t\t\t\t\t\tvalue={addSample.paymentStatus}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tonChange={handleChange(\"paymentStatus\")}\n\t\t\t\t\t/>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tname=\"test_name\"\n\t\t\t\t\t\tlabel=\"Test Name\"\n\t\t\t\t\t\tvalue={addSample.testName}\n\t\t\t\t\t\tvariant=\"filled\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\ttype=\"string\"\n\t\t\t\t\t\tonChange={handleChange(\"testName\")}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\tclassName={classes.button}\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.items}\n\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.table}>\n\t\t\t\t\t{data.length ? (\n\t\t\t\t\t\t<MaterialTable\n\t\t\t\t\t\t\tshowEmptyDataSourceMessage={false}\n\t\t\t\t\t\t\ticons={tableIcons}\n\t\t\t\t\t\t\ttitle=\"All tests\"\n\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\toptions={{\n\t\t\t\t\t\t\t\tsearch: false,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\teditable={{\n\t\t\t\t\t\t\t\tonRowUpdate: (newData, oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tlet { _id, ...req } = newData;\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axiosi.put(\n\t\t\t\t\t\t\t\t\t\t\t\t`/sample/update/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t\treq,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataUpdate = [...data];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataUpdate[index] = res.data;\n\t\t\t\t\t\t\t\t\t\t\tsetData([...dataUpdate]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tonRowDelete: (oldData) =>\n\t\t\t\t\t\t\t\t\tnew Promise(async (resolve, reject) => {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tconst res = await axiosi.delete(\n\t\t\t\t\t\t\t\t\t\t\t\t`/sample/delete/${oldData._id}`,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\tconst dataDelete = [...data];\n\t\t\t\t\t\t\t\t\t\t\tconst index = oldData.tableData.id;\n\t\t\t\t\t\t\t\t\t\t\tdataDelete.splice(index, 1);\n\t\t\t\t\t\t\t\t\t\t\tsetData([...dataDelete]);\n\t\t\t\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\t\t\t\t\treject();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t\t<SnackBar\n\t\t\t\tmessege={message}\n\t\t\t\topen={open}\n\t\t\t\thandleClose={handleClose}\n\t\t\t\tstatus={status}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default AddSample;\n","/home/sherlock/Workdev/lims-frontend/src/Components/register.js",["142","143","144","145","146","147"],"import React, { useState } from \"react\";\nimport {\n    TextField,\n    Paper,\n    makeStyles,\n    Button,\n   Select,\n   MenuItem,\n   InputLabel,\n   FormControl,\n   TableContainer,\n   Table,\n   TableHead,\n   TableRow,\n   TableCell,\n   TableBody\n} from \"@material-ui/core\";\nconst styles = makeStyles({\n    paper: {\n        marginTop: \"10%\",\n        marginLeft: \"5%\",\n        marginBottom: \"2%\",\n        display: \"flex\",\n        justifyContent:\"space-between\"\n    },\n    items:{\n     flex:\"1 1 1 1 auto\",\n     width:\"20em\"\n    },\n    button: {\n        margin: \"13px 12px 12px 10px\",\n    },\n    tables: {\n        height: \"380px\",\n      },\n      table: {\n        marginTop:\"7%\",\n        marginLeft: \"3%\",\n      },\n});\n\n\nconst Register = () => {\n    const classes = styles();\n    const [username, setUsername] = useState(\"\");\n    const [password , setPassword] = useState(\"\");\n    const [role , setRole] = useState(\"\");\n    const [open, setOpen] = React.useState(false);\n\n  const handleChange = (event) => {\n    setRole(event.target.value);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n    return (\n        <React.Fragment>\n                <div className={classes.paper}>\n                    <TextField\n                            name=\"Username\"\n                            label=\"Username\"\n                            // value={username}\n                            variant=\"filled\" \n                            className={classes.items}\n                        />\n                        <TextField\n                            // type=\"password\"\n                            name=\"password\"\n                            label=\"Password\"\n                            // value={password}\n                            variant=\"filled\"\n                            className={classes.items}\n                        />\n                         <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-controlled-open-select-label\">Roles</InputLabel>\n                        <Select\n                        labelId=\"demo-controlled-open-select-label\"\n                        id=\"demo-controlled-open-select\"\n                        open={open}\n                        onClose={handleClose}\n                        onOpen={handleOpen}\n                        value={role}\n                        onChange={handleChange}\n                        className={classes.items}\n                        >\n                        <MenuItem value=\"staff\">Staff</MenuItem>\n                        <MenuItem value=\"inventory_manager\">Inventory Manager</MenuItem>\n                        <MenuItem value=\"accountant\">Accountant</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.items}\n                        >\n                            Register\n                        </Button>\n                    </div>\n                    <div className={classes.table}>\n        <TableContainer className={classes.tables}>\n        <Table stickyHeader aria-label=\"sticky table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>UserName</TableCell>\n            <TableCell>Password</TableCell>\n            <TableCell>Roles</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n            <TableRow>\n                <TableCell>Ramesh</TableCell>\n                <TableCell>1234</TableCell>\n                <TableCell>Inventory Manager</TableCell>\n                <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Edit\n                        </Button>\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Delete\n                        </Button>\n            </TableRow>\n            <TableRow>\n                <TableCell>Ramesh</TableCell>\n                <TableCell>1234</TableCell>\n                <TableCell>Inventory Manager</TableCell>\n                <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Edit\n                        </Button>\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Delete\n                        </Button>\n            </TableRow>\n            <TableRow>\n                <TableCell>Ramesh</TableCell>\n                <TableCell>1234</TableCell>\n                <TableCell>Inventory Manager</TableCell>\n                <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            Edit\n                        </Button>\n                        <Button\n                            className={classes.button}\n                            variant=\"contained\"\n                            color=\"secondary\"\n                        >\n                            Delete\n                        </Button>\n            </TableRow>\n        </TableBody>\n        </Table>\n        </TableContainer>\n        </div>\n        </React.Fragment>\n    )\n}\n\nexport default Register;","/home/sherlock/Workdev/lims-frontend/src/action/setUser.js",[],"/home/sherlock/Workdev/lims-frontend/src/Components/AllReagent.js",["148","149","150","151","152"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField ,Chip} from \"@material-ui/core\";\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n\n  container: {\n    marginTop: \"20%\",\n  },\n}));\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    marginTop: \"7%\",\n  },\n  container: {\n    maxHeight: 440,\n  },\n  paper: {\n    display: \"flex\",\n    marginTop: \"7%\",\n    marginLeft: \"5%\",\n  },\n  table: { marginTop: \"1%\" },\n});\n\nexport default function AllReagent() {\n  const classes = useStyles();\n  const [rows, setRows] = React.useState([]);\n  const [total, setTotal] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [value, setValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const [columns, setColumns] = React.useState([\n    { id: \"reagentName\", label: \"Reagent Name\", minWidth: 170 },\n    {\n      id: \"unit\",\n      label: \"Unit\",\n    },\n    { id: \"volume\", \n    label: \"Volume\",\n     minWidth: 100,\n     format: (value) =>{\n       return(\n         value>20 ?(  <Chip\n          label={value}\n          color=\"primary\"\n          style={{ marginRight: 5 }}\n        />):(  <Chip\n          label={value}\n          color=\"secondary\"\n          style={{ marginRight: 5 }}\n        />) \n       )\n     }\n     },\n  ]);\n  let cancelToken = useRef(\"\");\n\n  useEffect(() => {\n    if (inputValue) {\n      fetchSearchResult();\n    } else {\n      setOptions([]);\n    }\n  }, [inputValue]);\n\n  React.useEffect(() => {\n    hadleFirstLoad();\n  }, [rowsPerPage]);\n\n  const fetchSearchResult = async () => {\n    if (cancelToken.current) {\n      cancelToken.current.cancel();\n    }\n    cancelToken.current = axios.CancelToken.source();\n    try {\n      const { data } = await axiosi.get(`/reagent/search/${inputValue}`, {\n        cancelToken: cancelToken.current.token,\n      });\n      console.log(\"search complete\");\n      setOptions(data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  function TablePaginationActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n\n    const handleBackButtonClick = (event) => {\n      handleChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = async (event) => {\n      if (rows.length !== total) {\n        try {\n          const { data } = await axiosi.get(\"/reagent\", {\n            params: { page: page + 1, limit: rowsPerPage },\n          });\n          setRows([...rows, ...data.rows]);\n\n          console.log(rows);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      handleChangePage(event, page + 1);\n    };\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n      </div>\n    );\n  }\n\n  const hadleFirstLoad = async () => {\n    try {\n      const { data } = await axiosi.get(\"/reagent\", {\n        params: { page: page, limit: rowsPerPage },\n      });\n      setRows([...data.rows]);\n      console.log(data.total);\n      setTotal(data.total);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.paper}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          getOptionLabel={(option) => option.reagentName}\n          getOptionSelected={(option, value) => option._id === value._id}\n          inputValue={inputValue}\n          onChange={(event, newValue) => {\n            if (!newValue) {\n              setPage(0);\n              hadleFirstLoad();\n              return;\n            }\n            setTotal(1);\n            setRows([newValue]);\n            setValue(newValue);\n          }}\n          onInputChange={(event, newInputValue) => {\n            setInputValue(newInputValue);\n          }}\n          options={options}\n          style={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Reagent Name\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n      <div className={classes.table}>\n        <TableContainer>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column.id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.length\n                ? rows\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => {\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          tabIndex={-1}\n                          key={row._id}\n                        >\n                          {columns.map((column) => {\n                            const value = row[column.id];\n                            return (\n                              <TableCell key={column.id} align={column.align}>\n                                {column.format ? column.format(value) : value}\n                              </TableCell>\n                            );\n                          })}\n                        </TableRow>\n                      );\n                    })\n                : null}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 100]}\n        component=\"div\"\n        count={total}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n    </React.Fragment>\n  );\n}\n","/home/sherlock/Workdev/lims-frontend/src/Components/AddTest.js",["153"],"import React from \"react\";\nimport \"./myStyle.css\";\nimport { makeStyles, Button, TextField, Chip } from \"@material-ui/core\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport {\n  addTestValidator,\n  addParameterValidator,\n} from \"../validation/validator\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"1em 2em 2em 2em\",\n    margin: \"4em 2em 2em 2em\",\n  },\n  root: {\n    display: \"flex\",\n  },\n  position: {\n    marginLeft: theme.spacing(8),\n    flex: \"1 auto\",\n  },\n  buttons: {\n    marginTop: theme.spacing(6),\n    marginLeft: theme.spacing(120),\n  },\n  button: {\n    marginLeft: theme.spacing(6),\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n  },\n  table: {\n    marginTop: \"7%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n  saveButton: {\n    marginLeft: \"90%\",\n    marginTop: \"5%\",\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n    background: \"#28B463\",\n    color: \"white\",\n  },\n}));\n\nconst AddTest = () => {\n  const classes = useStyles();\n  const [addTest, setAddTest] = React.useState({\n    testName: \"\",\n    testAmount: \"\",\n  });\n  const [addParameter, setAddparameter] = React.useState({\n    parameters: \"\",\n    units: \"\",\n    referenceRange: \"\",\n  });\n  const [parameter, setParameter] = React.useState([]);\n\n  const [columns, setColumns] = React.useState([\n    { title: \"Parameters\", field: \"parameters\" },\n    { title: \"Units\", field: \"units\" },\n    { title: \"Reference Range\", field: \"referenceRange\" },\n  ]);\n  const [message, setMessage] = React.useState();\n  const [status, setStatus] = React.useState();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleChange = (input) => (event) => {\n    setAddTest({ ...addTest, [input]: event.target.value });\n  };\n\n  const handleParameters = (input) => (event) => {\n    setAddparameter({ ...addParameter, [input]: event.target.value });\n  };\n\n  const handleAdd = () => {\n    const testError = addTestValidator(addTest);\n    const parameterError = addParameterValidator(addParameter);\n    if (testError.error) {\n      setMessage(testError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (parameterError.error) {\n      setMessage(parameterError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!testError.error && !parameterError.error) {\n      setParameter([...parameter, addParameter]);\n      setAddparameter({ parameters: \"\", units: \"\", referenceRange: \"\" });\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const test = {\n        name: addTest.testName,\n        amount: addTest.testAmount,\n        parameter: parameter,\n      };\n      console.log(test);\n      const res = await axios.post(\"/test/add\", test);\n      console.log(res.data);\n      setMessage(res.data);\n      setStatus(\"success\");\n      handleClick();\n      setAddTest({\n        testName: \"\",\n        testAmount: \"\",\n      });\n      setParameter([]);\n    } catch (e) {\n      setMessage(e.Error);\n      setStatus(\"error\");\n      handleClick();\n      console.log(e);\n    }\n  };\n\n  return (\n    <div className={classes.body}>\n      <React.Fragment>\n        <h4>Test Details</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Test Name\"\n            variant=\"outlined\"\n            value={addTest.testName}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleChange(\"testName\")}\n          />\n          <TextField\n            label=\"Test Amount\"\n            variant=\"outlined\"\n            value={addTest.testAmount}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"number\"\n            onChange={handleChange(\"testAmount\")}\n          />\n        </div>\n        <h4>Bio-Chemical Parameters</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Parameter\"\n            variant=\"outlined\"\n            value={addParameter.parameters}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"parameters\")}\n          />\n          <TextField\n            label=\"unit\"\n            variant=\"outlined\"\n            value={addParameter.units}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"units\")}\n          />\n          <TextField\n            label=\"Reference Range\"\n            variant=\"outlined\"\n            value={addParameter.referenceRange}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"referenceRange\")}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={handleAdd}\n          >\n            Add\n          </Button>\n        </div>\n        <div className={classes.table}>\n          {parameter.length ? (\n            <div>\n              <MaterialTable\n                showEmptyDataSourceMessage={false}\n                title=\"Add tests\"\n                icons={tableIcons}\n                columns={columns}\n                data={parameter}\n                options={{\n                  search: false,\n                }}\n                components={{\n                  Toolbar: (props) => (\n                    <div>\n                      <MTableToolbar {...props} />\n                      <div style={{ padding: \"0px 10px\" }}>\n                        <Chip\n                          label=\"Test Name\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testName}\n                          color=\"secondary\"\n                          style={{ marginRight: 50 }}\n                        />\n                        <Chip\n                          label=\"Test Amount\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testAmount}\n                          color=\"secondary\"\n                          style={{ marginRight: 5 }}\n                        />\n                      </div>\n                    </div>\n                  ),\n                }}\n                editable={{\n                  onRowDelete: (oldData) =>\n                    new Promise((resolve, reject) => {\n                      try {\n                        const name = oldData.parameters;\n                        const filterdParameter = parameter.filter(\n                          (item) => item.parameters !== name\n                        );\n                        setParameter([...filterdParameter]);\n                        resolve();\n                      } catch (e) {\n                        console.log(e);\n                        reject();\n                      }\n                    }),\n                }}\n              />\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.saveButton}\n                  onClick={handleSave}\n                >\n                  save\n                </Button>\n              </div>\n            </div>\n          ) : null}\n        </div>\n        <div>\n          <SnackBar\n            messege={message}\n            open={open}\n            handleClose={handleClose}\n            status={status}\n          />\n        </div>\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/lims-frontend/src/Components/SnackBar.js",[],"/home/sherlock/Workdev/lims-frontend/src/validation/validator.js",[],"/home/sherlock/Workdev/lims-frontend/src/api/index.js",[],"/home/sherlock/Workdev/lims-frontend/src/Components/GenerateReport.js",["154","155","156","157","158","159"],"/home/sherlock/Workdev/lims-frontend/src/Components/ProtectedRoute.js",["160"],"import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n  const state = useSelector((state) => state.auth);\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (state[0].role != \"admin\") {\n          return <Component {...rest} {...props} />;\n        } else {\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n                state: {\n                  from: props.location,\n                },\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n};\n\nexport default ProtectedRoute;\n","/home/sherlock/Workdev/lims-frontend/src/Components/AllTest.js",["161","162","163","164"],"import React, { useRef, useEffect } from \"react\";\nimport axiosi from \"../api\";\nimport axios from \"axios\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField } from \"@material-ui/core\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport Box from \"@material-ui/core/Box\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport SnackBar from \"./SnackBar\";\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n\n  container: {\n    marginTop: \"20%\",\n  },\n}));\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    marginTop: \"7%\",\n  },\n  container: {\n    maxHeight: 440,\n  },\n  paper: {\n    display: \"flex\",\n    marginTop: \"7%\",\n    marginLeft: \"5%\",\n  },\n  table: { marginTop: \"4%\" },\n  rowStyle: {\n    \"& > *\": {\n      borderBottom: \"unset\",\n    },\n  },\n  subTable: {\n    width: \"30%\",\n  },\n});\nfunction Row(props) {\n  const { row, handleClick, history } = props;\n\n  const [open, setOpen] = React.useState(false);\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <TableRow className={classes.rowStyle}>\n        <TableCell>\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {row.name}\n        </TableCell>\n        <TableCell>{row.amount}</TableCell>\n        <TableCell>\n          <IconButton\n            onClick={() => {\n              handleClick(row);\n            }}\n          >\n            <DeleteIcon color=\"secondary\" />\n          </IconButton>\n          <IconButton\n            onClick={() =>\n              history.push({\n                pathname: \"/editTest\",\n                state: row,\n              })\n            }\n          >\n            <EditIcon color=\"primary\" />\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box margin={1}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                Parameters\n              </Typography>\n              <Table\n                size=\"small\"\n                aria-label=\"purchases\"\n                className={classes.subTable}\n              >\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Parameter</TableCell>\n                    <TableCell>Unit</TableCell>\n                    <TableCell align=\"right\">Reference Range</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.parameter.map((parameter) => (\n                    <TableRow key={parameter._id}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {parameter.parameters}\n                      </TableCell>\n                      <TableCell>{parameter.units}</TableCell>\n                      <TableCell align=\"right\">\n                        {parameter.referenceRange}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>\n        </TableCell>\n      </TableRow>\n    </React.Fragment>\n  );\n}\n\nexport default function AllTest(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState();\n  const [status, setStatus] = React.useState();\n  const [openD, setOpenD] = React.useState(false);\n  const [rows, setRows] = React.useState([]);\n  const [total, setTotal] = React.useState(0);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [value, setValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n\n  let cancelToken = useRef(\"\");\n\n  useEffect(() => {\n    if (inputValue) {\n      fetchSearchResult();\n    } else {\n      setOptions([]);\n    }\n  }, [inputValue]);\n\n  React.useEffect(() => {\n    hadleFirstLoad();\n  }, [rowsPerPage]);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  React.useEffect(() => {\n    if (props.location && props.location.state) {\n      setMessage(props.location.state);\n      setStatus(\"success\");\n      handleClick();\n    }\n  }, []);\n\n  const handleCloses = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleClickOpen = (name) => {\n    setValue(name);\n    setOpenD(true);\n  };\n\n  const handleClose = () => {\n    setOpenD(false);\n  };\n\n  const fetchSearchResult = async () => {\n    if (cancelToken.current) {\n      cancelToken.current.cancel();\n    }\n    cancelToken.current = axios.CancelToken.source();\n    try {\n      const { data } = await axiosi.get(`/test/search/${inputValue}`, {\n        cancelToken: cancelToken.current.token,\n      });\n      console.log(\"search complete\");\n      setOptions(data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const hadleFirstLoad = async () => {\n    try {\n      const { data } = await axiosi.get(\"/test\", {\n        params: { page: page, limit: rowsPerPage },\n      });\n      setRows([...data.rows]);\n      console.log(data.total);\n      setTotal(data.total);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleDelete = async () => {\n    try {\n      const res = await axiosi.delete(`/test/delete/${value._id}`);\n      handleClose();\n      setPage(0);\n      hadleFirstLoad();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  function TablePaginationActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n\n    const handleBackButtonClick = (event) => {\n      handleChangePage(event, page - 1);\n    };\n\n    const handleNextButtonClick = async (event) => {\n      if (rows.length !== total) {\n        try {\n          const { data } = await axiosi.get(\"/test\", {\n            params: { page: page + 1, limit: rowsPerPage },\n          });\n          setRows([...rows, ...data.rows]);\n\n          console.log(rows);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n      handleChangePage(event, page + 1);\n    };\n\n    return (\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleBackButtonClick}\n          disabled={page === 0}\n          aria-label=\"previous page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(total / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === \"rtl\" ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n      </div>\n    );\n  }\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <React.Fragment>\n      <div className={classes.paper}>\n        <Autocomplete\n          id=\"combo-box-demo\"\n          getOptionLabel={(option) => option.name}\n          getOptionSelected={(option, value) => option._id === value._id}\n          inputValue={inputValue}\n          onChange={(event, newValue) => {\n            if (!newValue) {\n              setPage(0);\n              hadleFirstLoad();\n              return;\n            }\n            setTotal(1);\n            setRows([newValue]);\n            setValue(newValue);\n          }}\n          onInputChange={(event, newInputValue) => {\n            setInputValue(newInputValue);\n          }}\n          options={options}\n          style={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Test Name\" variant=\"outlined\" />\n          )}\n        />\n      </div>\n      <div className={classes.table}>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"collapsible table\">\n            <TableHead>\n              <TableRow>\n                <TableCell />\n                <TableCell>Test Name</TableCell>\n                <TableCell>Amount</TableCell>\n                <TableCell>Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.length\n                ? rows\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row) => (\n                      <Row\n                        key={row.name}\n                        row={row}\n                        handleClick={handleClickOpen}\n                        history={props.history}\n                      />\n                    ))\n                : null}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n      <TablePagination\n        rowsPerPageOptions={[5, 10, 100]}\n        component=\"div\"\n        count={total}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n        ActionsComponent={TablePaginationActions}\n      />\n      <Dialog\n        open={openD}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Are you sure you want to delete \"{value.name}\"?\n        </DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Disagree\n          </Button>\n          <Button onClick={handleDelete} color=\"primary\" autoFocus>\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <SnackBar\n        messege={message}\n        open={open}\n        handleClose={handleCloses}\n        status={status}\n      />\n    </React.Fragment>\n  );\n}\n","/home/sherlock/Workdev/lims-frontend/src/Components/EditTest.js",["165"],"import React from \"react\";\nimport \"./myStyle.css\";\nimport { makeStyles, Button, TextField, Chip } from \"@material-ui/core\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport {\n  addTestValidator,\n  addParameterValidator,\n} from \"../validation/validator\";\nimport axios from \"../api\";\nimport SnackBar from \"./SnackBar\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"1em 2em 2em 2em\",\n    margin: \"4em 2em 2em 2em\",\n  },\n  root: {\n    display: \"flex\",\n  },\n  position: {\n    marginLeft: theme.spacing(8),\n    flex: \"1 auto\",\n  },\n  buttons: {\n    marginTop: theme.spacing(6),\n    marginLeft: theme.spacing(120),\n  },\n  button: {\n    marginLeft: theme.spacing(6),\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n  },\n  table: {\n    marginTop: \"7%\",\n    marginLeft: \"10%\",\n    marginRight: \"10%\",\n  },\n  saveButton: {\n    marginLeft: \"90%\",\n    marginTop: \"5%\",\n    width: \"200px\",\n    paddingLeft: \"20px\",\n    height: \"3.3em\",\n    background: \"#28B463\",\n    color: \"white\",\n  },\n}));\n\nconst AddTest = (props) => {\n  const { location } = props;\n  const classes = useStyles();\n  const [addTest, setAddTest] = React.useState({\n    testName: location.state ? location.state.name : \"\",\n    testAmount: location.state ? location.state.amount : \"\",\n  });\n  const [addParameter, setAddparameter] = React.useState({\n    parameters: \"\",\n    units: \"\",\n    referenceRange: \"\",\n  });\n  const [parameter, setParameter] = React.useState(\n    location.state ? location.state.parameter : []\n  );\n\n  const [columns, setColumns] = React.useState([\n    { title: \"Parameters\", field: \"parameters\" },\n    { title: \"Units\", field: \"units\" },\n    { title: \"Reference Range\", field: \"referenceRange\" },\n  ]);\n  const [message, setMessage] = React.useState();\n  const [status, setStatus] = React.useState();\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleChange = (input) => (event) => {\n    setAddTest({ ...addTest, [input]: event.target.value });\n  };\n\n  const handleParameters = (input) => (event) => {\n    setAddparameter({ ...addParameter, [input]: event.target.value });\n  };\n\n  const handleAdd = () => {\n    const testError = addTestValidator(addTest);\n    const parameterError = addParameterValidator(addParameter);\n    if (testError.error) {\n      setMessage(testError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (parameterError.error) {\n      setMessage(parameterError.error.details[0].message);\n      setStatus(\"error\");\n      handleClick();\n    }\n    if (!testError.error && !parameterError.error) {\n      setParameter([...parameter, addParameter]);\n      setAddparameter({ parameters: \"\", units: \"\", referenceRange: \"\" });\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      const test = {\n        name: addTest.testName,\n        amount: addTest.testAmount,\n        parameter: parameter,\n      };\n      if (location.state._id) {\n        props.history.push(\"/\");\n      }\n      const res = await axios.put(`/test/update/${location.state._id}`, test);\n      props.history.push({\n        pathname: \"/allTest\",\n        state: res.data,\n      });\n    } catch (e) {\n      setMessage(e.Error);\n      setStatus(\"error\");\n      handleClick();\n      console.log(e);\n    }\n  };\n\n  return (\n    <div className={classes.body}>\n      <React.Fragment>\n        <h4>Test Details</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Test Name\"\n            variant=\"outlined\"\n            value={addTest.testName}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleChange(\"testName\")}\n          />\n          <TextField\n            label=\"Test Amount\"\n            variant=\"outlined\"\n            value={addTest.testAmount}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"number\"\n            onChange={handleChange(\"testAmount\")}\n          />\n        </div>\n        <h4>Bio-Chemical Parameters</h4>\n        <div className={classes.root}>\n          <TextField\n            label=\"Parameter\"\n            variant=\"outlined\"\n            value={addParameter.parameters}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"parameters\")}\n          />\n          <TextField\n            label=\"unit\"\n            variant=\"outlined\"\n            value={addParameter.units}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"units\")}\n          />\n          <TextField\n            label=\"Reference Range\"\n            variant=\"outlined\"\n            value={addParameter.referenceRange}\n            style={{ width: 80 }}\n            className={classes.position}\n            type=\"string\"\n            onChange={handleParameters(\"referenceRange\")}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={handleAdd}\n          >\n            Add\n          </Button>\n        </div>\n        <div className={classes.table}>\n          {parameter.length ? (\n            <div>\n              <MaterialTable\n                showEmptyDataSourceMessage={false}\n                title=\"Add tests\"\n                icons={tableIcons}\n                columns={columns}\n                data={parameter}\n                options={{\n                  search: false,\n                }}\n                components={{\n                  Toolbar: (props) => (\n                    <div>\n                      <MTableToolbar {...props} />\n                      <div style={{ padding: \"0px 10px\" }}>\n                        <Chip\n                          label=\"Test Name\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testName}\n                          color=\"secondary\"\n                          style={{ marginRight: 50 }}\n                        />\n                        <Chip\n                          label=\"Test Amount\"\n                          color=\"primary\"\n                          style={{ marginRight: 5 }}\n                        />\n                        <Chip\n                          label={addTest.testAmount}\n                          color=\"secondary\"\n                          style={{ marginRight: 5 }}\n                        />\n                      </div>\n                    </div>\n                  ),\n                }}\n                editable={{\n                  onRowUpdate: (newData, oldData) =>\n                    new Promise(async (resolve, reject) => {\n                      try {\n                        const dataUpdate = [...parameter];\n                        const index = oldData.tableData.id;\n                        dataUpdate[index] = newData;\n                        setParameter([...dataUpdate]);\n                        resolve();\n                      } catch (e) {\n                        console.log(e);\n                        reject();\n                      }\n                    }),\n                  onRowDelete: (oldData) =>\n                    new Promise((resolve, reject) => {\n                      try {\n                        const name = oldData.parameters;\n                        const filterdParameter = parameter.filter(\n                          (item) => item.parameters !== name\n                        );\n                        setParameter([...filterdParameter]);\n                        resolve();\n                      } catch (e) {\n                        console.log(e);\n                        reject();\n                      }\n                    }),\n                }}\n              />\n              <div>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.saveButton}\n                  onClick={handleSave}\n                >\n                  save\n                </Button>\n              </div>\n            </div>\n          ) : null}\n        </div>\n        <div>\n          <SnackBar\n            messege={message}\n            open={open}\n            handleClose={handleClose}\n            status={status}\n          />\n        </div>\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default AddTest;\n","/home/sherlock/Workdev/lims-frontend/src/Components/report.js",["166","167","168","169","170","171","172","173","174"],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":14,"column":8,"nodeType":"181","messageId":"182","endLine":14,"endColumn":22},{"ruleId":"179","severity":1,"message":"183","line":18,"column":23,"nodeType":"181","messageId":"182","endLine":18,"endColumn":34},{"ruleId":"179","severity":1,"message":"184","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"185","line":64,"column":17,"nodeType":"181","messageId":"182","endLine":64,"endColumn":25},{"ruleId":"186","severity":1,"message":"187","line":85,"column":6,"nodeType":"188","endLine":85,"endColumn":13,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":143,"column":11,"nodeType":"192","endLine":143,"endColumn":37},{"ruleId":"179","severity":1,"message":"193","line":206,"column":25,"nodeType":"181","messageId":"182","endLine":206,"endColumn":28},{"ruleId":"179","severity":1,"message":"194","line":23,"column":10,"nodeType":"181","messageId":"182","endLine":23,"endColumn":18},{"ruleId":"179","severity":1,"message":"185","line":50,"column":20,"nodeType":"181","messageId":"182","endLine":50,"endColumn":28},{"ruleId":"186","severity":1,"message":"195","line":58,"column":5,"nodeType":"188","endLine":58,"endColumn":17,"suggestions":"196"},{"ruleId":"186","severity":1,"message":"197","line":98,"column":6,"nodeType":"188","endLine":98,"endColumn":19,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":109,"column":23,"nodeType":"201","messageId":"202","endLine":109,"endColumn":25},{"ruleId":"179","severity":1,"message":"203","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":36},{"ruleId":"179","severity":1,"message":"204","line":23,"column":10,"nodeType":"181","messageId":"182","endLine":23,"endColumn":14},{"ruleId":"179","severity":1,"message":"205","line":123,"column":9,"nodeType":"181","messageId":"182","endLine":123,"endColumn":14},{"ruleId":"179","severity":1,"message":"206","line":123,"column":16,"nodeType":"181","messageId":"182","endLine":123,"endColumn":24},{"ruleId":"186","severity":1,"message":"207","line":132,"column":5,"nodeType":"188","endLine":132,"endColumn":18,"suggestions":"208"},{"ruleId":"186","severity":1,"message":"209","line":140,"column":5,"nodeType":"188","endLine":140,"endColumn":17,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":339,"column":34,"nodeType":"213","messageId":"214","endLine":339,"endColumn":36},{"ruleId":"199","severity":1,"message":"200","line":340,"column":27,"nodeType":"201","messageId":"202","endLine":340,"endColumn":29},{"ruleId":"179","severity":1,"message":"194","line":18,"column":10,"nodeType":"181","messageId":"182","endLine":18,"endColumn":18},{"ruleId":"179","severity":1,"message":"215","line":23,"column":10,"nodeType":"181","messageId":"182","endLine":23,"endColumn":23},{"ruleId":"179","severity":1,"message":"216","line":94,"column":18,"nodeType":"181","messageId":"182","endLine":94,"endColumn":28},{"ruleId":"179","severity":1,"message":"185","line":124,"column":16,"nodeType":"181","messageId":"182","endLine":124,"endColumn":24},{"ruleId":"186","severity":1,"message":"195","line":135,"column":5,"nodeType":"188","endLine":135,"endColumn":17,"suggestions":"217"},{"ruleId":"190","severity":1,"message":"191","line":290,"column":7,"nodeType":"192","endLine":290,"endColumn":32},{"ruleId":"179","severity":1,"message":"193","line":329,"column":18,"nodeType":"181","messageId":"182","endLine":329,"endColumn":21},{"ruleId":"179","severity":1,"message":"218","line":4,"column":5,"nodeType":"181","messageId":"182","endLine":4,"endColumn":10},{"ruleId":"179","severity":1,"message":"219","line":45,"column":12,"nodeType":"181","messageId":"182","endLine":45,"endColumn":20},{"ruleId":"179","severity":1,"message":"220","line":45,"column":22,"nodeType":"181","messageId":"182","endLine":45,"endColumn":33},{"ruleId":"179","severity":1,"message":"221","line":46,"column":12,"nodeType":"181","messageId":"182","endLine":46,"endColumn":20},{"ruleId":"179","severity":1,"message":"222","line":46,"column":23,"nodeType":"181","messageId":"182","endLine":46,"endColumn":34},{"ruleId":"190","severity":1,"message":"191","line":101,"column":29,"nodeType":"192","endLine":101,"endColumn":54},{"ruleId":"179","severity":1,"message":"218","line":11,"column":8,"nodeType":"181","messageId":"182","endLine":11,"endColumn":13},{"ruleId":"179","severity":1,"message":"205","line":53,"column":10,"nodeType":"181","messageId":"182","endLine":53,"endColumn":15},{"ruleId":"179","severity":1,"message":"216","line":55,"column":19,"nodeType":"181","messageId":"182","endLine":55,"endColumn":29},{"ruleId":"186","severity":1,"message":"195","line":87,"column":6,"nodeType":"188","endLine":87,"endColumn":18,"suggestions":"223"},{"ruleId":"186","severity":1,"message":"197","line":91,"column":6,"nodeType":"188","endLine":91,"endColumn":19,"suggestions":"224"},{"ruleId":"179","severity":1,"message":"216","line":103,"column":19,"nodeType":"181","messageId":"182","endLine":103,"endColumn":29},{"ruleId":"179","severity":1,"message":"225","line":97,"column":26,"nodeType":"181","messageId":"182","endLine":97,"endColumn":44},{"ruleId":"186","severity":1,"message":"226","line":118,"column":5,"nodeType":"188","endLine":118,"endColumn":7,"suggestions":"227"},{"ruleId":"186","severity":1,"message":"195","line":126,"column":5,"nodeType":"188","endLine":126,"endColumn":17,"suggestions":"228"},{"ruleId":"179","severity":1,"message":"229","line":188,"column":12,"nodeType":"181","messageId":"182","endLine":188,"endColumn":19},{"ruleId":"179","severity":1,"message":"230","line":339,"column":19,"nodeType":"181","messageId":"182","endLine":339,"endColumn":22},{"ruleId":"179","severity":1,"message":"231","line":342,"column":19,"nodeType":"181","messageId":"182","endLine":342,"endColumn":22},{"ruleId":"199","severity":1,"message":"200","line":11,"column":27,"nodeType":"201","messageId":"202","endLine":11,"endColumn":29},{"ruleId":"186","severity":1,"message":"195","line":170,"column":6,"nodeType":"188","endLine":170,"endColumn":18,"suggestions":"232"},{"ruleId":"186","severity":1,"message":"197","line":174,"column":6,"nodeType":"188","endLine":174,"endColumn":19,"suggestions":"233"},{"ruleId":"186","severity":1,"message":"234","line":186,"column":6,"nodeType":"188","endLine":186,"endColumn":8,"suggestions":"235"},{"ruleId":"179","severity":1,"message":"193","line":235,"column":13,"nodeType":"181","messageId":"182","endLine":235,"endColumn":16},{"ruleId":"179","severity":1,"message":"216","line":106,"column":19,"nodeType":"181","messageId":"182","endLine":106,"endColumn":29},{"ruleId":"179","severity":1,"message":"184","line":1,"column":17,"nodeType":"181","messageId":"182","endLine":1,"endColumn":25},{"ruleId":"179","severity":1,"message":"236","line":1,"column":27,"nodeType":"181","messageId":"182","endLine":1,"endColumn":33},{"ruleId":"179","severity":1,"message":"237","line":4,"column":2,"nodeType":"181","messageId":"182","endLine":4,"endColumn":11},{"ruleId":"179","severity":1,"message":"238","line":139,"column":24,"nodeType":"181","messageId":"182","endLine":139,"endColumn":40},{"ruleId":"179","severity":1,"message":"239","line":145,"column":15,"nodeType":"181","messageId":"182","endLine":145,"endColumn":22},{"ruleId":"186","severity":1,"message":"240","line":160,"column":5,"nodeType":"188","endLine":160,"endColumn":7,"suggestions":"241"},{"ruleId":"179","severity":1,"message":"242","line":214,"column":11,"nodeType":"181","messageId":"182","endLine":214,"endColumn":21},{"ruleId":"179","severity":1,"message":"242","line":229,"column":11,"nodeType":"181","messageId":"182","endLine":229,"endColumn":21},{"ruleId":"179","severity":1,"message":"243","line":248,"column":10,"nodeType":"181","messageId":"182","endLine":248,"endColumn":16},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'ProtectedRoute' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'useState' is defined but never used.","'setReset' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'runSearch'. Either include it or remove the dependency array.","ArrayExpression",["246"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'res' is assigned a value but never used.","'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["247"],"React Hook React.useEffect has a missing dependency: 'hadleFirstLoad'. Either include it or remove the dependency array.",["248"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Link' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'handleFirstload'. Either include it or remove the dependency array.",["249"],"React Hook React.useEffect has a missing dependency: 'fetchSearchResult'. Either include it or remove the dependency array.",["250"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'MTableBodyRow' is defined but never used.","'setColumns' is assigned a value but never used.",["251"],"'Paper' is defined but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.",["252"],["253"],"'SetCustomerDetails' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsedReagent'. Either include it or remove the dependency array.",["254"],["255"],"'respose' is assigned a value but never used.","'del' is assigned a value but never used.","'inc' is assigned a value but never used.",["256"],["257"],"React Hook React.useEffect has a missing dependency: 'props.location'. Either include it or remove the dependency array.",["258"],"'useRef' is defined but never used.","'TextField' is defined but never used.","'setSampleDetails' is assigned a value but never used.","'setDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchCustomerDetails', 'fetchReport', and 'fetchTestDetails'. Either include them or remove the dependency array.",["259"],"'saveReport' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"262","fix":"268"},{"desc":"262","fix":"269"},{"desc":"262","fix":"270"},{"desc":"264","fix":"271"},{"desc":"272","fix":"273"},{"desc":"262","fix":"274"},{"desc":"262","fix":"275"},{"desc":"264","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},"Update the dependencies array to be: [query, runSearch]",{"range":"281","text":"282"},"Update the dependencies array to be: [fetchSearchResult, inputValue]",{"range":"283","text":"284"},"Update the dependencies array to be: [hadleFirstLoad, rowsPerPage]",{"range":"285","text":"286"},"Update the dependencies array to be: [handleFirstload, rowsPerPage]",{"range":"287","text":"288"},{"range":"289","text":"284"},{"range":"290","text":"284"},{"range":"291","text":"284"},{"range":"292","text":"286"},"Update the dependencies array to be: [fetchUsedReagent]",{"range":"293","text":"294"},{"range":"295","text":"284"},{"range":"296","text":"284"},{"range":"297","text":"286"},"Update the dependencies array to be: [props.location]",{"range":"298","text":"299"},"Update the dependencies array to be: [fetchCustomerDetails, fetchReport, fetchTestDetails]",{"range":"300","text":"301"},[3431,3438],"[query, runSearch]",[1418,1430],"[fetchSearchResult, inputValue]",[2528,2541],"[hadleFirstLoad, rowsPerPage]",[2777,2790],"[handleFirstload, rowsPerPage]",[2901,2913],[4500,4512],[2420,2432],[2489,2502],[4247,4249],"[fetchUsedReagent]",[4354,4366],[5388,5400],[5457,5470],[5705,5707],"[props.location]",[4820,4822],"[fetchCustomerDetails, fetchReport, fetchTestDetails]"]